{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "#导入模块包\n",
    "%pylab inline\n",
    "import pandas as pd\n",
    "from datetime import date,datetime,timedelta\n",
    "import seaborn as sns\n",
    "from scipy.stats import mode"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这里是基于每周的特征提取,主要从三方面考虑:\n",
    "- 商品属性的特征\n",
    "- 时间特征\n",
    "- 用户历史行为的特征"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#1 数据读入、预处理\n",
    "\n",
    "##1.1 数据读入\n",
    "###item_feature数据集读入"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>cate_id</th>\n",
       "      <th>cate_level_id</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>supplier_id</th>\n",
       "      <th>pv_ipv</th>\n",
       "      <th>pv_uv</th>\n",
       "      <th>cart_ipv</th>\n",
       "      <th>cart_uv</th>\n",
       "      <th>...</th>\n",
       "      <th>jhs_pv_ipv</th>\n",
       "      <th>ztc_pv_uv</th>\n",
       "      <th>tbk_pv_uv</th>\n",
       "      <th>ss_pv_uv</th>\n",
       "      <th>jhs_pv_uv</th>\n",
       "      <th>num_alipay_njhs</th>\n",
       "      <th>amt_alipay_njhs</th>\n",
       "      <th>qty_alipay_njhs</th>\n",
       "      <th>unum_alipay_njhs</th>\n",
       "      <th>store_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>204814</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>158227</td>\n",
       "      <td>32</td>\n",
       "      <td>11</td>\n",
       "      <td>219</td>\n",
       "      <td>2062</td>\n",
       "      <td>298</td>\n",
       "      <td>145</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>4865.49</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>all</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146784</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>83412</td>\n",
       "      <td>32</td>\n",
       "      <td>11</td>\n",
       "      <td>629</td>\n",
       "      <td>190</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1185.81</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>all</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>129558</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>74418</td>\n",
       "      <td>26</td>\n",
       "      <td>8</td>\n",
       "      <td>510</td>\n",
       "      <td>1401</td>\n",
       "      <td>24</td>\n",
       "      <td>15</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>all</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4901</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>103761</td>\n",
       "      <td>37</td>\n",
       "      <td>11</td>\n",
       "      <td>480</td>\n",
       "      <td>1548</td>\n",
       "      <td>2368</td>\n",
       "      <td>1094</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>504</td>\n",
       "      <td>0</td>\n",
       "      <td>15</td>\n",
       "      <td>5150.52</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>all</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179298</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>21605</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>422</td>\n",
       "      <td>2110</td>\n",
       "      <td>2838</td>\n",
       "      <td>1215</td>\n",
       "      <td>118</td>\n",
       "      <td>91</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>11</td>\n",
       "      <td>440</td>\n",
       "      <td>0</td>\n",
       "      <td>97</td>\n",
       "      <td>39982.35</td>\n",
       "      <td>100</td>\n",
       "      <td>94</td>\n",
       "      <td>all</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             date  item_id  cate_id  cate_level_id  brand_id  supplier_id  \\\n",
       "204814 2014-10-10   158227       32             11       219         2062   \n",
       "146784 2014-10-10    83412       32             11       629          190   \n",
       "129558 2014-10-10    74418       26              8       510         1401   \n",
       "4901   2014-10-10   103761       37             11       480         1548   \n",
       "179298 2014-10-10    21605        4             11       422         2110   \n",
       "\n",
       "        pv_ipv  pv_uv  cart_ipv  cart_uv     ...      jhs_pv_ipv  ztc_pv_uv  \\\n",
       "204814     298    145         6        6     ...               0         44   \n",
       "146784      10      6         2        1     ...               0          0   \n",
       "129558      24     15         0        0     ...               0          0   \n",
       "4901      2368   1094         6        5     ...               0         10   \n",
       "179298    2838   1215       118       91     ...               0         23   \n",
       "\n",
       "        tbk_pv_uv  ss_pv_uv  jhs_pv_uv  num_alipay_njhs  amt_alipay_njhs  \\\n",
       "204814          0        25          0                3          4865.49   \n",
       "146784          0         2          0                1          1185.81   \n",
       "129558          0         9          0                0             0.00   \n",
       "4901            7       504          0               15          5150.52   \n",
       "179298         11       440          0               97         39982.35   \n",
       "\n",
       "        qty_alipay_njhs  unum_alipay_njhs  store_code  \n",
       "204814                3                 3         all  \n",
       "146784                1                 1         all  \n",
       "129558                0                 0         all  \n",
       "4901                 15                15         all  \n",
       "179298              100                94         all  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# date_fun函数主要用来解析时间字符串\n",
    "date_fun = lambda x: datetime.strptime(str(x),\"%Y%m%d\")\n",
    "\n",
    "item_feature_header =[\"date\",\"item_id\",\"cate_id\",\"cate_level_id\",\"brand_id\",\"supplier_id\",\"pv_ipv\",\"pv_uv\",\"cart_ipv\",\"cart_uv\",\"collect_uv\",\n",
    "         \"num_gmv\",\"amt_gmv\",\"qty_gmv\",\"unum_gmv\",\"amt_alipay\",\"num_alipay\",\"qty_alipay\",\"unum_alipay\",\"ztc_pv_ipv\",\n",
    "         \"tbk_pv_ipv\",\"ss_pv_ipv\",\"jhs_pv_ipv\",\"ztc_pv_uv\",\"tbk_pv_uv\",\"ss_pv_uv\",\"jhs_pv_uv\",\"num_alipay_njhs\",\n",
    "         \"amt_alipay_njhs\",\"qty_alipay_njhs\",\"unum_alipay_njhs\"]\n",
    "item_feature = pd.read_csv(\"../../data/dataset1/item_feature2.csv\",header=None,names=item_feature_header)\n",
    "item_feature.sort_index(by=[\"date\"],inplace=True)\n",
    "item_feature[\"store_code\"] = \"all\"\n",
    "item_feature.date = item_feature.date.map(date_fun)\n",
    "item_feature.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###item_store_feature数据集读入"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>cate_id</th>\n",
       "      <th>cate_level_id</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>supplier_id</th>\n",
       "      <th>pv_ipv</th>\n",
       "      <th>pv_uv</th>\n",
       "      <th>cart_ipv</th>\n",
       "      <th>...</th>\n",
       "      <th>ss_pv_ipv</th>\n",
       "      <th>jhs_pv_ipv</th>\n",
       "      <th>ztc_pv_uv</th>\n",
       "      <th>tbk_pv_uv</th>\n",
       "      <th>ss_pv_uv</th>\n",
       "      <th>jhs_pv_uv</th>\n",
       "      <th>num_alipay_njhs</th>\n",
       "      <th>amt_alipay_njhs</th>\n",
       "      <th>qty_alipay_njhs</th>\n",
       "      <th>unum_alipay_njhs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>732386</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>158638</td>\n",
       "      <td>5</td>\n",
       "      <td>26</td>\n",
       "      <td>8</td>\n",
       "      <td>510</td>\n",
       "      <td>676</td>\n",
       "      <td>1187</td>\n",
       "      <td>586</td>\n",
       "      <td>79</td>\n",
       "      <td>...</td>\n",
       "      <td>115</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>42070.59</td>\n",
       "      <td>46</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>601515</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>100293</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "      <td>41</td>\n",
       "      <td>662</td>\n",
       "      <td>52</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>66.46</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>740416</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>1013</td>\n",
       "      <td>4</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>406</td>\n",
       "      <td>1335</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>601213</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>100293</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "      <td>41</td>\n",
       "      <td>662</td>\n",
       "      <td>12</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>47.21</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>740803</th>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>1013</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>406</td>\n",
       "      <td>1335</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             date  item_id store_code  cate_id  cate_level_id  brand_id  \\\n",
       "732386 2014-10-10   158638          5       26              8       510   \n",
       "601515 2014-10-10   100293          5       22              4        41   \n",
       "740416 2014-10-10     1013          4       39             12       406   \n",
       "601213 2014-10-10   100293          1       22              4        41   \n",
       "740803 2014-10-10     1013          3       39             12       406   \n",
       "\n",
       "        supplier_id  pv_ipv  pv_uv  cart_ipv        ...         ss_pv_ipv  \\\n",
       "732386          676    1187    586        79        ...               115   \n",
       "601515          662      52     25         0        ...                 9   \n",
       "740416         1335       1      1         0        ...                 0   \n",
       "601213          662      12      4         1        ...                 2   \n",
       "740803         1335       2      2         0        ...                 0   \n",
       "\n",
       "        jhs_pv_ipv  ztc_pv_uv  tbk_pv_uv  ss_pv_uv  jhs_pv_uv  \\\n",
       "732386           0          0          6        80          0   \n",
       "601515           0          0          0         8          0   \n",
       "740416           0          0          0         0          0   \n",
       "601213           0          0          0         1          0   \n",
       "740803           0          0          0         0          0   \n",
       "\n",
       "        num_alipay_njhs  amt_alipay_njhs  qty_alipay_njhs  unum_alipay_njhs  \n",
       "732386               45         42070.59               46                41  \n",
       "601515                1            66.46                1                 1  \n",
       "740416                0             0.00                0                 0  \n",
       "601213                1            47.21                1                 1  \n",
       "740803                0             0.00                0                 0  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_store_feature_header = [\"date\",\"item_id\",\"store_code\",\"cate_id\",\"cate_level_id\",\"brand_id\",\"supplier_id\",\n",
    "    \"pv_ipv\",\"pv_uv\",\"cart_ipv\",\"cart_uv\",\"collect_uv\",\"num_gmv\",\"amt_gmv\",\"qty_gmv\",\"unum_gmv\",\"amt_alipay\",\n",
    "    \"num_alipay\",\"qty_alipay\",\"unum_alipay\",\"ztc_pv_ipv\",\"tbk_pv_ipv\",\"ss_pv_ipv\",\"jhs_pv_ipv\",\"ztc_pv_uv\",\n",
    "    \"tbk_pv_uv\",\"ss_pv_uv\",\"jhs_pv_uv\",\"num_alipay_njhs\",\"amt_alipay_njhs\",\"qty_alipay_njhs\",\"unum_alipay_njhs\"]\n",
    "item_store_feature = pd.read_csv(\"../../data/dataset1/item_store_feature2.csv\",header=None,names=item_store_feature_header)\n",
    "item_store_feature.sort_index(by=[\"date\"],inplace=True)\n",
    "item_store_feature.date = item_store_feature.date.map(date_fun)\n",
    "item_store_feature.store_code = item_store_feature.store_code.map(str)\n",
    "item_store_feature.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###合并数据集，区分train,test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amt_alipay</th>\n",
       "      <th>amt_alipay_njhs</th>\n",
       "      <th>amt_gmv</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>cart_ipv</th>\n",
       "      <th>cart_uv</th>\n",
       "      <th>cate_id</th>\n",
       "      <th>cate_level_id</th>\n",
       "      <th>collect_uv</th>\n",
       "      <th>date</th>\n",
       "      <th>...</th>\n",
       "      <th>ss_pv_uv</th>\n",
       "      <th>store_code</th>\n",
       "      <th>supplier_id</th>\n",
       "      <th>tbk_pv_ipv</th>\n",
       "      <th>tbk_pv_uv</th>\n",
       "      <th>unum_alipay</th>\n",
       "      <th>unum_alipay_njhs</th>\n",
       "      <th>unum_gmv</th>\n",
       "      <th>ztc_pv_ipv</th>\n",
       "      <th>ztc_pv_uv</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>601213</th>\n",
       "      <td>47.21</td>\n",
       "      <td>47.21</td>\n",
       "      <td>47.2</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>22</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>662</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>110995</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>430</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742039</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>406</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1335</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>736714</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>687</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>12</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1986</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>115031</th>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>431</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-10-10</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        amt_alipay  amt_alipay_njhs  amt_gmv  brand_id  cart_ipv  cart_uv  \\\n",
       "601213       47.21            47.21     47.2        41         1        1   \n",
       "110995        0.00             0.00      0.0        40         0        0   \n",
       "742039        0.00             0.00      0.0       406         0        0   \n",
       "736714        0.00             0.00      0.0       687         0        0   \n",
       "115031        0.00             0.00      0.0       431         0        0   \n",
       "\n",
       "        cate_id  cate_level_id  collect_uv       date    ...      ss_pv_uv  \\\n",
       "601213       22              4           0 2014-10-10    ...             1   \n",
       "110995       39             12           0 2014-10-10    ...             0   \n",
       "742039       39             12           0 2014-10-10    ...             0   \n",
       "736714       17             12           0 2014-10-10    ...             1   \n",
       "115031       26              8           0 2014-10-10    ...             0   \n",
       "\n",
       "        store_code  supplier_id  tbk_pv_ipv  tbk_pv_uv  unum_alipay  \\\n",
       "601213           1          662           0          0            1   \n",
       "110995           1          430           0          0            0   \n",
       "742039           1         1335           0          0            0   \n",
       "736714           1         1986           0          0            0   \n",
       "115031           1           80           0          0            0   \n",
       "\n",
       "        unum_alipay_njhs  unum_gmv  ztc_pv_ipv  ztc_pv_uv  \n",
       "601213                 1         1           0          0  \n",
       "110995                 0         0           0          0  \n",
       "742039                 0         0           0          0  \n",
       "736714                 0         0           0          0  \n",
       "115031                 0         0           0          0  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all = pd.concat([item_feature,item_store_feature])\n",
    "item_all.sort_index(by=[\"date\",\"store_code\"],inplace=True)\n",
    "item_all.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###config数据集读入"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58452</td>\n",
       "      <td>0</td>\n",
       "      <td>46.38</td>\n",
       "      <td>11.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36132</td>\n",
       "      <td>0</td>\n",
       "      <td>45.79</td>\n",
       "      <td>85.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34092</td>\n",
       "      <td>0</td>\n",
       "      <td>43.65</td>\n",
       "      <td>83.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62772</td>\n",
       "      <td>0</td>\n",
       "      <td>44.68</td>\n",
       "      <td>16.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9597</td>\n",
       "      <td>0</td>\n",
       "      <td>41.04</td>\n",
       "      <td>17.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id  store_code      a      b\n",
       "0    58452           0  46.38  11.86\n",
       "1    36132           0  45.79  85.94\n",
       "2    34092           0  43.65  83.86\n",
       "3    62772           0  44.68  16.89\n",
       "4     9597           0  41.04  17.70"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config_header = [\"item_id\",\"store_code\",\"a_b\"]\n",
    "config = pd.read_csv(\"../../data/dataset1/config2.csv\",header=None,names=config_header)\n",
    "##处理数据，拆分补低和补高成本\n",
    "fun_a = lambda x:  x.strip().split(\"_\")[0]\n",
    "fun_b = lambda x:  x.strip().split(\"_\")[1]\n",
    "config[\"a\"] = config[\"a_b\"].map(fun_a).astype(float)\n",
    "config[\"b\"] = config[\"a_b\"].map(fun_b).astype(float)\n",
    "config.drop(\"a_b\",axis = 1,inplace = True)\n",
    "config.replace(\"all\",0,inplace=True)\n",
    "config[\"store_code\"] = config[\"store_code\"].astype(int)\n",
    "config.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1.2 填充中间空缺行"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from datetime import date,datetime,timedelta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###该函数用来生成新的数据框\n",
    "def insert_data(df):\n",
    "    start_day = min(df.date)\n",
    "    last_day = pd.to_datetime(date(2016,1,11))\n",
    "    len_day = last_day-start_day\n",
    "    len_day = len_day.days\n",
    "    date_list = [start_day+timedelta(days=x) for x in range(0,len_day)]\n",
    "    date_list = date_list * 6\n",
    "    store_code_list = []\n",
    "    store_code_list.extend([\"all\"]*len_day)\n",
    "    store_code_list.extend([\"1\"]*len_day)\n",
    "    store_code_list.extend([\"2\"]*len_day)\n",
    "    store_code_list.extend([\"3\"]*len_day)\n",
    "    store_code_list.extend([\"4\"]*len_day)\n",
    "    store_code_list.extend([\"5\"]*len_day)\n",
    "    date_dict = {\"date\":date_list,\"store_code\":store_code_list}\n",
    "    new_df = pd.DataFrame(date_dict)\n",
    "    new_df = pd.merge(new_df,df,on=[\"date\",\"store_code\"],how=\"left\")\n",
    "    fill_value = {\"item_id\":df.item_id.median(),\"cate_id\":df.cate_id.median(),\\\n",
    "                  \"cate_level_id\":df.cate_level_id.median(),\"brand_id\":df.brand_id.median(),\\\n",
    "                  \"supplier_id\":df.supplier_id.median()}\n",
    "    new_df.fillna(fill_value,inplace=True)\n",
    "    new_df.fillna(0,inplace=True)\n",
    "    return new_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1468860, 32)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_new = item_all.copy().groupby([\"item_id\"],group_keys=False).apply(insert_data)\n",
    "item_all_new.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1.3 共同特征处理\n",
    "\n",
    "###1.3.1 时间特征"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## parse datetime colum & add new time related columns\n",
    "dt = pd.DatetimeIndex(item_all_new['date'])\n",
    "##和日期相关的\n",
    "item_all_new['date'] = dt.date\n",
    "item_all_new['day'] = dt.day\n",
    "item_all_new['month'] = dt.month\n",
    "item_all_new['year'] = dt.year\n",
    "item_all_new['dow'] = dt.dayofweek\n",
    "item_all_new['woy'] = dt.weekofyear"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###1.3.2 节假日"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def getSpecialDayType(year, month, day):\n",
    "    #special day\n",
    "    if (month == 2 and (day <= 14 and day >=7)) or (month == 8 and (day <= 20 and day >= 13)):##情人节\n",
    "        return 1    \n",
    "    if month == 3 and (day <= 8 and day >= 1):##母女节\n",
    "        return 2 \n",
    "    if month == 2 and (day <=17 and day >=10):##春节前期\n",
    "        return 3\n",
    "    if month == 2 and (day >= 18 and day <=22):##春节中\n",
    "        return 4\n",
    "    if month == 3 and (day <= 15 and day >= 8):##消费者节\n",
    "        return 5\n",
    "    if month == 10 and (day <= 7 and day >= 1): #十一\n",
    "        return 6\n",
    "    if year == 2015 and month == 5 and (day <= 10 and day >=3):##母亲节\n",
    "        return 7     \n",
    "    if (month == 6 and day == 1) or (month == 5 and day>=25): ##儿童节\n",
    "        return 8    \n",
    "    if month == 12 and (day <= 25 and day >= 18):#圣诞\n",
    "        return 9  \n",
    "    if year == 2015 and month == 6 and (day >=19  and day <= 23):##父情节，端午节\n",
    "        return 10  \n",
    "    #holiday\n",
    "    if month == 1 and (day == 1 or day == 2 or day == 3):##元旦\n",
    "        return 11\n",
    "    if month == 4 and (day <= 5 and day >= 1): ##清明\n",
    "        return 12 \n",
    "    if month == 5 and (day == 1 or day == 2 or day == 3): ##五一\n",
    "        return 13   \n",
    "    if year == 2015 and month == 8 and day == 13:##813大促销\n",
    "        return 14  \n",
    "    if month == 4 and (day <=15 and day >=13): ##天猫新时尚促销\n",
    "        return 15\n",
    "    if year == 2015 and month == 6 and (day <= 18 and day >=15):##616大促销\n",
    "        return 16    \n",
    "    if year == 2015 and month == 9 and (day <=27 and day >= 23) :##925促销和中秋节\n",
    "        return 17 \n",
    "    if year == 2015 and month == 9 and day <= 9:##99大促销\n",
    "        return 18     \n",
    "    #commercial activity\n",
    "    if month == 11 and day == 11:#双十一\n",
    "        return 19\n",
    "    if month == 12 and day == 12: #双十二\n",
    "        return 20\n",
    "\n",
    "    return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##得到所有日期的special_day\n",
    "item_all_new[\"special_day\"] = item_all_new.date.map(lambda x : getSpecialDayType(x.year, x.month, x.day))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##对应促销活动的天用one hot处理\n",
    "temp =  item_all_new[\"special_day\"] == 19\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_1111\"] = temp \n",
    "temp = item_all_new[\"special_day\"] == 20\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_1212\"] = temp \n",
    "temp = item_all_new[\"special_day\"] == 18\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_0909\"] = temp \n",
    "temp = item_all_new[\"special_day\"] == 17\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_0925\"] = temp \n",
    "temp = item_all_new[\"special_day\"] == 16\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_0616\"] = temp \n",
    "temp = item_all_new[\"special_day\"] == 15\n",
    "temp = temp.astype(int)\n",
    "item_all_new[\"special_day_0415\"] = temp "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>store_code</th>\n",
       "      <th>amt_alipay</th>\n",
       "      <th>amt_alipay_njhs</th>\n",
       "      <th>amt_gmv</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>cart_ipv</th>\n",
       "      <th>cart_uv</th>\n",
       "      <th>cate_id</th>\n",
       "      <th>cate_level_id</th>\n",
       "      <th>...</th>\n",
       "      <th>year</th>\n",
       "      <th>dow</th>\n",
       "      <th>woy</th>\n",
       "      <th>special_day</th>\n",
       "      <th>special_day_1111</th>\n",
       "      <th>special_day_1212</th>\n",
       "      <th>special_day_0909</th>\n",
       "      <th>special_day_0925</th>\n",
       "      <th>special_day_0616</th>\n",
       "      <th>special_day_0415</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-11-28</td>\n",
       "      <td>all</td>\n",
       "      <td>885.3</td>\n",
       "      <td>885.3</td>\n",
       "      <td>4578.87</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>2015</td>\n",
       "      <td>5</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-11-29</td>\n",
       "      <td>all</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>390</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>2015</td>\n",
       "      <td>6</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-11-30</td>\n",
       "      <td>all</td>\n",
       "      <td>885.3</td>\n",
       "      <td>885.3</td>\n",
       "      <td>4578.87</td>\n",
       "      <td>390</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>2015</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 44 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date store_code  amt_alipay  amt_alipay_njhs  amt_gmv  brand_id  \\\n",
       "0  2015-11-28        all       885.3            885.3  4578.87       390   \n",
       "1  2015-11-29        all         0.0              0.0     0.00       390   \n",
       "2  2015-11-30        all       885.3            885.3  4578.87       390   \n",
       "\n",
       "   cart_ipv  cart_uv  cate_id  cate_level_id        ...         year  dow  \\\n",
       "0         0        0       39             12        ...         2015    5   \n",
       "1         1        1       39             12        ...         2015    6   \n",
       "2         3        3       39             12        ...         2015    0   \n",
       "\n",
       "   woy  special_day  special_day_1111  special_day_1212  special_day_0909  \\\n",
       "0   48            0                 0                 0                 0   \n",
       "1   48            0                 0                 0                 0   \n",
       "2   49            0                 0                 0                 0   \n",
       "\n",
       "   special_day_0925  special_day_0616  special_day_0415  \n",
       "0                 0                 0                 0  \n",
       "1                 0                 0                 0  \n",
       "2                 0                 0                 0  \n",
       "\n",
       "[3 rows x 44 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_new.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###1.3.3 从起始日开始天数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def start_days(x):\n",
    "    y = x - date(2014,10,10)\n",
    "    y = y.days\n",
    "    return y\n",
    "\n",
    "##由于数据需要按12日28日开始转为2周数据预测，故按其切分周\n",
    "def start_week(x):\n",
    "    return (x+4)/7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_new[\"startday\"] = item_all_new[\"date\"].map(start_days)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "item_all_new[\"startweek\"] = item_all_new[\"startday\"].map(start_week)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>store_code</th>\n",
       "      <th>amt_alipay</th>\n",
       "      <th>amt_alipay_njhs</th>\n",
       "      <th>amt_gmv</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>cart_ipv</th>\n",
       "      <th>cart_uv</th>\n",
       "      <th>cate_id</th>\n",
       "      <th>cate_level_id</th>\n",
       "      <th>...</th>\n",
       "      <th>woy</th>\n",
       "      <th>special_day</th>\n",
       "      <th>special_day_1111</th>\n",
       "      <th>special_day_1212</th>\n",
       "      <th>special_day_0909</th>\n",
       "      <th>special_day_0925</th>\n",
       "      <th>special_day_0616</th>\n",
       "      <th>special_day_0415</th>\n",
       "      <th>startday</th>\n",
       "      <th>startweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2015-11-28</td>\n",
       "      <td>all</td>\n",
       "      <td>885.3</td>\n",
       "      <td>885.3</td>\n",
       "      <td>4578.87</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>414</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2015-11-29</td>\n",
       "      <td>all</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>390</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>415</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2015-11-30</td>\n",
       "      <td>all</td>\n",
       "      <td>885.3</td>\n",
       "      <td>885.3</td>\n",
       "      <td>4578.87</td>\n",
       "      <td>390</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>39</td>\n",
       "      <td>12</td>\n",
       "      <td>...</td>\n",
       "      <td>49</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>416</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         date store_code  amt_alipay  amt_alipay_njhs  amt_gmv  brand_id  \\\n",
       "0  2015-11-28        all       885.3            885.3  4578.87       390   \n",
       "1  2015-11-29        all         0.0              0.0     0.00       390   \n",
       "2  2015-11-30        all       885.3            885.3  4578.87       390   \n",
       "\n",
       "   cart_ipv  cart_uv  cate_id  cate_level_id    ...      woy  special_day  \\\n",
       "0         0        0       39             12    ...       48            0   \n",
       "1         1        1       39             12    ...       48            0   \n",
       "2         3        3       39             12    ...       49            0   \n",
       "\n",
       "   special_day_1111  special_day_1212  special_day_0909  special_day_0925  \\\n",
       "0                 0                 0                 0                 0   \n",
       "1                 0                 0                 0                 0   \n",
       "2                 0                 0                 0                 0   \n",
       "\n",
       "   special_day_0616  special_day_0415  startday  startweek  \n",
       "0                 0                 0       414         59  \n",
       "1                 0                 0       415         59  \n",
       "2                 0                 0       416         60  \n",
       "\n",
       "[3 rows x 46 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_new.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###1.3.3 聚划算特征"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_new[\"qty_alipay_jhs\"] = item_all_new[\"qty_alipay\"] - item_all_new[\"qty_alipay_njhs\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1.4 拆分train,test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_new_train = item_all_new[item_all_new.date < date(2015,12,28)]\n",
    "item_all_new_test = item_all_new[item_all_new.date >= date(2015,12,28)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##1.5 填充各item_id统计特征"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###1.5.1 item_id,store_code的中位数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "##得到每个item_id,store_code的中位数\n",
    "item_all_new_median = item_all_new_train.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs.median()\n",
    "item_all_new_median = item_all_new_median.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def dict_item(x,y):\n",
    "    return item_all_new_median[(x,y)]\n",
    "\n",
    "item_all_new[\"item_id_median\"] =item_all_new.apply(lambda x: dict_item(x[\"item_id\"],x[\"store_code\"]),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def new_value(x,y,key):\n",
    "    if x == key:\n",
    "        return y\n",
    "    else:\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "item_all_new[\"item_id_0_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"all\"), axis=1)\n",
    "item_all_new[\"item_id_1_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"1\"), axis=1)\n",
    "item_all_new[\"item_id_2_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"2\"), axis=1)\n",
    "item_all_new[\"item_id_3_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"3\"), axis=1)\n",
    "item_all_new[\"item_id_4_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"4\"), axis=1)\n",
    "item_all_new[\"item_id_5_median\"] = item_all_new[[\"store_code\",\"item_id_median\"]].apply\\\n",
    "        (lambda x: new_value(x[\"store_code\"],x[\"item_id_median\"],\"5\"), axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###1.5.2 item_id,store_code,month的中位数"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##得到每个item_id,store_code,month的中位数\n",
    "item_all_new_month = item_all_new_train.groupby([\"item_id\",\"store_code\",\"month\"]).qty_alipay_njhs.median()\n",
    "item_all_new_month =item_all_new_month.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def dict_month_x_y(x,y,z):\n",
    "    try:\n",
    "        return item_all_new_month[(x,y,z)]\n",
    "    except:\n",
    "        return item_all_new_month[(x,y,12)]\n",
    "    \n",
    "item_all_new[\"item_id_month_median\"] = item_all_new.apply(lambda x: dict_month_x_y(x[\"item_id\"],\\\n",
    "                                        x[\"store_code\"],x[\"month\"]),axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#2 商品统计属性的特征\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_new_grouped = item_all_new.groupby([\"item_id\",\"store_code\",\"startweek\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>item_id_5_median</th>\n",
       "      <th colspan=\"2\" halign=\"left\">month</th>\n",
       "      <th>brand_id</th>\n",
       "      <th>special_day_0925</th>\n",
       "      <th colspan=\"3\" halign=\"left\">pv_ipv</th>\n",
       "      <th>special_day_0415</th>\n",
       "      <th>supplier_id</th>\n",
       "      <th>...</th>\n",
       "      <th>qty_alipay_jhs</th>\n",
       "      <th colspan=\"4\" halign=\"left\">qty_alipay_njhs</th>\n",
       "      <th>item_id_median</th>\n",
       "      <th colspan=\"3\" halign=\"left\">cart_ipv</th>\n",
       "      <th>item_id_3_median</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>median</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>median</th>\n",
       "      <th>...</th>\n",
       "      <th>min</th>\n",
       "      <th>sum</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>median</th>\n",
       "      <th>mean</th>\n",
       "      <th>mean</th>\n",
       "      <th>max</th>\n",
       "      <th>min</th>\n",
       "      <th>mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>startweek</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">33</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
       "      <th>59</th>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                             item_id_5_median month     brand_id  \\\n",
       "                                         mean   max min   median   \n",
       "item_id store_code startweek                                       \n",
       "33      1          59                       0    11  11      390   \n",
       "                   60                       0    12  11      390   \n",
       "                   61                       0    12  12      390   \n",
       "                   62                       0    12  12      390   \n",
       "                   63                       0    12  12      390   \n",
       "\n",
       "                             special_day_0925    pv_ipv          \\\n",
       "                                          max      mean max min   \n",
       "item_id store_code startweek                                      \n",
       "33      1          59                       0  0.000000   0   0   \n",
       "                   60                       0  0.000000   0   0   \n",
       "                   61                       0  0.285714   2   0   \n",
       "                   62                       0  0.000000   0   0   \n",
       "                   63                       0  0.000000   0   0   \n",
       "\n",
       "                             special_day_0415 supplier_id       ...         \\\n",
       "                                          max      median       ...          \n",
       "item_id store_code startweek                                    ...          \n",
       "33      1          59                       0        1173       ...          \n",
       "                   60                       0        1173       ...          \n",
       "                   61                       0        1173       ...          \n",
       "                   62                       0        1173       ...          \n",
       "                   63                       0        1173       ...          \n",
       "\n",
       "                             qty_alipay_jhs qty_alipay_njhs                 \\\n",
       "                                        min             sum max min median   \n",
       "item_id store_code startweek                                                 \n",
       "33      1          59                     0               0   0   0      0   \n",
       "                   60                     0               0   0   0      0   \n",
       "                   61                     0               0   0   0      0   \n",
       "                   62                     0               0   0   0      0   \n",
       "                   63                     0               0   0   0      0   \n",
       "\n",
       "                             item_id_median  cart_ipv         item_id_3_median  \n",
       "                                       mean      mean max min             mean  \n",
       "item_id store_code startweek                                                    \n",
       "33      1          59                     0  0.000000   0   0                0  \n",
       "                   60                     0  0.000000   0   0                0  \n",
       "                   61                     0  0.142857   1   0                0  \n",
       "                   62                     0  0.000000   0   0                0  \n",
       "                   63                     0  0.000000   0   0                0  \n",
       "\n",
       "[5 rows x 46 columns]"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###先得到统计属性的dataframe\n",
    "item_all_week=item_all_new_grouped.agg({\"qty_alipay_njhs\":[\"sum\",\"max\",\"min\",\"median\"],\"cate_id\":[\"median\"],\"cate_level_id\":[\"median\"],\"brand_id\":[\"median\"],\\\n",
    "        \"supplier_id\":[\"median\"],\"month\":[\"max\",\"min\"],\"item_id_month_median\":[\"mean\"],\"item_id_median\":[\"mean\"],\"item_id_0_median\":[\"mean\"],\\\n",
    "        \"item_id_1_median\":[\"mean\"],\"item_id_2_median\":[\"mean\"],\"item_id_3_median\":[\"mean\"],\"item_id_4_median\":[\"mean\"],\\\n",
    "        \"item_id_5_median\":[\"mean\"],\"special_day\":[\"max\"],\"special_day_1111\":[\"max\"],\"special_day_1212\":[\"max\"],\\\n",
    "        \"special_day_0616\":[\"max\"],\"special_day_0909\":[\"max\"],\"special_day_0925\":[\"max\"],\"special_day_0415\":[\"max\"], \"pv_ipv\":[\"mean\",\"max\",\"min\"],\"cart_ipv\":[\"mean\",\"max\",\"min\"],\\\n",
    "              \"qty_alipay_jhs\":[\"mean\",\"max\",\"min\"],\"ztc_pv_ipv\":[\"mean\",\"max\",\"min\"],\"tbk_pv_ipv\":\\\n",
    "        [\"mean\",\"max\",\"min\"],\"ss_pv_ipv\":[\"mean\",\"max\",\"min\"],\"jhs_pv_ipv\":[\"mean\",\"max\",\"min\"]})\n",
    "item_all_week.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>item_id_5_median_mean</th>\n",
       "      <th>month_max</th>\n",
       "      <th>month_min</th>\n",
       "      <th>brand_id_median</th>\n",
       "      <th>special_day_0925_max</th>\n",
       "      <th>pv_ipv_mean</th>\n",
       "      <th>pv_ipv_max</th>\n",
       "      <th>pv_ipv_min</th>\n",
       "      <th>special_day_0415_max</th>\n",
       "      <th>supplier_id_median</th>\n",
       "      <th>...</th>\n",
       "      <th>qty_alipay_jhs_min</th>\n",
       "      <th>qty_alipay_njhs_sum</th>\n",
       "      <th>qty_alipay_njhs_max</th>\n",
       "      <th>qty_alipay_njhs_min</th>\n",
       "      <th>qty_alipay_njhs_median</th>\n",
       "      <th>item_id_median_mean</th>\n",
       "      <th>cart_ipv_mean</th>\n",
       "      <th>cart_ipv_max</th>\n",
       "      <th>cart_ipv_min</th>\n",
       "      <th>item_id_3_median_mean</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>startweek</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">33</th>\n",
       "      <th rowspan=\"5\" valign=\"top\">1</th>\n",
       "      <th>59</th>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>62</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>63</th>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1173</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 46 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              item_id_5_median_mean  month_max  month_min  \\\n",
       "item_id store_code startweek                                                \n",
       "33      1          59                             0         11         11   \n",
       "                   60                             0         12         11   \n",
       "                   61                             0         12         12   \n",
       "                   62                             0         12         12   \n",
       "                   63                             0         12         12   \n",
       "\n",
       "                              brand_id_median  special_day_0925_max  \\\n",
       "item_id store_code startweek                                          \n",
       "33      1          59                     390                     0   \n",
       "                   60                     390                     0   \n",
       "                   61                     390                     0   \n",
       "                   62                     390                     0   \n",
       "                   63                     390                     0   \n",
       "\n",
       "                              pv_ipv_mean  pv_ipv_max  pv_ipv_min  \\\n",
       "item_id store_code startweek                                        \n",
       "33      1          59            0.000000           0           0   \n",
       "                   60            0.000000           0           0   \n",
       "                   61            0.285714           2           0   \n",
       "                   62            0.000000           0           0   \n",
       "                   63            0.000000           0           0   \n",
       "\n",
       "                              special_day_0415_max  supplier_id_median  \\\n",
       "item_id store_code startweek                                             \n",
       "33      1          59                            0                1173   \n",
       "                   60                            0                1173   \n",
       "                   61                            0                1173   \n",
       "                   62                            0                1173   \n",
       "                   63                            0                1173   \n",
       "\n",
       "                                      ...            qty_alipay_jhs_min  \\\n",
       "item_id store_code startweek          ...                                 \n",
       "33      1          59                 ...                             0   \n",
       "                   60                 ...                             0   \n",
       "                   61                 ...                             0   \n",
       "                   62                 ...                             0   \n",
       "                   63                 ...                             0   \n",
       "\n",
       "                              qty_alipay_njhs_sum  qty_alipay_njhs_max  \\\n",
       "item_id store_code startweek                                             \n",
       "33      1          59                           0                    0   \n",
       "                   60                           0                    0   \n",
       "                   61                           0                    0   \n",
       "                   62                           0                    0   \n",
       "                   63                           0                    0   \n",
       "\n",
       "                              qty_alipay_njhs_min  qty_alipay_njhs_median  \\\n",
       "item_id store_code startweek                                                \n",
       "33      1          59                           0                       0   \n",
       "                   60                           0                       0   \n",
       "                   61                           0                       0   \n",
       "                   62                           0                       0   \n",
       "                   63                           0                       0   \n",
       "\n",
       "                              item_id_median_mean  cart_ipv_mean  \\\n",
       "item_id store_code startweek                                       \n",
       "33      1          59                           0       0.000000   \n",
       "                   60                           0       0.000000   \n",
       "                   61                           0       0.142857   \n",
       "                   62                           0       0.000000   \n",
       "                   63                           0       0.000000   \n",
       "\n",
       "                              cart_ipv_max  cart_ipv_min  \\\n",
       "item_id store_code startweek                               \n",
       "33      1          59                    0             0   \n",
       "                   60                    0             0   \n",
       "                   61                    1             0   \n",
       "                   62                    0             0   \n",
       "                   63                    0             0   \n",
       "\n",
       "                              item_id_3_median_mean  \n",
       "item_id store_code startweek                         \n",
       "33      1          59                             0  \n",
       "                   60                             0  \n",
       "                   61                             0  \n",
       "                   62                             0  \n",
       "                   63                             0  \n",
       "\n",
       "[5 rows x 46 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###修改columns,不要multiindex！！\n",
    "new_columns_name = [a+\"_\"+b for (a,b) in item_all_week.columns]\n",
    "item_all_week.columns = new_columns_name\n",
    "item_all_week.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##reset_index\n",
    "item_all_week.reset_index(inplace=True)\n",
    "item_all_week.sort_index(by=[\"item_id\",\"store_code\",\"startweek\"],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "###得到cunsum的估计值\n",
    "temp = item_all_week.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.cumsum()\n",
    "item_all_week[\"qty_alipay_njhs_cumsum\"]= temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>startweek</th>\n",
       "      <th>item_id_5_median_mean</th>\n",
       "      <th>month_max</th>\n",
       "      <th>month_min</th>\n",
       "      <th>brand_id_median</th>\n",
       "      <th>special_day_0925_max</th>\n",
       "      <th>pv_ipv_mean</th>\n",
       "      <th>pv_ipv_max</th>\n",
       "      <th>...</th>\n",
       "      <th>qty_alipay_njhs_sum</th>\n",
       "      <th>qty_alipay_njhs_max</th>\n",
       "      <th>qty_alipay_njhs_min</th>\n",
       "      <th>qty_alipay_njhs_median</th>\n",
       "      <th>item_id_median_mean</th>\n",
       "      <th>cart_ipv_mean</th>\n",
       "      <th>cart_ipv_max</th>\n",
       "      <th>cart_ipv_min</th>\n",
       "      <th>item_id_3_median_mean</th>\n",
       "      <th>qty_alipay_njhs_cumsum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 50 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id store_code  startweek  item_id_5_median_mean  month_max  month_min  \\\n",
       "0       33          1         59                      0         11         11   \n",
       "1       33          1         60                      0         12         11   \n",
       "2       33          1         61                      0         12         12   \n",
       "3       33          1         62                      0         12         12   \n",
       "4       33          1         63                      0         12         12   \n",
       "\n",
       "   brand_id_median  special_day_0925_max  pv_ipv_mean  pv_ipv_max  \\\n",
       "0              390                     0     0.000000           0   \n",
       "1              390                     0     0.000000           0   \n",
       "2              390                     0     0.285714           2   \n",
       "3              390                     0     0.000000           0   \n",
       "4              390                     0     0.000000           0   \n",
       "\n",
       "            ...            qty_alipay_njhs_sum  qty_alipay_njhs_max  \\\n",
       "0           ...                              0                    0   \n",
       "1           ...                              0                    0   \n",
       "2           ...                              0                    0   \n",
       "3           ...                              0                    0   \n",
       "4           ...                              0                    0   \n",
       "\n",
       "   qty_alipay_njhs_min  qty_alipay_njhs_median  item_id_median_mean  \\\n",
       "0                    0                       0                    0   \n",
       "1                    0                       0                    0   \n",
       "2                    0                       0                    0   \n",
       "3                    0                       0                    0   \n",
       "4                    0                       0                    0   \n",
       "\n",
       "   cart_ipv_mean  cart_ipv_max  cart_ipv_min  item_id_3_median_mean  \\\n",
       "0       0.000000             0             0                      0   \n",
       "1       0.000000             0             0                      0   \n",
       "2       0.142857             1             0                      0   \n",
       "3       0.000000             0             0                      0   \n",
       "4       0.000000             0             0                      0   \n",
       "\n",
       "   qty_alipay_njhs_cumsum  \n",
       "0                       0  \n",
       "1                       0  \n",
       "2                       0  \n",
       "3                       0  \n",
       "4                       0  \n",
       "\n",
       "[5 rows x 50 columns]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_week.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#3 用户历史行为"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(212220, 50)\n",
      "Index([u'item_id', u'store_code', u'startweek', u'item_id_5_median_mean',\n",
      "       u'month_max', u'month_min', u'brand_id_median', u'special_day_0925_max',\n",
      "       u'pv_ipv_mean', u'pv_ipv_max', u'pv_ipv_min', u'special_day_0415_max',\n",
      "       u'supplier_id_median', u'special_day_1111_max', u'tbk_pv_ipv_mean',\n",
      "       u'tbk_pv_ipv_max', u'tbk_pv_ipv_min', u'cate_id_median',\n",
      "       u'ztc_pv_ipv_mean', u'ztc_pv_ipv_max', u'ztc_pv_ipv_min',\n",
      "       u'special_day_max', u'special_day_0616_max', u'cate_level_id_median',\n",
      "       u'special_day_1212_max', u'item_id_1_median_mean',\n",
      "       u'item_id_4_median_mean', u'special_day_0909_max', u'jhs_pv_ipv_mean',\n",
      "       u'jhs_pv_ipv_max', u'jhs_pv_ipv_min', u'ss_pv_ipv_mean',\n",
      "       u'ss_pv_ipv_max', u'ss_pv_ipv_min', u'item_id_month_median_mean',\n",
      "       u'item_id_0_median_mean', u'item_id_2_median_mean',\n",
      "       u'qty_alipay_jhs_mean', u'qty_alipay_jhs_max', u'qty_alipay_jhs_min',\n",
      "       u'qty_alipay_njhs_sum', u'qty_alipay_njhs_max', u'qty_alipay_njhs_min',\n",
      "       u'qty_alipay_njhs_median', u'item_id_median_mean', u'cart_ipv_mean',\n",
      "       u'cart_ipv_max', u'cart_ipv_min', u'item_id_3_median_mean',\n",
      "       u'qty_alipay_njhs_cumsum'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print item_all_week.shape\n",
    "print item_all_week.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##3.1 商品前一周、两周、三周、四周的销量相关"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[u'cart_ipv_mean_shift_1', u'cart_ipv_max_shift_1', u'cart_ipv_min_shift_1', u'item_id_0_median_mean_shift_1', u'item_id_2_median_mean_shift_1', u'cate_level_id_median_shift_1', u'item_id_5_median_mean_shift_1', u'qty_alipay_jhs_sum_shift_1', u'qty_alipay_jhs_max_shift_1', u'qty_alipay_jhs_min_shift_1', u'qty_alipay_jhs_median_shift_1', u'item_id_1_median_mean_shift_1', u'brand_id_median_shift_1', u'item_id_4_median_mean_shift_1', u'qty_alipay_njhs_sum_shift_1', u'qty_alipay_njhs_max_shift_1', u'qty_alipay_njhs_min_shift_1', u'qty_alipay_njhs_median_shift_1', u'item_id_median_mean_shift_1', u'special_day_max_shift_1', u'cate_id_median_shift_1', u'item_id_3_median_mean_shift_1', u'pv_ipv_mean_shift_1', u'pv_ipv_max_shift_1', u'pv_ipv_min_shift_1', u'cart_ipv_mean_shift_2', u'cart_ipv_max_shift_2', u'cart_ipv_min_shift_2', u'item_id_0_median_mean_shift_2', u'item_id_2_median_mean_shift_2', u'cate_level_id_median_shift_2', u'item_id_5_median_mean_shift_2', u'qty_alipay_jhs_sum_shift_2', u'qty_alipay_jhs_max_shift_2', u'qty_alipay_jhs_min_shift_2', u'qty_alipay_jhs_median_shift_2', u'item_id_1_median_mean_shift_2', u'brand_id_median_shift_2', u'item_id_4_median_mean_shift_2', u'qty_alipay_njhs_sum_shift_2', u'qty_alipay_njhs_max_shift_2', u'qty_alipay_njhs_min_shift_2', u'qty_alipay_njhs_median_shift_2', u'item_id_median_mean_shift_2', u'special_day_max_shift_2', u'cate_id_median_shift_2', u'item_id_3_median_mean_shift_2', u'pv_ipv_mean_shift_2', u'pv_ipv_max_shift_2', u'pv_ipv_min_shift_2', u'cart_ipv_mean_shift_3', u'cart_ipv_max_shift_3', u'cart_ipv_min_shift_3', u'item_id_0_median_mean_shift_3', u'item_id_2_median_mean_shift_3', u'cate_level_id_median_shift_3', u'item_id_5_median_mean_shift_3', u'qty_alipay_jhs_sum_shift_3', u'qty_alipay_jhs_max_shift_3', u'qty_alipay_jhs_min_shift_3', u'qty_alipay_jhs_median_shift_3', u'item_id_1_median_mean_shift_3', u'brand_id_median_shift_3', u'item_id_4_median_mean_shift_3', u'qty_alipay_njhs_sum_shift_3', u'qty_alipay_njhs_max_shift_3', u'qty_alipay_njhs_min_shift_3', u'qty_alipay_njhs_median_shift_3', u'item_id_median_mean_shift_3', u'special_day_max_shift_3', u'cate_id_median_shift_3', u'item_id_3_median_mean_shift_3', u'pv_ipv_mean_shift_3', u'pv_ipv_max_shift_3', u'pv_ipv_min_shift_3', u'cart_ipv_mean_shift_4', u'cart_ipv_max_shift_4', u'cart_ipv_min_shift_4', u'item_id_0_median_mean_shift_4', u'item_id_2_median_mean_shift_4', u'cate_level_id_median_shift_4', u'item_id_5_median_mean_shift_4', u'qty_alipay_jhs_sum_shift_4', u'qty_alipay_jhs_max_shift_4', u'qty_alipay_jhs_min_shift_4', u'qty_alipay_jhs_median_shift_4', u'item_id_1_median_mean_shift_4', u'brand_id_median_shift_4', u'item_id_4_median_mean_shift_4', u'qty_alipay_njhs_sum_shift_4', u'qty_alipay_njhs_max_shift_4', u'qty_alipay_njhs_min_shift_4', u'qty_alipay_njhs_median_shift_4', u'item_id_median_mean_shift_4', u'special_day_max_shift_4', u'cate_id_median_shift_4', u'item_id_3_median_mean_shift_4', u'pv_ipv_mean_shift_4', u'pv_ipv_max_shift_4', u'pv_ipv_min_shift_4']\n"
     ]
    }
   ],
   "source": [
    "##选取要做shift的列,选出新的列,选用全部列，可能跑不动，得用下面的！！\n",
    "mycol = [ u'cart_ipv_mean', u'cart_ipv_max',u'cart_ipv_min', u'item_id_0_median_mean', u'item_id_2_median_mean',\n",
    "       u'cate_level_id_median', u'item_id_5_median_mean',u'qty_alipay_jhs_sum', u'qty_alipay_jhs_max', u'qty_alipay_jhs_min',\n",
    "       u'qty_alipay_jhs_median', u'item_id_1_median_mean', u'brand_id_median',u'item_id_4_median_mean', u'qty_alipay_njhs_sum',\n",
    "       u'qty_alipay_njhs_max', u'qty_alipay_njhs_min',u'qty_alipay_njhs_median', u'item_id_median_mean', u'special_day_max',\n",
    "       u'cate_id_median', u'item_id_3_median_mean', u'pv_ipv_mean',u'pv_ipv_max', u'pv_ipv_min']\n",
    "newcol = []\n",
    "for i in range(1,5,1):\n",
    "    name = \"_shift_\"+str(i)\n",
    "    for col in mycol:\n",
    "        newcol.append(col+name)\n",
    "print newcol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['qty_alipay_jhs_mean_shift_1', 'qty_alipay_jhs_max_shift_1', 'qty_alipay_jhs_min_shift_1', 'qty_alipay_njhs_cumsum_shift_1', 'qty_alipay_njhs_max_shift_1', 'qty_alipay_njhs_min_shift_1', 'qty_alipay_njhs_sum_shift_1', 'qty_alipay_njhs_median_shift_1', 'pv_ipv_mean_shift_1', 'pv_ipv_max_shift_1', 'pv_ipv_min_shift_1', 'cart_ipv_mean_shift_1', 'cart_ipv_max_shift_1', 'cart_ipv_min_shift_1', 'ztc_pv_ipv_mean_shift_1', 'ztc_pv_ipv_max_shift_1', 'ztc_pv_ipv_min_shift_1', 'tbk_pv_ipv_mean_shift_1', 'tbk_pv_ipv_max_shift_1', 'tbk_pv_ipv_min_shift_1', 'ss_pv_ipv_mean_shift_1', 'ss_pv_ipv_max_shift_1', 'ss_pv_ipv_min_shift_1', 'jhs_pv_ipv_mean_shift_1', 'jhs_pv_ipv_max_shift_1', 'jhs_pv_ipv_min_shift_1', 'qty_alipay_jhs_mean_shift_2', 'qty_alipay_jhs_max_shift_2', 'qty_alipay_jhs_min_shift_2', 'qty_alipay_njhs_cumsum_shift_2', 'qty_alipay_njhs_max_shift_2', 'qty_alipay_njhs_min_shift_2', 'qty_alipay_njhs_sum_shift_2', 'qty_alipay_njhs_median_shift_2', 'pv_ipv_mean_shift_2', 'pv_ipv_max_shift_2', 'pv_ipv_min_shift_2', 'cart_ipv_mean_shift_2', 'cart_ipv_max_shift_2', 'cart_ipv_min_shift_2', 'ztc_pv_ipv_mean_shift_2', 'ztc_pv_ipv_max_shift_2', 'ztc_pv_ipv_min_shift_2', 'tbk_pv_ipv_mean_shift_2', 'tbk_pv_ipv_max_shift_2', 'tbk_pv_ipv_min_shift_2', 'ss_pv_ipv_mean_shift_2', 'ss_pv_ipv_max_shift_2', 'ss_pv_ipv_min_shift_2', 'jhs_pv_ipv_mean_shift_2', 'jhs_pv_ipv_max_shift_2', 'jhs_pv_ipv_min_shift_2', 'qty_alipay_jhs_mean_shift_3', 'qty_alipay_jhs_max_shift_3', 'qty_alipay_jhs_min_shift_3', 'qty_alipay_njhs_cumsum_shift_3', 'qty_alipay_njhs_max_shift_3', 'qty_alipay_njhs_min_shift_3', 'qty_alipay_njhs_sum_shift_3', 'qty_alipay_njhs_median_shift_3', 'pv_ipv_mean_shift_3', 'pv_ipv_max_shift_3', 'pv_ipv_min_shift_3', 'cart_ipv_mean_shift_3', 'cart_ipv_max_shift_3', 'cart_ipv_min_shift_3', 'ztc_pv_ipv_mean_shift_3', 'ztc_pv_ipv_max_shift_3', 'ztc_pv_ipv_min_shift_3', 'tbk_pv_ipv_mean_shift_3', 'tbk_pv_ipv_max_shift_3', 'tbk_pv_ipv_min_shift_3', 'ss_pv_ipv_mean_shift_3', 'ss_pv_ipv_max_shift_3', 'ss_pv_ipv_min_shift_3', 'jhs_pv_ipv_mean_shift_3', 'jhs_pv_ipv_max_shift_3', 'jhs_pv_ipv_min_shift_3', 'qty_alipay_jhs_mean_shift_4', 'qty_alipay_jhs_max_shift_4', 'qty_alipay_jhs_min_shift_4', 'qty_alipay_njhs_cumsum_shift_4', 'qty_alipay_njhs_max_shift_4', 'qty_alipay_njhs_min_shift_4', 'qty_alipay_njhs_sum_shift_4', 'qty_alipay_njhs_median_shift_4', 'pv_ipv_mean_shift_4', 'pv_ipv_max_shift_4', 'pv_ipv_min_shift_4', 'cart_ipv_mean_shift_4', 'cart_ipv_max_shift_4', 'cart_ipv_min_shift_4', 'ztc_pv_ipv_mean_shift_4', 'ztc_pv_ipv_max_shift_4', 'ztc_pv_ipv_min_shift_4', 'tbk_pv_ipv_mean_shift_4', 'tbk_pv_ipv_max_shift_4', 'tbk_pv_ipv_min_shift_4', 'ss_pv_ipv_mean_shift_4', 'ss_pv_ipv_max_shift_4', 'ss_pv_ipv_min_shift_4', 'jhs_pv_ipv_mean_shift_4', 'jhs_pv_ipv_max_shift_4', 'jhs_pv_ipv_min_shift_4']\n"
     ]
    }
   ],
   "source": [
    "##选取要做shift的列,选出新的列\n",
    "# mycol = [ u'cart_ipv_mean',u'qty_alipay_jhs_sum',\n",
    "#        u'qty_alipay_jhs_median', u'qty_alipay_njhs_sum',\n",
    "#        u'qty_alipay_njhs_max', u'qty_alipay_njhs_min',u'qty_alipay_njhs_median',\n",
    "#          u'pv_ipv_mean',u'pv_ipv_max', u'pv_ipv_min']\n",
    "mycol = [\"qty_alipay_jhs_mean\",\"qty_alipay_jhs_max\",\"qty_alipay_jhs_min\",\\\n",
    "       \"qty_alipay_njhs_cumsum\",\"qty_alipay_njhs_max\",\"qty_alipay_njhs_min\",\"qty_alipay_njhs_sum\",\"qty_alipay_njhs_median\",\\\n",
    "        \"pv_ipv_mean\",\"pv_ipv_max\",\"pv_ipv_min\",\\\n",
    "        \"cart_ipv_mean\",\"cart_ipv_max\",\"cart_ipv_min\",\\\n",
    "        \"ztc_pv_ipv_mean\",\"ztc_pv_ipv_max\",\"ztc_pv_ipv_min\",\\\n",
    "        \"tbk_pv_ipv_mean\",\"tbk_pv_ipv_max\",\"tbk_pv_ipv_min\",\\\n",
    "        \"ss_pv_ipv_mean\",\"ss_pv_ipv_max\",\"ss_pv_ipv_min\",\\\n",
    "        \"jhs_pv_ipv_mean\",\"jhs_pv_ipv_max\",\"jhs_pv_ipv_min\"]\n",
    "newcol = []\n",
    "for i in range(1,5,1):\n",
    "    name = \"_shift_\"+str(i)\n",
    "    for col in mycol:\n",
    "        newcol.append(col+name)\n",
    "print newcol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##对新列初始化\n",
    "for col in newcol:\n",
    "    item_all_week[col] = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def shift_fun(df,num,select_col):\n",
    "    myshape = df.shape[0]\n",
    "    mynum = min(myshape,num)\n",
    "    for i in range(1,mynum,1):\n",
    "        \n",
    "        for col in select_col:\n",
    "            name = col+\"_shift_\"+str(i)\n",
    "            mylist = [df[col][0]] * i\n",
    "            mylist.extend(df[col][0:-i])\n",
    "            df[name] = mylist\n",
    "        \n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "temp_df = item_all_week.copy()\n",
    "temp_df.set_index([\"item_id\",\"store_code\"],inplace=True)\n",
    "item_all_week_final = temp_df.groupby(level=[\"item_id\",\"store_code\"]).apply(lambda x:shift_fun(x,5,mycol))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_1</th>\n",
       "      <th>qty_alipay_jhs_sum_shift_1</th>\n",
       "      <th>qty_alipay_njhs_sum_shift_1</th>\n",
       "      <th>pv_ipv_mean_shift_1</th>\n",
       "      <th>qty_alipay_njhs_median_shift_1</th>\n",
       "      <th>cart_ipv_mean_shift_1</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_2</th>\n",
       "      <th>qty_alipay_jhs_sum_shift_2</th>\n",
       "      <th>qty_alipay_njhs_sum_shift_2</th>\n",
       "      <th>pv_ipv_mean_shift_2</th>\n",
       "      <th>...</th>\n",
       "      <th>qty_alipay_njhs_sum_shift_3</th>\n",
       "      <th>pv_ipv_mean_shift_3</th>\n",
       "      <th>qty_alipay_njhs_median_shift_3</th>\n",
       "      <th>cart_ipv_mean_shift_3</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_4</th>\n",
       "      <th>qty_alipay_jhs_sum_shift_4</th>\n",
       "      <th>qty_alipay_njhs_sum_shift_4</th>\n",
       "      <th>pv_ipv_mean_shift_4</th>\n",
       "      <th>qty_alipay_njhs_median_shift_4</th>\n",
       "      <th>cart_ipv_mean_shift_4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">33</th>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>0</td>\n",
       "      <td>0.142857</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    qty_alipay_njhs_cumsum_shift_1  \\\n",
       "item_id store_code                                   \n",
       "33      1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "\n",
       "                    qty_alipay_jhs_sum_shift_1  qty_alipay_njhs_sum_shift_1  \\\n",
       "item_id store_code                                                            \n",
       "33      1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "\n",
       "                    pv_ipv_mean_shift_1  qty_alipay_njhs_median_shift_1  \\\n",
       "item_id store_code                                                        \n",
       "33      1                      0.000000                               0   \n",
       "        1                      0.000000                               0   \n",
       "        1                      0.000000                               0   \n",
       "        1                      0.285714                               0   \n",
       "        1                      0.000000                               0   \n",
       "\n",
       "                    cart_ipv_mean_shift_1  qty_alipay_njhs_cumsum_shift_2  \\\n",
       "item_id store_code                                                          \n",
       "33      1                        0.000000                               0   \n",
       "        1                        0.000000                               0   \n",
       "        1                        0.000000                               0   \n",
       "        1                        0.142857                               0   \n",
       "        1                        0.000000                               0   \n",
       "\n",
       "                    qty_alipay_jhs_sum_shift_2  qty_alipay_njhs_sum_shift_2  \\\n",
       "item_id store_code                                                            \n",
       "33      1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "\n",
       "                    pv_ipv_mean_shift_2          ...            \\\n",
       "item_id store_code                               ...             \n",
       "33      1                      0.000000          ...             \n",
       "        1                      0.000000          ...             \n",
       "        1                      0.000000          ...             \n",
       "        1                      0.000000          ...             \n",
       "        1                      0.285714          ...             \n",
       "\n",
       "                    qty_alipay_njhs_sum_shift_3  pv_ipv_mean_shift_3  \\\n",
       "item_id store_code                                                     \n",
       "33      1                                     0                    0   \n",
       "        1                                     0                    0   \n",
       "        1                                     0                    0   \n",
       "        1                                     0                    0   \n",
       "        1                                     0                    0   \n",
       "\n",
       "                    qty_alipay_njhs_median_shift_3  cart_ipv_mean_shift_3  \\\n",
       "item_id store_code                                                          \n",
       "33      1                                        0                      0   \n",
       "        1                                        0                      0   \n",
       "        1                                        0                      0   \n",
       "        1                                        0                      0   \n",
       "        1                                        0                      0   \n",
       "\n",
       "                    qty_alipay_njhs_cumsum_shift_4  \\\n",
       "item_id store_code                                   \n",
       "33      1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "        1                                        0   \n",
       "\n",
       "                    qty_alipay_jhs_sum_shift_4  qty_alipay_njhs_sum_shift_4  \\\n",
       "item_id store_code                                                            \n",
       "33      1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "        1                                    0                            0   \n",
       "\n",
       "                    pv_ipv_mean_shift_4  qty_alipay_njhs_median_shift_4  \\\n",
       "item_id store_code                                                        \n",
       "33      1                             0                               0   \n",
       "        1                             0                               0   \n",
       "        1                             0                               0   \n",
       "        1                             0                               0   \n",
       "        1                             0                               0   \n",
       "\n",
       "                    cart_ipv_mean_shift_4  \n",
       "item_id store_code                         \n",
       "33      1                               0  \n",
       "        1                               0  \n",
       "        1                               0  \n",
       "        1                               0  \n",
       "        1                               0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##查看item_all_week_final的新列值是否改变\n",
    "item_all_week_final[newcol].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_week_final.reset_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "##也可以一开始就设置为0，这里才改。。\n",
    "item_all_week_final.replace(\"all\",0,inplace=True)\n",
    "item_all_week_final[\"store_code\"]=item_all_week_final[\"store_code\"].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_week_final[\"qty_alipay_njhs_endsum_2\"] = item_all_week_final[\"qty_alipay_njhs_sum_shift_1\"]\\\n",
    "    +item_all_week_final[\"qty_alipay_njhs_sum_shift_2\"]\n",
    "item_all_week_final[\"qty_alipay_njhs_endsum_3\"] = item_all_week_final[\"qty_alipay_njhs_sum_shift_1\"]\\\n",
    "    +item_all_week_final[\"qty_alipay_njhs_sum_shift_2\"]+item_all_week_final[\"qty_alipay_njhs_sum_shift_3\"]\n",
    "item_all_week_final[\"qty_alipay_njhs_endsum_4\"] = item_all_week_final[\"qty_alipay_njhs_sum_shift_1\"]\\\n",
    "    +item_all_week_final[\"qty_alipay_njhs_sum_shift_2\"]+item_all_week_final[\"qty_alipay_njhs_sum_shift_3\"]\\\n",
    "    +item_all_week_final[\"qty_alipay_njhs_sum_shift_4\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>startweek</th>\n",
       "      <th>item_id_5_median_mean</th>\n",
       "      <th>month_max</th>\n",
       "      <th>month_min</th>\n",
       "      <th>brand_id_median</th>\n",
       "      <th>special_day_0925_max</th>\n",
       "      <th>pv_ipv_mean</th>\n",
       "      <th>pv_ipv_max</th>\n",
       "      <th>...</th>\n",
       "      <th>qty_alipay_jhs_cumsum_shift_2</th>\n",
       "      <th>qty_alipay_jhs_cumsum_shift_3</th>\n",
       "      <th>qty_alipay_jhs_cumsum_shift_4</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_1</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_2</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_3</th>\n",
       "      <th>qty_alipay_njhs_cumsum_shift_4</th>\n",
       "      <th>qty_alipay_njhs_endsum_2</th>\n",
       "      <th>qty_alipay_njhs_endsum_3</th>\n",
       "      <th>qty_alipay_njhs_endsum_4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>59</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>11</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.285714</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>62</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>63</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>390</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 74 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id  store_code  startweek  item_id_5_median_mean  month_max  \\\n",
       "0       33           1         59                      0         11   \n",
       "1       33           1         60                      0         12   \n",
       "2       33           1         61                      0         12   \n",
       "3       33           1         62                      0         12   \n",
       "4       33           1         63                      0         12   \n",
       "\n",
       "   month_min  brand_id_median  special_day_0925_max  pv_ipv_mean  pv_ipv_max  \\\n",
       "0         11              390                     0     0.000000           0   \n",
       "1         11              390                     0     0.000000           0   \n",
       "2         12              390                     0     0.285714           2   \n",
       "3         12              390                     0     0.000000           0   \n",
       "4         12              390                     0     0.000000           0   \n",
       "\n",
       "             ...             qty_alipay_jhs_cumsum_shift_2  \\\n",
       "0            ...                                         0   \n",
       "1            ...                                         0   \n",
       "2            ...                                         0   \n",
       "3            ...                                         0   \n",
       "4            ...                                         0   \n",
       "\n",
       "   qty_alipay_jhs_cumsum_shift_3  qty_alipay_jhs_cumsum_shift_4  \\\n",
       "0                              0                              0   \n",
       "1                              0                              0   \n",
       "2                              0                              0   \n",
       "3                              0                              0   \n",
       "4                              0                              0   \n",
       "\n",
       "   qty_alipay_njhs_cumsum_shift_1  qty_alipay_njhs_cumsum_shift_2  \\\n",
       "0                               0                               0   \n",
       "1                               0                               0   \n",
       "2                               0                               0   \n",
       "3                               0                               0   \n",
       "4                               0                               0   \n",
       "\n",
       "   qty_alipay_njhs_cumsum_shift_3  qty_alipay_njhs_cumsum_shift_4  \\\n",
       "0                               0                               0   \n",
       "1                               0                               0   \n",
       "2                               0                               0   \n",
       "3                               0                               0   \n",
       "4                               0                               0   \n",
       "\n",
       "   qty_alipay_njhs_endsum_2  qty_alipay_njhs_endsum_3  \\\n",
       "0                         0                         0   \n",
       "1                         0                         0   \n",
       "2                         0                         0   \n",
       "3                         0                         0   \n",
       "4                         0                         0   \n",
       "\n",
       "   qty_alipay_njhs_endsum_4  \n",
       "0                         0  \n",
       "1                         0  \n",
       "2                         0  \n",
       "3                         0  \n",
       "4                         0  \n",
       "\n",
       "[5 rows x 74 columns]"
      ]
     },
     "execution_count": 371,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_week_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####划分训练集合测试集\n",
    "\n",
    "就是是否12月28日之前"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_all_week_train = item_all_week_final[item_all_week_final.startweek<=63]\n",
    "item_all_week_test = item_all_week_final[item_all_week_final.startweek>63]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#5 模型试验\n",
    "\n",
    "这里主要用sklearn来跑岭回归和GBRT"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5.1 准备工作"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn import linear_model,svm\n",
    "from sklearn.ensemble import GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def prep_data(data, input_cols):\n",
    "    X = data[input_cols].as_matrix()\n",
    "    y_value = data['qty_alipay_njhs_sum'].as_matrix()\n",
    "    y_df = data[[\"item_id\",\"store_code\",\"qty_alipay_njhs_sum\"]]\n",
    "    return X, y_value, y_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##成本的计算\n",
    "fun = lambda x:  x[\"a\"] * max(x[\"qty_alipay_njhs_sum_true\"]-x[\"qty_alipay_njhs_sum_predict\"],0)+\\\n",
    "    x[\"b\"]*max(x[\"qty_alipay_njhs_sum_predict\"]-x[\"qty_alipay_njhs_sum_true\"],0)\n",
    "\n",
    "def calculate_cost(df_true,df_predict):\n",
    "    '''\n",
    "    Args:\n",
    "        df_true: A DataFrame of true_counts\n",
    "        df_predict: A DataFrame of predict_counts\n",
    "        config: config.csv\n",
    "    Returns:\n",
    "        all cost and country cost\n",
    "    \n",
    "    '''\n",
    "    df = pd.merge(df_true,df_predict,how=\"outer\",on = [\"item_id\",\"store_code\"],suffixes=(\"_true\",\"_predict\"))\n",
    "    df = pd.merge(df,config,how=\"outer\",on=[\"item_id\",\"store_code\"])\n",
    "    df.fillna(0,inplace = True)\n",
    "    df[\"result\"] = df[[\"a\",\"b\",\"qty_alipay_njhs_sum_predict\",\"qty_alipay_njhs_sum_true\"]].apply(fun,axis =1 )\n",
    "    result_1 = df.result.sum()\n",
    "    result_2 = df[df.store_code==0].result.sum()\n",
    "    return result_1,result_2,df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([u'item_id', u'store_code', u'startweek', u'item_id_5_median_mean',\n",
       "       u'month_max', u'month_min', u'brand_id_median', u'special_day_0925_max',\n",
       "       u'pv_ipv_mean', u'pv_ipv_max', u'pv_ipv_min', u'special_day_0415_max',\n",
       "       u'supplier_id_median', u'special_day_1111_max', u'cate_id_median',\n",
       "       u'special_day_max', u'special_day_0616_max', u'cate_level_id_median',\n",
       "       u'special_day_1212_max', u'item_id_1_median_mean',\n",
       "       u'item_id_4_median_mean', u'special_day_0909_max',\n",
       "       u'item_id_month_median_mean', u'item_id_0_median_mean',\n",
       "       u'item_id_2_median_mean', u'qty_alipay_jhs_sum', u'qty_alipay_jhs_max',\n",
       "       u'qty_alipay_jhs_min', u'qty_alipay_jhs_median', u'qty_alipay_njhs_sum',\n",
       "       u'qty_alipay_njhs_max', u'qty_alipay_njhs_min',\n",
       "       u'qty_alipay_njhs_median', u'item_id_median_mean', u'cart_ipv_mean',\n",
       "       u'cart_ipv_max', u'cart_ipv_min', u'item_id_3_median_mean',\n",
       "       u'qty_alipay_njhs_cumsum', u'qty_alipay_jhs_sum_shift_1',\n",
       "       u'qty_alipay_njhs_sum_shift_1', u'pv_ipv_mean_shift_1',\n",
       "       u'qty_alipay_njhs_median_shift_1', u'cart_ipv_mean_shift_1',\n",
       "       u'qty_alipay_jhs_sum_shift_2', u'qty_alipay_njhs_sum_shift_2',\n",
       "       u'pv_ipv_mean_shift_2', u'qty_alipay_njhs_median_shift_2',\n",
       "       u'cart_ipv_mean_shift_2', u'qty_alipay_jhs_sum_shift_3',\n",
       "       u'qty_alipay_njhs_sum_shift_3', u'pv_ipv_mean_shift_3',\n",
       "       u'qty_alipay_njhs_median_shift_3', u'cart_ipv_mean_shift_3',\n",
       "       u'qty_alipay_jhs_sum_shift_4', u'qty_alipay_njhs_sum_shift_4',\n",
       "       u'pv_ipv_mean_shift_4', u'qty_alipay_njhs_median_shift_4',\n",
       "       u'cart_ipv_mean_shift_4',\n",
       "       u'qty_alipay_jhs_cumsumqty_alipay_jhs_sum_shift_1',\n",
       "       u'qty_alipay_jhs_cumsumqty_alipay_jhs_sum_shift_2',\n",
       "       u'qty_alipay_jhs_cumsumqty_alipay_jhs_sum_shift_3',\n",
       "       u'qty_alipay_jhs_cumsumqty_alipay_jhs_sum_shift_4',\n",
       "       u'qty_alipay_jhs_cumsum_shift_1', u'qty_alipay_jhs_cumsum_shift_2',\n",
       "       u'qty_alipay_jhs_cumsum_shift_3', u'qty_alipay_jhs_cumsum_shift_4',\n",
       "       u'qty_alipay_njhs_cumsum_shift_1', u'qty_alipay_njhs_cumsum_shift_2',\n",
       "       u'qty_alipay_njhs_cumsum_shift_3', u'qty_alipay_njhs_cumsum_shift_4'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "item_all_week_final.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5.2 岭回归"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###5.2.1 岭回归数据预处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200664, 71)\n",
      "(189108, 71)\n",
      "(11556, 71)\n"
     ]
    }
   ],
   "source": [
    "###在validation数据集上测试，故用item_all_week_train\n",
    "data = item_all_week_train.copy()\n",
    "cutoff_day = 61\n",
    "\n",
    "input_cols = [\"item_id_month_median_mean\",\\\n",
    "\"item_id_0_median_mean\",\"item_id_1_median_mean\",\"item_id_2_median_mean\",\"item_id_3_median_mean\",\"item_id_4_median_mean\",\"item_id_5_median_mean\",\\\n",
    "\"special_day_1111_max\",\"special_day_1212_max\",\"special_day_0909_max\",\"special_day_0415_max\",\"special_day_0925_max\",\"special_day_0616_max\",\\\n",
    "\"qty_alipay_njhs_cumsum_shift_1\",\"qty_alipay_njhs_cumsum_shift_2\",\"qty_alipay_njhs_cumsum_shift_3\",\"qty_alipay_njhs_cumsum_shift_4\",\\\n",
    "'qty_alipay_jhs_sum_shift_1', 'qty_alipay_jhs_sum_shift_2','qty_alipay_jhs_sum_shift_3','qty_alipay_jhs_sum_shift_4',\\\n",
    "'cart_ipv_mean_shift_1','cart_ipv_mean_shift_2','cart_ipv_mean_shift_3','cart_ipv_mean_shift_4',\\\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2', 'pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\\\n",
    "'qty_alipay_njhs_median_shift_1', 'qty_alipay_njhs_median_shift_2', 'qty_alipay_njhs_median_shift_3', 'qty_alipay_njhs_median_shift_4', \n",
    "\"qty_alipay_njhs_sum_shift_1\",\"qty_alipay_njhs_sum_shift_2\",\"qty_alipay_njhs_sum_shift_3\",\"qty_alipay_njhs_sum_shift_4\"]\n",
    "\n",
    "\n",
    "\n",
    "train = data[data.startweek <= cutoff_day]\n",
    "test = data[data.startweek > cutoff_day]\n",
    "print data.shape\n",
    "print train.shape\n",
    "print test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Python/2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "test.sort_index(by=[\"startweek\",\"item_id\",\"store_code\"],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "963 (11556, 71)\n",
      "(189108, 37)\n",
      "(11556, 37)\n"
     ]
    }
   ],
   "source": [
    "print len(test.item_id.unique()),test.shape\n",
    "X_train, y_train, y_train_df = prep_data(train, input_cols)\n",
    "X_test, y_test, y_test_df = prep_data(test, input_cols)\n",
    "print X_train.shape\n",
    "print X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37\n"
     ]
    }
   ],
   "source": [
    "print X_test.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Python/2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "test.sort_index(by=[\"startweek\",\"item_id\",\"store_code\"],inplace=True)\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "pred_size = item_size * 6\n",
    "start = 1*pred_size\n",
    "end = 2*pred_size\n",
    "myshape = X_test.shape[1]\n",
    "for i in range(start,end,1):\n",
    "    for j in range(13,myshape,1):\n",
    "        X_test[i][j] = X_test[i-pred_size][j]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###5.2.2 取对数结果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "item_id_month_median_mean 0.723050713764\n",
      "item_id_0_median_mean 0.0120063418283\n",
      "item_id_1_median_mean 0.0880916719616\n",
      "item_id_2_median_mean 0.0821109017511\n",
      "item_id_3_median_mean 0.0663836015257\n",
      "item_id_4_median_mean 0.0589238877923\n",
      "item_id_5_median_mean 0.0465540194611\n",
      "special_day_1111_max 1.07289597809\n",
      "special_day_1212_max 0.404505890038\n",
      "special_day_0909_max 0.0880511745498\n",
      "special_day_0415_max 0.02188313952\n",
      "special_day_0925_max 0.0523900615361\n",
      "special_day_0616_max 0.303576699129\n",
      "qty_alipay_njhs_cumsum_shift_1 0.11036165601\n",
      "qty_alipay_njhs_cumsum_shift_2 -0.0501351059414\n",
      "qty_alipay_njhs_cumsum_shift_3 -0.0128313117678\n",
      "qty_alipay_njhs_cumsum_shift_4 -0.0172094379126\n",
      "qty_alipay_jhs_sum_shift_1 -0.0327419012386\n",
      "qty_alipay_jhs_sum_shift_2 0.0238962117261\n",
      "qty_alipay_jhs_sum_shift_3 -0.01082124945\n",
      "qty_alipay_jhs_sum_shift_4 0.00974456881323\n",
      "cart_ipv_mean_shift_1 0.221266492674\n",
      "cart_ipv_mean_shift_2 -0.144441563371\n",
      "cart_ipv_mean_shift_3 -0.0808863513539\n",
      "cart_ipv_mean_shift_4 0.0359304170852\n",
      "pv_ipv_mean_shift_1 0.0718396229942\n",
      "pv_ipv_mean_shift_2 0.0137860712043\n",
      "pv_ipv_mean_shift_3 -0.00432615425811\n",
      "pv_ipv_mean_shift_4 -0.0212717265416\n",
      "qty_alipay_njhs_median_shift_1 0.0513635248877\n",
      "qty_alipay_njhs_median_shift_2 -0.145461846196\n",
      "qty_alipay_njhs_median_shift_3 -0.106457265925\n",
      "qty_alipay_njhs_median_shift_4 -0.0886027998785\n",
      "qty_alipay_njhs_sum_shift_1 0.163772582351\n",
      "qty_alipay_njhs_sum_shift_2 0.178307747328\n",
      "qty_alipay_njhs_sum_shift_3 0.108386148893\n",
      "qty_alipay_njhs_sum_shift_4 0.130948728727\n",
      "-0.0170229297887\n"
     ]
    }
   ],
   "source": [
    "clf = linear_model.Ridge(alpha = 1)\n",
    "clf_r = clf.fit(np.log(X_train+1), np.log(y_train+1))\n",
    "for i in range(len(input_cols)):\n",
    "    print input_cols[i],clf.coef_[i]\n",
    "print clf.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "1657087.69567 1166834.58048\n"
     ]
    }
   ],
   "source": [
    "y_pred = np.exp(clf_r.predict(np.log(X_test+1)))-1\n",
    "y_pred_df = y_test_df.copy()\n",
    "y_pred_df.qty_alipay_njhs_sum = y_pred\n",
    "y_pred_df_new = y_pred_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_pred_df_new = y_pred_df_new.reset_index()\n",
    "y_test_df_new = y_test_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_test_df_new = y_test_df_new.reset_index()\n",
    "print y_pred_df_new.dtypes\n",
    "print y_test_df_new.dtypes\n",
    "result_1,result_2,df= calculate_cost(y_test_df_new,y_pred_df_new)\n",
    "print result_1,result_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum_true</th>\n",
       "      <th>qty_alipay_njhs_sum_predict</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>2980</td>\n",
       "      <td>0</td>\n",
       "      <td>126</td>\n",
       "      <td>250.846584</td>\n",
       "      <td>33.07</td>\n",
       "      <td>84.72</td>\n",
       "      <td>10577.002562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>3424</td>\n",
       "      <td>0</td>\n",
       "      <td>718</td>\n",
       "      <td>1008.281342</td>\n",
       "      <td>21.09</td>\n",
       "      <td>35.75</td>\n",
       "      <td>10377.557973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>11991</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>445.541282</td>\n",
       "      <td>38.82</td>\n",
       "      <td>81.69</td>\n",
       "      <td>22345.587337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>12885</td>\n",
       "      <td>0</td>\n",
       "      <td>1893</td>\n",
       "      <td>2993.336242</td>\n",
       "      <td>41.27</td>\n",
       "      <td>10.94</td>\n",
       "      <td>12037.678489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1074</th>\n",
       "      <td>24335</td>\n",
       "      <td>0</td>\n",
       "      <td>1338</td>\n",
       "      <td>2516.476467</td>\n",
       "      <td>43.23</td>\n",
       "      <td>11.93</td>\n",
       "      <td>14059.224253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1902</th>\n",
       "      <td>39806</td>\n",
       "      <td>0</td>\n",
       "      <td>1240</td>\n",
       "      <td>2699.154918</td>\n",
       "      <td>39.66</td>\n",
       "      <td>74.22</td>\n",
       "      <td>108298.478050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1907</th>\n",
       "      <td>39806</td>\n",
       "      <td>5</td>\n",
       "      <td>485</td>\n",
       "      <td>1069.032199</td>\n",
       "      <td>19.84</td>\n",
       "      <td>37.12</td>\n",
       "      <td>21679.275236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1908</th>\n",
       "      <td>40127</td>\n",
       "      <td>0</td>\n",
       "      <td>342</td>\n",
       "      <td>575.136144</td>\n",
       "      <td>36.14</td>\n",
       "      <td>80.06</td>\n",
       "      <td>18664.879666</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2160</th>\n",
       "      <td>43889</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>748.048156</td>\n",
       "      <td>36.47</td>\n",
       "      <td>82.77</td>\n",
       "      <td>47265.655863</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>49841</td>\n",
       "      <td>0</td>\n",
       "      <td>723</td>\n",
       "      <td>1077.726872</td>\n",
       "      <td>42.49</td>\n",
       "      <td>90.52</td>\n",
       "      <td>32109.876454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2808</th>\n",
       "      <td>55916</td>\n",
       "      <td>0</td>\n",
       "      <td>985</td>\n",
       "      <td>1436.692546</td>\n",
       "      <td>41.53</td>\n",
       "      <td>80.38</td>\n",
       "      <td>36307.046855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3114</th>\n",
       "      <td>60437</td>\n",
       "      <td>0</td>\n",
       "      <td>262</td>\n",
       "      <td>442.617708</td>\n",
       "      <td>36.02</td>\n",
       "      <td>80.37</td>\n",
       "      <td>14516.245200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3534</th>\n",
       "      <td>69045</td>\n",
       "      <td>0</td>\n",
       "      <td>324</td>\n",
       "      <td>465.658126</td>\n",
       "      <td>37.63</td>\n",
       "      <td>74.88</td>\n",
       "      <td>10607.360470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4110</th>\n",
       "      <td>78932</td>\n",
       "      <td>0</td>\n",
       "      <td>9716</td>\n",
       "      <td>12620.677679</td>\n",
       "      <td>41.76</td>\n",
       "      <td>10.62</td>\n",
       "      <td>30847.676955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4506</th>\n",
       "      <td>88845</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>372.294448</td>\n",
       "      <td>44.87</td>\n",
       "      <td>83.39</td>\n",
       "      <td>12449.663992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4818</th>\n",
       "      <td>95573</td>\n",
       "      <td>0</td>\n",
       "      <td>438</td>\n",
       "      <td>51.623483</td>\n",
       "      <td>42.66</td>\n",
       "      <td>10.18</td>\n",
       "      <td>16482.822224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4962</th>\n",
       "      <td>100482</td>\n",
       "      <td>0</td>\n",
       "      <td>349</td>\n",
       "      <td>1303.391703</td>\n",
       "      <td>44.59</td>\n",
       "      <td>15.40</td>\n",
       "      <td>14697.632225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>102261</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>467.628096</td>\n",
       "      <td>42.10</td>\n",
       "      <td>72.87</td>\n",
       "      <td>18627.619374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5058</th>\n",
       "      <td>103761</td>\n",
       "      <td>0</td>\n",
       "      <td>1056</td>\n",
       "      <td>644.038471</td>\n",
       "      <td>43.72</td>\n",
       "      <td>11.68</td>\n",
       "      <td>18010.958070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5130</th>\n",
       "      <td>110763</td>\n",
       "      <td>0</td>\n",
       "      <td>210</td>\n",
       "      <td>363.639728</td>\n",
       "      <td>37.26</td>\n",
       "      <td>78.36</td>\n",
       "      <td>12039.209087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5166</th>\n",
       "      <td>114243</td>\n",
       "      <td>0</td>\n",
       "      <td>727</td>\n",
       "      <td>1738.176119</td>\n",
       "      <td>47.49</td>\n",
       "      <td>10.44</td>\n",
       "      <td>10556.678681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5268</th>\n",
       "      <td>124614</td>\n",
       "      <td>0</td>\n",
       "      <td>580</td>\n",
       "      <td>301.717388</td>\n",
       "      <td>42.22</td>\n",
       "      <td>16.54</td>\n",
       "      <td>11749.091880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5394</th>\n",
       "      <td>137191</td>\n",
       "      <td>0</td>\n",
       "      <td>697</td>\n",
       "      <td>837.554921</td>\n",
       "      <td>42.29</td>\n",
       "      <td>83.59</td>\n",
       "      <td>11748.985847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5484</th>\n",
       "      <td>145309</td>\n",
       "      <td>0</td>\n",
       "      <td>101</td>\n",
       "      <td>259.723945</td>\n",
       "      <td>31.10</td>\n",
       "      <td>88.32</td>\n",
       "      <td>14018.498802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5556</th>\n",
       "      <td>149294</td>\n",
       "      <td>0</td>\n",
       "      <td>631</td>\n",
       "      <td>277.920332</td>\n",
       "      <td>43.53</td>\n",
       "      <td>11.25</td>\n",
       "      <td>15369.557930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5694</th>\n",
       "      <td>158638</td>\n",
       "      <td>0</td>\n",
       "      <td>592</td>\n",
       "      <td>1007.649366</td>\n",
       "      <td>40.93</td>\n",
       "      <td>80.79</td>\n",
       "      <td>33580.312310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5724</th>\n",
       "      <td>163228</td>\n",
       "      <td>0</td>\n",
       "      <td>490</td>\n",
       "      <td>204.900370</td>\n",
       "      <td>47.67</td>\n",
       "      <td>95.51</td>\n",
       "      <td>13590.699341</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      item_id  store_code  qty_alipay_njhs_sum_true  \\\n",
       "168      2980           0                       126   \n",
       "222      3424           0                       718   \n",
       "690     11991           0                       172   \n",
       "726     12885           0                      1893   \n",
       "1074    24335           0                      1338   \n",
       "1902    39806           0                      1240   \n",
       "1907    39806           5                       485   \n",
       "1908    40127           0                       342   \n",
       "2160    43889           0                       177   \n",
       "2520    49841           0                       723   \n",
       "2808    55916           0                       985   \n",
       "3114    60437           0                       262   \n",
       "3534    69045           0                       324   \n",
       "4110    78932           0                      9716   \n",
       "4506    88845           0                       223   \n",
       "4818    95573           0                       438   \n",
       "4962   100482           0                       349   \n",
       "4980   102261           0                       212   \n",
       "5058   103761           0                      1056   \n",
       "5130   110763           0                       210   \n",
       "5166   114243           0                       727   \n",
       "5268   124614           0                       580   \n",
       "5394   137191           0                       697   \n",
       "5484   145309           0                       101   \n",
       "5556   149294           0                       631   \n",
       "5694   158638           0                       592   \n",
       "5724   163228           0                       490   \n",
       "\n",
       "      qty_alipay_njhs_sum_predict      a      b         result  \n",
       "168                    250.846584  33.07  84.72   10577.002562  \n",
       "222                   1008.281342  21.09  35.75   10377.557973  \n",
       "690                    445.541282  38.82  81.69   22345.587337  \n",
       "726                   2993.336242  41.27  10.94   12037.678489  \n",
       "1074                  2516.476467  43.23  11.93   14059.224253  \n",
       "1902                  2699.154918  39.66  74.22  108298.478050  \n",
       "1907                  1069.032199  19.84  37.12   21679.275236  \n",
       "1908                   575.136144  36.14  80.06   18664.879666  \n",
       "2160                   748.048156  36.47  82.77   47265.655863  \n",
       "2520                  1077.726872  42.49  90.52   32109.876454  \n",
       "2808                  1436.692546  41.53  80.38   36307.046855  \n",
       "3114                   442.617708  36.02  80.37   14516.245200  \n",
       "3534                   465.658126  37.63  74.88   10607.360470  \n",
       "4110                 12620.677679  41.76  10.62   30847.676955  \n",
       "4506                   372.294448  44.87  83.39   12449.663992  \n",
       "4818                    51.623483  42.66  10.18   16482.822224  \n",
       "4962                  1303.391703  44.59  15.40   14697.632225  \n",
       "4980                   467.628096  42.10  72.87   18627.619374  \n",
       "5058                   644.038471  43.72  11.68   18010.958070  \n",
       "5130                   363.639728  37.26  78.36   12039.209087  \n",
       "5166                  1738.176119  47.49  10.44   10556.678681  \n",
       "5268                   301.717388  42.22  16.54   11749.091880  \n",
       "5394                   837.554921  42.29  83.59   11748.985847  \n",
       "5484                   259.723945  31.10  88.32   14018.498802  \n",
       "5556                   277.920332  43.53  11.25   15369.557930  \n",
       "5694                  1007.649366  40.93  80.79   33580.312310  \n",
       "5724                   204.900370  47.67  95.51   13590.699341  "
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###结果分析\n",
    "df[df.result>10000]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "def predict_by_predict(X_test,model):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = np.exp(model.predict(np.log(X_one_week+1)))-1\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    \n",
    "    ##第二周\n",
    "    week = 1\n",
    "    start = week*pred_size\n",
    "    end = (week+1)*pred_size\n",
    "    for i in range(start,end,1):\n",
    "        X[i][17] = X[i-week*pred_size][17]+y_predict[i-week*pred_size]\n",
    "        X[i][14] = X[i-week*pred_size][14]+y_predict[i-week*pred_size]\n",
    "        X[i][15] = X[i-week*pred_size][15]+y_predict[i-week*pred_size]\n",
    "        X[i][16] = X[i-week*pred_size][16]+y_predict[i-week*pred_size]   \n",
    "        X[i][-1] = X[i][-2]\n",
    "        X[i][-2] = X[i][-3]\n",
    "        X[i][-3] = X[i][-4]\n",
    "        X[i][-4] = y_predict[i-week*pred_size]\n",
    "    X_one_week = X[week * pred_size : (week+1)*pred_size]\n",
    "    y_pred_one_week = np.exp(model.predict(np.log(X_one_week+1)))-1\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "1792297.03203 1270303.17953\n"
     ]
    }
   ],
   "source": [
    "y_pred = predict_by_predict(X_test,clf_r)\n",
    "y_pred_df = y_test_df.copy()\n",
    "y_pred_df.qty_alipay_njhs_sum = y_pred\n",
    "y_pred_df_new = y_pred_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_pred_df_new = y_pred_df_new.reset_index()\n",
    "y_test_df_new = y_test_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_test_df_new = y_test_df_new.reset_index()\n",
    "print y_pred_df_new.dtypes\n",
    "print y_test_df_new.dtypes\n",
    "result_1,result_2,df= calculate_cost(y_test_df_new,y_pred_df_new)\n",
    "print result_1,result_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum_true</th>\n",
       "      <th>qty_alipay_njhs_sum_predict</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>2980</td>\n",
       "      <td>0</td>\n",
       "      <td>126</td>\n",
       "      <td>269.411314</td>\n",
       "      <td>33.07</td>\n",
       "      <td>84.72</td>\n",
       "      <td>12149.806528</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>3424</td>\n",
       "      <td>0</td>\n",
       "      <td>718</td>\n",
       "      <td>1028.625003</td>\n",
       "      <td>21.09</td>\n",
       "      <td>35.75</td>\n",
       "      <td>11104.843873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>7011</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>215.872290</td>\n",
       "      <td>34.03</td>\n",
       "      <td>84.36</td>\n",
       "      <td>10281.146374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>11991</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>481.358531</td>\n",
       "      <td>38.82</td>\n",
       "      <td>81.69</td>\n",
       "      <td>25271.498360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>12885</td>\n",
       "      <td>0</td>\n",
       "      <td>1893</td>\n",
       "      <td>3315.754973</td>\n",
       "      <td>41.27</td>\n",
       "      <td>10.94</td>\n",
       "      <td>15564.939403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1074</th>\n",
       "      <td>24335</td>\n",
       "      <td>0</td>\n",
       "      <td>1338</td>\n",
       "      <td>2637.256567</td>\n",
       "      <td>43.23</td>\n",
       "      <td>11.93</td>\n",
       "      <td>15500.130847</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1902</th>\n",
       "      <td>39806</td>\n",
       "      <td>0</td>\n",
       "      <td>1240</td>\n",
       "      <td>2825.301214</td>\n",
       "      <td>39.66</td>\n",
       "      <td>74.22</td>\n",
       "      <td>117661.056138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1907</th>\n",
       "      <td>39806</td>\n",
       "      <td>5</td>\n",
       "      <td>485</td>\n",
       "      <td>1130.283694</td>\n",
       "      <td>19.84</td>\n",
       "      <td>37.12</td>\n",
       "      <td>23952.930708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1908</th>\n",
       "      <td>40127</td>\n",
       "      <td>0</td>\n",
       "      <td>342</td>\n",
       "      <td>584.870723</td>\n",
       "      <td>36.14</td>\n",
       "      <td>80.06</td>\n",
       "      <td>19444.230051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2160</th>\n",
       "      <td>43889</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>801.180258</td>\n",
       "      <td>36.47</td>\n",
       "      <td>82.77</td>\n",
       "      <td>51663.399939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2163</th>\n",
       "      <td>43889</td>\n",
       "      <td>3</td>\n",
       "      <td>106</td>\n",
       "      <td>401.745660</td>\n",
       "      <td>16.20</td>\n",
       "      <td>36.80</td>\n",
       "      <td>10883.440286</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>49841</td>\n",
       "      <td>0</td>\n",
       "      <td>723</td>\n",
       "      <td>1079.186698</td>\n",
       "      <td>42.49</td>\n",
       "      <td>90.52</td>\n",
       "      <td>32242.019929</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2808</th>\n",
       "      <td>55916</td>\n",
       "      <td>0</td>\n",
       "      <td>985</td>\n",
       "      <td>1529.884834</td>\n",
       "      <td>41.53</td>\n",
       "      <td>80.38</td>\n",
       "      <td>43797.842986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3114</th>\n",
       "      <td>60437</td>\n",
       "      <td>0</td>\n",
       "      <td>262</td>\n",
       "      <td>432.833042</td>\n",
       "      <td>36.02</td>\n",
       "      <td>80.37</td>\n",
       "      <td>13729.851606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3534</th>\n",
       "      <td>69045</td>\n",
       "      <td>0</td>\n",
       "      <td>324</td>\n",
       "      <td>463.550998</td>\n",
       "      <td>37.63</td>\n",
       "      <td>74.88</td>\n",
       "      <td>10449.578719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4110</th>\n",
       "      <td>78932</td>\n",
       "      <td>0</td>\n",
       "      <td>9716</td>\n",
       "      <td>13702.565614</td>\n",
       "      <td>41.76</td>\n",
       "      <td>10.62</td>\n",
       "      <td>42337.326820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4362</th>\n",
       "      <td>85023</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>174.382427</td>\n",
       "      <td>35.89</td>\n",
       "      <td>92.98</td>\n",
       "      <td>10821.238038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4506</th>\n",
       "      <td>88845</td>\n",
       "      <td>0</td>\n",
       "      <td>223</td>\n",
       "      <td>365.824522</td>\n",
       "      <td>44.87</td>\n",
       "      <td>83.39</td>\n",
       "      <td>11910.136911</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4818</th>\n",
       "      <td>95573</td>\n",
       "      <td>0</td>\n",
       "      <td>438</td>\n",
       "      <td>70.868127</td>\n",
       "      <td>42.66</td>\n",
       "      <td>10.18</td>\n",
       "      <td>15661.845685</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4962</th>\n",
       "      <td>100482</td>\n",
       "      <td>0</td>\n",
       "      <td>349</td>\n",
       "      <td>1432.215666</td>\n",
       "      <td>44.59</td>\n",
       "      <td>15.40</td>\n",
       "      <td>16681.521261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>102261</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>404.975171</td>\n",
       "      <td>42.10</td>\n",
       "      <td>72.87</td>\n",
       "      <td>14062.100726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5058</th>\n",
       "      <td>103761</td>\n",
       "      <td>0</td>\n",
       "      <td>1056</td>\n",
       "      <td>612.314043</td>\n",
       "      <td>43.72</td>\n",
       "      <td>11.68</td>\n",
       "      <td>19397.950030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5130</th>\n",
       "      <td>110763</td>\n",
       "      <td>0</td>\n",
       "      <td>210</td>\n",
       "      <td>419.413491</td>\n",
       "      <td>37.26</td>\n",
       "      <td>78.36</td>\n",
       "      <td>16409.641135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5136</th>\n",
       "      <td>111417</td>\n",
       "      <td>0</td>\n",
       "      <td>722</td>\n",
       "      <td>73.868024</td>\n",
       "      <td>15.68</td>\n",
       "      <td>9.24</td>\n",
       "      <td>10162.709385</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5166</th>\n",
       "      <td>114243</td>\n",
       "      <td>0</td>\n",
       "      <td>727</td>\n",
       "      <td>1746.602833</td>\n",
       "      <td>47.49</td>\n",
       "      <td>10.44</td>\n",
       "      <td>10644.653580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5394</th>\n",
       "      <td>137191</td>\n",
       "      <td>0</td>\n",
       "      <td>697</td>\n",
       "      <td>858.344309</td>\n",
       "      <td>42.29</td>\n",
       "      <td>83.59</td>\n",
       "      <td>13486.770761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5484</th>\n",
       "      <td>145309</td>\n",
       "      <td>0</td>\n",
       "      <td>101</td>\n",
       "      <td>280.321359</td>\n",
       "      <td>31.10</td>\n",
       "      <td>88.32</td>\n",
       "      <td>15837.662433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5556</th>\n",
       "      <td>149294</td>\n",
       "      <td>0</td>\n",
       "      <td>631</td>\n",
       "      <td>258.419669</td>\n",
       "      <td>43.53</td>\n",
       "      <td>11.25</td>\n",
       "      <td>16218.421800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5694</th>\n",
       "      <td>158638</td>\n",
       "      <td>0</td>\n",
       "      <td>592</td>\n",
       "      <td>1263.985639</td>\n",
       "      <td>40.93</td>\n",
       "      <td>80.79</td>\n",
       "      <td>54289.719773</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5724</th>\n",
       "      <td>163228</td>\n",
       "      <td>0</td>\n",
       "      <td>490</td>\n",
       "      <td>192.928775</td>\n",
       "      <td>47.67</td>\n",
       "      <td>95.51</td>\n",
       "      <td>14161.385309</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      item_id  store_code  qty_alipay_njhs_sum_true  \\\n",
       "168      2980           0                       126   \n",
       "222      3424           0                       718   \n",
       "372      7011           0                        94   \n",
       "690     11991           0                       172   \n",
       "726     12885           0                      1893   \n",
       "1074    24335           0                      1338   \n",
       "1902    39806           0                      1240   \n",
       "1907    39806           5                       485   \n",
       "1908    40127           0                       342   \n",
       "2160    43889           0                       177   \n",
       "2163    43889           3                       106   \n",
       "2520    49841           0                       723   \n",
       "2808    55916           0                       985   \n",
       "3114    60437           0                       262   \n",
       "3534    69045           0                       324   \n",
       "4110    78932           0                      9716   \n",
       "4362    85023           0                        58   \n",
       "4506    88845           0                       223   \n",
       "4818    95573           0                       438   \n",
       "4962   100482           0                       349   \n",
       "4980   102261           0                       212   \n",
       "5058   103761           0                      1056   \n",
       "5130   110763           0                       210   \n",
       "5136   111417           0                       722   \n",
       "5166   114243           0                       727   \n",
       "5394   137191           0                       697   \n",
       "5484   145309           0                       101   \n",
       "5556   149294           0                       631   \n",
       "5694   158638           0                       592   \n",
       "5724   163228           0                       490   \n",
       "\n",
       "      qty_alipay_njhs_sum_predict      a      b         result  \n",
       "168                    269.411314  33.07  84.72   12149.806528  \n",
       "222                   1028.625003  21.09  35.75   11104.843873  \n",
       "372                    215.872290  34.03  84.36   10281.146374  \n",
       "690                    481.358531  38.82  81.69   25271.498360  \n",
       "726                   3315.754973  41.27  10.94   15564.939403  \n",
       "1074                  2637.256567  43.23  11.93   15500.130847  \n",
       "1902                  2825.301214  39.66  74.22  117661.056138  \n",
       "1907                  1130.283694  19.84  37.12   23952.930708  \n",
       "1908                   584.870723  36.14  80.06   19444.230051  \n",
       "2160                   801.180258  36.47  82.77   51663.399939  \n",
       "2163                   401.745660  16.20  36.80   10883.440286  \n",
       "2520                  1079.186698  42.49  90.52   32242.019929  \n",
       "2808                  1529.884834  41.53  80.38   43797.842986  \n",
       "3114                   432.833042  36.02  80.37   13729.851606  \n",
       "3534                   463.550998  37.63  74.88   10449.578719  \n",
       "4110                 13702.565614  41.76  10.62   42337.326820  \n",
       "4362                   174.382427  35.89  92.98   10821.238038  \n",
       "4506                   365.824522  44.87  83.39   11910.136911  \n",
       "4818                    70.868127  42.66  10.18   15661.845685  \n",
       "4962                  1432.215666  44.59  15.40   16681.521261  \n",
       "4980                   404.975171  42.10  72.87   14062.100726  \n",
       "5058                   612.314043  43.72  11.68   19397.950030  \n",
       "5130                   419.413491  37.26  78.36   16409.641135  \n",
       "5136                    73.868024  15.68   9.24   10162.709385  \n",
       "5166                  1746.602833  47.49  10.44   10644.653580  \n",
       "5394                   858.344309  42.29  83.59   13486.770761  \n",
       "5484                   280.321359  31.10  88.32   15837.662433  \n",
       "5556                   258.419669  43.53  11.25   16218.421800  \n",
       "5694                  1263.985639  40.93  80.79   54289.719773  \n",
       "5724                   192.928775  47.67  95.51   14161.385309  "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.result>10000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5.3 GBRT\n",
    "\n",
    "还没跑"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "clf = GradientBoostingRegressor(n_estimators =100,learning_rate=0.1,max_depth=10)\n",
    "clf_r = clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    item_id  store_code  qty_alipay_njhs_sum\n",
      "0        33           0             3.914236\n",
      "1        33           1             0.359645\n",
      "2        33           2             1.251388\n",
      "3        33           3             0.305870\n",
      "4        33           4             1.814372\n",
      "5        33           5             1.268260\n",
      "6       132           0             2.764224\n",
      "7       132           1             0.372029\n",
      "8       132           2             0.710021\n",
      "9       132           3             1.633841\n",
      "10      132           4             0.305870\n",
      "11      132           5             0.318254\n",
      "12      330           0             1.107773\n",
      "13      330           1             0.305870\n",
      "14      330           2             0.305870\n",
      "15      330           3             0.305870\n",
      "16      330           4             0.305870\n",
      "17      330           5             1.107773\n",
      "18      549           0            25.292894\n",
      "19      549           1             5.107274\n",
      "    item_id  store_code  qty_alipay_njhs_sum\n",
      "0        33           0                    6\n",
      "1        33           1                    0\n",
      "2        33           2                    1\n",
      "3        33           3                    0\n",
      "4        33           4                    4\n",
      "5        33           5                    1\n",
      "6       132           0                    2\n",
      "7       132           1                    0\n",
      "8       132           2                    1\n",
      "9       132           3                    1\n",
      "10      132           4                    0\n",
      "11      132           5                    0\n",
      "12      330           0                    1\n",
      "13      330           1                    0\n",
      "14      330           2                    0\n",
      "15      330           3                    0\n",
      "16      330           4                    0\n",
      "17      330           5                    1\n",
      "18      549           0                    9\n",
      "19      549           1                    3\n",
      "1554812.00568 1055913.76465\n"
     ]
    }
   ],
   "source": [
    "y_pred = clf_r.predict(X_test)\n",
    "y_pred_df = y_test_df.copy()\n",
    "y_pred_df.qty_alipay_njhs_sum = y_pred\n",
    "y_pred_df_new = y_pred_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_pred_df_new = y_pred_df_new.reset_index()\n",
    "y_test_df_new = y_test_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_test_df_new = y_test_df_new.reset_index()\n",
    "print y_pred_df_new.head(20)\n",
    "print y_test_df_new.head(20)\n",
    "result_1,result_2,df= calculate_cost(y_test_df_new,y_pred_df_new)\n",
    "print result_1,result_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "def predict_by_predict(X_test,model):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    \n",
    "    ##第二周\n",
    "    week = 1\n",
    "    start = week*pred_size\n",
    "    end = (week+1)*pred_size\n",
    "    for i in range(start,end,1):\n",
    "        X[i][13] = X[i-week*pred_size][13]+y_predict[i-week*pred_size]\n",
    "        X[i][14] = X[i-week*pred_size][14]+y_predict[i-week*pred_size]\n",
    "        X[i][15] = X[i-week*pred_size][15]+y_predict[i-week*pred_size]\n",
    "        X[i][16] = X[i-week*pred_size][16]+y_predict[i-week*pred_size]   \n",
    "        X[i][-1] = X[i][-2]\n",
    "        X[i][-2] = X[i][-3]\n",
    "        X[i][-3] = X[i][-4]\n",
    "        X[i][-4] = y_predict[i-week*pred_size]\n",
    "    X_one_week = X[week * pred_size : (week+1)*pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "item_id                float64\n",
      "store_code               int64\n",
      "qty_alipay_njhs_sum    float64\n",
      "dtype: object\n",
      "1561403.53665 1062622.67196\n"
     ]
    }
   ],
   "source": [
    "y_pred = predict_by_predict(X_test,clf_r)\n",
    "y_pred_df = y_test_df.copy()\n",
    "y_pred_df.qty_alipay_njhs_sum = y_pred\n",
    "y_pred_df_new = y_pred_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_pred_df_new = y_pred_df_new.reset_index()\n",
    "y_test_df_new = y_test_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()\n",
    "y_test_df_new = y_test_df_new.reset_index()\n",
    "print y_pred_df_new.dtypes\n",
    "print y_test_df_new.dtypes\n",
    "result_1,result_2,df= calculate_cost(y_test_df_new,y_pred_df_new)\n",
    "print result_1,result_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum_true</th>\n",
       "      <th>qty_alipay_njhs_sum_predict</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>11991</td>\n",
       "      <td>0</td>\n",
       "      <td>172</td>\n",
       "      <td>360.289630</td>\n",
       "      <td>38.82</td>\n",
       "      <td>81.69</td>\n",
       "      <td>15381.379895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>12885</td>\n",
       "      <td>0</td>\n",
       "      <td>1893</td>\n",
       "      <td>2848.398826</td>\n",
       "      <td>41.27</td>\n",
       "      <td>10.94</td>\n",
       "      <td>10452.063162</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1902</th>\n",
       "      <td>39806</td>\n",
       "      <td>0</td>\n",
       "      <td>1240</td>\n",
       "      <td>1637.832399</td>\n",
       "      <td>39.66</td>\n",
       "      <td>74.22</td>\n",
       "      <td>29527.120675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2160</th>\n",
       "      <td>43889</td>\n",
       "      <td>0</td>\n",
       "      <td>177</td>\n",
       "      <td>425.967957</td>\n",
       "      <td>36.47</td>\n",
       "      <td>82.77</td>\n",
       "      <td>20607.077766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2520</th>\n",
       "      <td>49841</td>\n",
       "      <td>0</td>\n",
       "      <td>723</td>\n",
       "      <td>884.650701</td>\n",
       "      <td>42.49</td>\n",
       "      <td>90.52</td>\n",
       "      <td>14632.621411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3114</th>\n",
       "      <td>60437</td>\n",
       "      <td>0</td>\n",
       "      <td>262</td>\n",
       "      <td>392.628772</td>\n",
       "      <td>36.02</td>\n",
       "      <td>80.37</td>\n",
       "      <td>10498.634427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3624</th>\n",
       "      <td>71580</td>\n",
       "      <td>0</td>\n",
       "      <td>491</td>\n",
       "      <td>246.584183</td>\n",
       "      <td>45.39</td>\n",
       "      <td>17.66</td>\n",
       "      <td>11094.033931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3936</th>\n",
       "      <td>76166</td>\n",
       "      <td>0</td>\n",
       "      <td>2899</td>\n",
       "      <td>2425.437195</td>\n",
       "      <td>40.14</td>\n",
       "      <td>11.66</td>\n",
       "      <td>19008.810989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4110</th>\n",
       "      <td>78932</td>\n",
       "      <td>0</td>\n",
       "      <td>9716</td>\n",
       "      <td>8143.086879</td>\n",
       "      <td>41.76</td>\n",
       "      <td>10.62</td>\n",
       "      <td>65684.851938</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4818</th>\n",
       "      <td>95573</td>\n",
       "      <td>0</td>\n",
       "      <td>438</td>\n",
       "      <td>112.102077</td>\n",
       "      <td>42.66</td>\n",
       "      <td>10.18</td>\n",
       "      <td>13902.805391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4980</th>\n",
       "      <td>102261</td>\n",
       "      <td>0</td>\n",
       "      <td>212</td>\n",
       "      <td>781.958442</td>\n",
       "      <td>42.10</td>\n",
       "      <td>72.87</td>\n",
       "      <td>41532.871648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4985</th>\n",
       "      <td>102261</td>\n",
       "      <td>5</td>\n",
       "      <td>61</td>\n",
       "      <td>336.156758</td>\n",
       "      <td>21.04</td>\n",
       "      <td>36.44</td>\n",
       "      <td>10026.712267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5238</th>\n",
       "      <td>121895</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>205.427942</td>\n",
       "      <td>30.05</td>\n",
       "      <td>80.48</td>\n",
       "      <td>11382.120810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5268</th>\n",
       "      <td>124614</td>\n",
       "      <td>0</td>\n",
       "      <td>580</td>\n",
       "      <td>239.483864</td>\n",
       "      <td>42.22</td>\n",
       "      <td>16.54</td>\n",
       "      <td>14376.591270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5556</th>\n",
       "      <td>149294</td>\n",
       "      <td>0</td>\n",
       "      <td>631</td>\n",
       "      <td>339.276238</td>\n",
       "      <td>43.53</td>\n",
       "      <td>11.25</td>\n",
       "      <td>12698.735367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5694</th>\n",
       "      <td>158638</td>\n",
       "      <td>0</td>\n",
       "      <td>592</td>\n",
       "      <td>1339.704095</td>\n",
       "      <td>40.93</td>\n",
       "      <td>80.79</td>\n",
       "      <td>60407.013802</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      item_id  store_code  qty_alipay_njhs_sum_true  \\\n",
       "690     11991           0                       172   \n",
       "726     12885           0                      1893   \n",
       "1902    39806           0                      1240   \n",
       "2160    43889           0                       177   \n",
       "2520    49841           0                       723   \n",
       "3114    60437           0                       262   \n",
       "3624    71580           0                       491   \n",
       "3936    76166           0                      2899   \n",
       "4110    78932           0                      9716   \n",
       "4818    95573           0                       438   \n",
       "4980   102261           0                       212   \n",
       "4985   102261           5                        61   \n",
       "5238   121895           0                        64   \n",
       "5268   124614           0                       580   \n",
       "5556   149294           0                       631   \n",
       "5694   158638           0                       592   \n",
       "\n",
       "      qty_alipay_njhs_sum_predict      a      b        result  \n",
       "690                    360.289630  38.82  81.69  15381.379895  \n",
       "726                   2848.398826  41.27  10.94  10452.063162  \n",
       "1902                  1637.832399  39.66  74.22  29527.120675  \n",
       "2160                   425.967957  36.47  82.77  20607.077766  \n",
       "2520                   884.650701  42.49  90.52  14632.621411  \n",
       "3114                   392.628772  36.02  80.37  10498.634427  \n",
       "3624                   246.584183  45.39  17.66  11094.033931  \n",
       "3936                  2425.437195  40.14  11.66  19008.810989  \n",
       "4110                  8143.086879  41.76  10.62  65684.851938  \n",
       "4818                   112.102077  42.66  10.18  13902.805391  \n",
       "4980                   781.958442  42.10  72.87  41532.871648  \n",
       "4985                   336.156758  21.04  36.44  10026.712267  \n",
       "5238                   205.427942  30.05  80.48  11382.120810  \n",
       "5268                   239.483864  42.22  16.54  14376.591270  \n",
       "5556                   339.276238  43.53  11.25  12698.735367  \n",
       "5694                  1339.704095  40.93  80.79  60407.013802  "
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.result >10000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##5.4 提交结果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(212220, 71)\n",
      "(200664, 71)\n",
      "(11556, 71)\n"
     ]
    }
   ],
   "source": [
    "###在validation数据集上测试，故用item_all_week_train\n",
    "data = item_all_week_final.copy()\n",
    "cutoff_day = 63\n",
    "\n",
    "input_cols = [\"item_id_month_median_mean\",\\\n",
    "\"item_id_0_median_mean\",\"item_id_1_median_mean\",\"item_id_2_median_mean\",\"item_id_3_median_mean\",\"item_id_4_median_mean\",\"item_id_5_median_mean\",\\\n",
    "\"special_day_1111_max\",\"special_day_1212_max\",\"special_day_0909_max\",\"special_day_0415_max\",\"special_day_0925_max\",\"special_day_0616_max\",\\\n",
    "\"qty_alipay_njhs_cumsum_shift_1\",\"qty_alipay_njhs_cumsum_shift_2\",\"qty_alipay_njhs_cumsum_shift_3\",\"qty_alipay_njhs_cumsum_shift_4\",\\\n",
    "'qty_alipay_jhs_sum_shift_1', 'qty_alipay_jhs_sum_shift_2','qty_alipay_jhs_sum_shift_3','qty_alipay_jhs_sum_shift_4',\\\n",
    "'cart_ipv_mean_shift_1','cart_ipv_mean_shift_2','cart_ipv_mean_shift_3','cart_ipv_mean_shift_4',\\\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2', 'pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\\\n",
    "'qty_alipay_njhs_median_shift_1', 'qty_alipay_njhs_median_shift_2', 'qty_alipay_njhs_median_shift_3', 'qty_alipay_njhs_median_shift_4', \n",
    "\"qty_alipay_njhs_sum_shift_1\",\"qty_alipay_njhs_sum_shift_2\",\"qty_alipay_njhs_sum_shift_3\",\"qty_alipay_njhs_sum_shift_4\"]\n",
    "\n",
    "\n",
    "\n",
    "train = data[data.startweek <= cutoff_day]\n",
    "test = data[data.startweek > cutoff_day]\n",
    "print data.shape\n",
    "print train.shape\n",
    "print test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Python/2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "test.sort_index(by=[\"startweek\",\"item_id\",\"store_code\"],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "963 (11556, 71)\n",
      "(200664, 37)\n",
      "(11556, 37)\n"
     ]
    }
   ],
   "source": [
    "print len(test.item_id.unique()),test.shape\n",
    "X_train, y_train, y_train_df = prep_data(train, input_cols)\n",
    "X_test, y_test, y_test_df = prep_data(test, input_cols)\n",
    "print X_train.shape\n",
    "print X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "pred_size = item_size * 6\n",
    "start = 1*pred_size\n",
    "end = 2*pred_size\n",
    "myshape = X_test.shape[1]\n",
    "for i in range(start,end,1):\n",
    "    for j in range(13,myshape,1):\n",
    "        X_test[i][j] = X_test[i-pred_size][j]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "clf = GradientBoostingRegressor(n_estimators =100,learning_rate=0.1,max_depth=10)\n",
    "clf_r = clf.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "def predict_by_predict(X_test,model):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    \n",
    "    ##第二周\n",
    "    week = 1\n",
    "    start = week*pred_size\n",
    "    end = (week+1)*pred_size\n",
    "    for i in range(start,end,1):\n",
    "        X[i][13] = X[i-week*pred_size][13]+y_predict[i-week*pred_size]\n",
    "        X[i][14] = X[i-week*pred_size][14]+y_predict[i-week*pred_size]\n",
    "        X[i][15] = X[i-week*pred_size][15]+y_predict[i-week*pred_size]\n",
    "        X[i][16] = X[i-week*pred_size][16]+y_predict[i-week*pred_size]   \n",
    "        X[i][-1] = X[i][-2]\n",
    "        X[i][-2] = X[i][-3]\n",
    "        X[i][-3] = X[i][-4]\n",
    "        X[i][-4] = y_predict[i-week*pred_size]\n",
    "    X_one_week = X[week * pred_size : (week+1)*pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y_pred = predict_by_predict(X_test,clf_r)\n",
    "y_pred_df = y_test_df.copy()\n",
    "y_pred_df.qty_alipay_njhs_sum = y_pred\n",
    "y_pred_df_new = y_pred_df.groupby([\"item_id\",\"store_code\"]).qty_alipay_njhs_sum.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "result = y_pred_df_new.reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33</td>\n",
       "      <td>all</td>\n",
       "      <td>2.449650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0.433409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>0.798059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>0.433409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>1.294990</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id store_code  qty_alipay_njhs_sum\n",
       "0       33        all             2.449650\n",
       "1       33          1             0.433409\n",
       "2       33          2             0.798059\n",
       "3       33          3             0.433409\n",
       "4       33          4             1.294990"
      ]
     },
     "execution_count": 188,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "manual_header = [\"item_id\",\"store_code\",\"qty_alipay_njhs_sum\"]\n",
    "result_manual2 = pd.read_csv(\"result_manual2.csv\",header=None,names=manual_header)\n",
    "result_manual2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>33</td>\n",
       "      <td>all</td>\n",
       "      <td>3.885927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0.316972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>33</td>\n",
       "      <td>2</td>\n",
       "      <td>0.535563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>0.404942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>4</td>\n",
       "      <td>2.785921</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id store_code  qty_alipay_njhs_sum\n",
       "0       33        all             3.885927\n",
       "1       33          1             0.316972\n",
       "2       33          2             0.535563\n",
       "3       33          3             0.404942\n",
       "4       33          4             2.785921"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result[\"store_code\"] = result[\"store_code\"].replace(0,\"all\")\n",
    "result[\"store_code\"]= result[\"store_code\"].map(str)\n",
    "result.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58452</td>\n",
       "      <td>all</td>\n",
       "      <td>46.38</td>\n",
       "      <td>11.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>36132</td>\n",
       "      <td>all</td>\n",
       "      <td>45.79</td>\n",
       "      <td>85.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34092</td>\n",
       "      <td>all</td>\n",
       "      <td>43.65</td>\n",
       "      <td>83.86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>62772</td>\n",
       "      <td>all</td>\n",
       "      <td>44.68</td>\n",
       "      <td>16.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9597</td>\n",
       "      <td>all</td>\n",
       "      <td>41.04</td>\n",
       "      <td>17.70</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   item_id store_code      a      b\n",
       "0    58452        all  46.38  11.86\n",
       "1    36132        all  45.79  85.94\n",
       "2    34092        all  43.65  83.86\n",
       "3    62772        all  44.68  16.89\n",
       "4     9597        all  41.04  17.70"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config_header = [\"item_id\",\"store_code\",\"a_b\"]\n",
    "config = pd.read_csv(\"../../data/dataset1/config2.csv\",header=None,names=config_header)\n",
    "##处理数据，拆分补低和补高成本\n",
    "fun_a = lambda x:  x.strip().split(\"_\")[0]\n",
    "fun_b = lambda x:  x.strip().split(\"_\")[1]\n",
    "config[\"a\"] = config[\"a_b\"].map(fun_a).astype(float)\n",
    "config[\"b\"] = config[\"a_b\"].map(fun_b).astype(float)\n",
    "config.drop(\"a_b\",axis = 1,inplace = True)\n",
    "config.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "##成本的计算\n",
    "fun = lambda x:  x[\"a\"] * max(x[\"qty_alipay_njhs_sum_true\"]-x[\"qty_alipay_njhs_sum_predict\"],0)+\\\n",
    "    x[\"b\"]*max(x[\"qty_alipay_njhs_sum_predict\"]-x[\"qty_alipay_njhs_sum_true\"],0)\n",
    "\n",
    "def my_calculate_cost(df_true,df_predict):\n",
    "    '''\n",
    "    Args:\n",
    "        df_true: A DataFrame of true_counts\n",
    "        df_predict: A DataFrame of predict_counts\n",
    "        config: config.csv\n",
    "    Returns:\n",
    "        all cost and country cost\n",
    "    \n",
    "    '''\n",
    "    df = pd.merge(df_true,df_predict,how=\"outer\",on = [\"item_id\",\"store_code\"],suffixes=(\"_true\",\"_predict\"))\n",
    "    df = pd.merge(df,config,how=\"outer\",on=[\"item_id\",\"store_code\"])\n",
    "    df.fillna(0,inplace = True)\n",
    "    df[\"result\"] = df[[\"a\",\"b\",\"qty_alipay_njhs_sum_predict\",\"qty_alipay_njhs_sum_true\"]].apply(fun,axis =1 )\n",
    "    result_1 = df.result.sum()\n",
    "    result_2 = df[df.store_code==\"all\"].result.sum()\n",
    "    return result_1,result_2,df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1848754.31634 1209542.32688\n"
     ]
    }
   ],
   "source": [
    "result1,result2,df=my_calculate_cost(result_manual2,result)\n",
    "print result1,result2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "item_id                          int64\n",
       "store_code                      object\n",
       "qty_alipay_njhs_sum_true       float64\n",
       "qty_alipay_njhs_sum_predict    float64\n",
       "a                              float64\n",
       "b                              float64\n",
       "result                         float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 217,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def new_fun(x,y,z):\n",
    "    if x > 10000:\n",
    "        return 0.98*y+0.02*z\n",
    "    elif x > 1000:\n",
    "        return 0.9*y+0.1*z\n",
    "    else:\n",
    "        return 0.5*y+0.5*z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df[\"fill_val\"] = df.apply(lambda x: new_fun(x[\"result\"],x[\"qty_alipay_njhs_sum_true\"],x[\"qty_alipay_njhs_sum_predict\"]),axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5778, 3)"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mysubmission = df[[\"item_id\",\"store_code\",\"fill_val\"]]\n",
    "mysubmission.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "mysubmission.to_csv(\"final_csv\",header=False,index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>item_id</th>\n",
       "      <th>store_code</th>\n",
       "      <th>qty_alipay_njhs_sum_true</th>\n",
       "      <th>qty_alipay_njhs_sum_predict</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>result</th>\n",
       "      <th>fill_val</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>549</td>\n",
       "      <td>all</td>\n",
       "      <td>4.42330</td>\n",
       "      <td>15.380631</td>\n",
       "      <td>42.63</td>\n",
       "      <td>94.26</td>\n",
       "      <td>1032.837996</td>\n",
       "      <td>5.519033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>138</th>\n",
       "      <td>2806</td>\n",
       "      <td>all</td>\n",
       "      <td>1015.11000</td>\n",
       "      <td>830.825263</td>\n",
       "      <td>10.18</td>\n",
       "      <td>42.52</td>\n",
       "      <td>1876.018618</td>\n",
       "      <td>996.681526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>142</th>\n",
       "      <td>2806</td>\n",
       "      <td>4</td>\n",
       "      <td>200.02100</td>\n",
       "      <td>367.157691</td>\n",
       "      <td>4.08</td>\n",
       "      <td>17.00</td>\n",
       "      <td>2841.323744</td>\n",
       "      <td>216.734669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>168</th>\n",
       "      <td>2980</td>\n",
       "      <td>all</td>\n",
       "      <td>87.36600</td>\n",
       "      <td>140.304392</td>\n",
       "      <td>33.07</td>\n",
       "      <td>84.72</td>\n",
       "      <td>4484.940537</td>\n",
       "      <td>92.659839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>3228</td>\n",
       "      <td>all</td>\n",
       "      <td>7.70306</td>\n",
       "      <td>436.480748</td>\n",
       "      <td>45.43</td>\n",
       "      <td>11.69</td>\n",
       "      <td>5012.411175</td>\n",
       "      <td>50.580829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>3424</td>\n",
       "      <td>all</td>\n",
       "      <td>901.63600</td>\n",
       "      <td>820.979611</td>\n",
       "      <td>21.09</td>\n",
       "      <td>35.75</td>\n",
       "      <td>1701.043237</td>\n",
       "      <td>893.570361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>4969</td>\n",
       "      <td>all</td>\n",
       "      <td>48.18600</td>\n",
       "      <td>62.577402</td>\n",
       "      <td>40.06</td>\n",
       "      <td>79.69</td>\n",
       "      <td>1146.850800</td>\n",
       "      <td>49.625140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>6321</td>\n",
       "      <td>all</td>\n",
       "      <td>7.70878</td>\n",
       "      <td>31.435233</td>\n",
       "      <td>42.34</td>\n",
       "      <td>86.71</td>\n",
       "      <td>2057.320738</td>\n",
       "      <td>10.081425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>372</th>\n",
       "      <td>7011</td>\n",
       "      <td>all</td>\n",
       "      <td>41.23770</td>\n",
       "      <td>101.061387</td>\n",
       "      <td>34.03</td>\n",
       "      <td>84.36</td>\n",
       "      <td>5046.726219</td>\n",
       "      <td>47.220069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>462</th>\n",
       "      <td>8532</td>\n",
       "      <td>all</td>\n",
       "      <td>10.88180</td>\n",
       "      <td>29.512659</td>\n",
       "      <td>38.20</td>\n",
       "      <td>72.68</td>\n",
       "      <td>1354.090826</td>\n",
       "      <td>12.744886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>9543</td>\n",
       "      <td>all</td>\n",
       "      <td>139.97000</td>\n",
       "      <td>54.409964</td>\n",
       "      <td>43.83</td>\n",
       "      <td>15.01</td>\n",
       "      <td>3750.096362</td>\n",
       "      <td>131.413996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>594</th>\n",
       "      <td>10044</td>\n",
       "      <td>all</td>\n",
       "      <td>65.99680</td>\n",
       "      <td>78.655834</td>\n",
       "      <td>44.84</td>\n",
       "      <td>86.09</td>\n",
       "      <td>1089.816262</td>\n",
       "      <td>67.262703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>690</th>\n",
       "      <td>11991</td>\n",
       "      <td>all</td>\n",
       "      <td>172.50200</td>\n",
       "      <td>435.312016</td>\n",
       "      <td>38.82</td>\n",
       "      <td>81.69</td>\n",
       "      <td>21468.950213</td>\n",
       "      <td>177.758200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>693</th>\n",
       "      <td>11991</td>\n",
       "      <td>3</td>\n",
       "      <td>72.35840</td>\n",
       "      <td>122.755115</td>\n",
       "      <td>17.24</td>\n",
       "      <td>36.32</td>\n",
       "      <td>1830.408706</td>\n",
       "      <td>77.398072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>694</th>\n",
       "      <td>11991</td>\n",
       "      <td>4</td>\n",
       "      <td>52.26580</td>\n",
       "      <td>87.410564</td>\n",
       "      <td>15.52</td>\n",
       "      <td>32.68</td>\n",
       "      <td>1148.530887</td>\n",
       "      <td>55.780276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>726</th>\n",
       "      <td>12885</td>\n",
       "      <td>all</td>\n",
       "      <td>1808.21000</td>\n",
       "      <td>2548.122620</td>\n",
       "      <td>41.27</td>\n",
       "      <td>10.94</td>\n",
       "      <td>8094.644064</td>\n",
       "      <td>1882.201262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>729</th>\n",
       "      <td>12885</td>\n",
       "      <td>3</td>\n",
       "      <td>424.05500</td>\n",
       "      <td>316.909985</td>\n",
       "      <td>18.36</td>\n",
       "      <td>4.88</td>\n",
       "      <td>1967.182470</td>\n",
       "      <td>413.340499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>750</th>\n",
       "      <td>13299</td>\n",
       "      <td>all</td>\n",
       "      <td>48.87210</td>\n",
       "      <td>74.519247</td>\n",
       "      <td>43.17</td>\n",
       "      <td>91.83</td>\n",
       "      <td>2355.177478</td>\n",
       "      <td>51.436815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>753</th>\n",
       "      <td>13299</td>\n",
       "      <td>3</td>\n",
       "      <td>14.17520</td>\n",
       "      <td>42.189971</td>\n",
       "      <td>19.20</td>\n",
       "      <td>40.80</td>\n",
       "      <td>1143.002640</td>\n",
       "      <td>16.976677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>756</th>\n",
       "      <td>13884</td>\n",
       "      <td>all</td>\n",
       "      <td>56.83770</td>\n",
       "      <td>96.500706</td>\n",
       "      <td>41.51</td>\n",
       "      <td>88.90</td>\n",
       "      <td>3526.041270</td>\n",
       "      <td>60.804001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>760</th>\n",
       "      <td>13884</td>\n",
       "      <td>4</td>\n",
       "      <td>26.99070</td>\n",
       "      <td>57.090930</td>\n",
       "      <td>16.60</td>\n",
       "      <td>35.56</td>\n",
       "      <td>1070.364167</td>\n",
       "      <td>30.000723</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>816</th>\n",
       "      <td>14754</td>\n",
       "      <td>all</td>\n",
       "      <td>108.97400</td>\n",
       "      <td>52.216104</td>\n",
       "      <td>40.35</td>\n",
       "      <td>16.65</td>\n",
       "      <td>2290.181121</td>\n",
       "      <td>103.298210</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>876</th>\n",
       "      <td>16533</td>\n",
       "      <td>all</td>\n",
       "      <td>1.36484</td>\n",
       "      <td>26.212512</td>\n",
       "      <td>32.62</td>\n",
       "      <td>92.15</td>\n",
       "      <td>2289.712939</td>\n",
       "      <td>3.849607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>16859</td>\n",
       "      <td>all</td>\n",
       "      <td>183.91500</td>\n",
       "      <td>119.637004</td>\n",
       "      <td>47.46</td>\n",
       "      <td>10.20</td>\n",
       "      <td>3050.633684</td>\n",
       "      <td>177.487200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>893</th>\n",
       "      <td>16859</td>\n",
       "      <td>5</td>\n",
       "      <td>102.47900</td>\n",
       "      <td>55.472653</td>\n",
       "      <td>23.72</td>\n",
       "      <td>5.12</td>\n",
       "      <td>1114.990551</td>\n",
       "      <td>97.778365</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>930</th>\n",
       "      <td>17449</td>\n",
       "      <td>all</td>\n",
       "      <td>90.25560</td>\n",
       "      <td>152.176825</td>\n",
       "      <td>21.78</td>\n",
       "      <td>30.45</td>\n",
       "      <td>1885.501298</td>\n",
       "      <td>96.447722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>942</th>\n",
       "      <td>17720</td>\n",
       "      <td>all</td>\n",
       "      <td>103.78100</td>\n",
       "      <td>79.732269</td>\n",
       "      <td>47.52</td>\n",
       "      <td>11.81</td>\n",
       "      <td>1142.795680</td>\n",
       "      <td>101.376127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>954</th>\n",
       "      <td>18527</td>\n",
       "      <td>all</td>\n",
       "      <td>31.67710</td>\n",
       "      <td>104.944324</td>\n",
       "      <td>23.26</td>\n",
       "      <td>35.21</td>\n",
       "      <td>2579.738957</td>\n",
       "      <td>39.003822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>19417</td>\n",
       "      <td>all</td>\n",
       "      <td>157.02600</td>\n",
       "      <td>84.502162</td>\n",
       "      <td>40.96</td>\n",
       "      <td>10.60</td>\n",
       "      <td>2970.576415</td>\n",
       "      <td>149.773616</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>20121</td>\n",
       "      <td>all</td>\n",
       "      <td>97.45990</td>\n",
       "      <td>48.915158</td>\n",
       "      <td>42.91</td>\n",
       "      <td>17.60</td>\n",
       "      <td>2083.054869</td>\n",
       "      <td>92.605426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5610</th>\n",
       "      <td>153145</td>\n",
       "      <td>all</td>\n",
       "      <td>40.04350</td>\n",
       "      <td>81.459805</td>\n",
       "      <td>23.24</td>\n",
       "      <td>35.25</td>\n",
       "      <td>1459.924755</td>\n",
       "      <td>44.185131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5628</th>\n",
       "      <td>154270</td>\n",
       "      <td>all</td>\n",
       "      <td>309.89200</td>\n",
       "      <td>411.871369</td>\n",
       "      <td>43.92</td>\n",
       "      <td>10.68</td>\n",
       "      <td>1089.139656</td>\n",
       "      <td>320.089937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5637</th>\n",
       "      <td>155045</td>\n",
       "      <td>3</td>\n",
       "      <td>19.82200</td>\n",
       "      <td>46.781646</td>\n",
       "      <td>13.52</td>\n",
       "      <td>37.28</td>\n",
       "      <td>1005.055594</td>\n",
       "      <td>22.517965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5640</th>\n",
       "      <td>155087</td>\n",
       "      <td>all</td>\n",
       "      <td>30.35630</td>\n",
       "      <td>54.586851</td>\n",
       "      <td>41.79</td>\n",
       "      <td>95.90</td>\n",
       "      <td>2323.709821</td>\n",
       "      <td>32.779355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5652</th>\n",
       "      <td>155734</td>\n",
       "      <td>all</td>\n",
       "      <td>61.25390</td>\n",
       "      <td>89.469236</td>\n",
       "      <td>10.80</td>\n",
       "      <td>47.42</td>\n",
       "      <td>1337.971217</td>\n",
       "      <td>64.075434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5658</th>\n",
       "      <td>155737</td>\n",
       "      <td>all</td>\n",
       "      <td>128.89000</td>\n",
       "      <td>203.684690</td>\n",
       "      <td>34.60</td>\n",
       "      <td>89.39</td>\n",
       "      <td>6685.897310</td>\n",
       "      <td>136.369469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5662</th>\n",
       "      <td>155737</td>\n",
       "      <td>4</td>\n",
       "      <td>49.72870</td>\n",
       "      <td>79.047611</td>\n",
       "      <td>13.84</td>\n",
       "      <td>35.76</td>\n",
       "      <td>1048.444253</td>\n",
       "      <td>52.660591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5664</th>\n",
       "      <td>156583</td>\n",
       "      <td>all</td>\n",
       "      <td>207.82300</td>\n",
       "      <td>281.865293</td>\n",
       "      <td>44.12</td>\n",
       "      <td>15.91</td>\n",
       "      <td>1178.012874</td>\n",
       "      <td>215.227229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5670</th>\n",
       "      <td>157253</td>\n",
       "      <td>all</td>\n",
       "      <td>199.70800</td>\n",
       "      <td>147.903638</td>\n",
       "      <td>44.11</td>\n",
       "      <td>17.55</td>\n",
       "      <td>2285.090420</td>\n",
       "      <td>194.527564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5676</th>\n",
       "      <td>158080</td>\n",
       "      <td>all</td>\n",
       "      <td>88.71920</td>\n",
       "      <td>140.126930</td>\n",
       "      <td>42.22</td>\n",
       "      <td>89.60</td>\n",
       "      <td>4606.132615</td>\n",
       "      <td>93.859973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5682</th>\n",
       "      <td>158227</td>\n",
       "      <td>all</td>\n",
       "      <td>260.74600</td>\n",
       "      <td>128.627839</td>\n",
       "      <td>40.63</td>\n",
       "      <td>10.13</td>\n",
       "      <td>5367.960865</td>\n",
       "      <td>247.534184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5685</th>\n",
       "      <td>158227</td>\n",
       "      <td>3</td>\n",
       "      <td>95.09230</td>\n",
       "      <td>26.880009</td>\n",
       "      <td>18.04</td>\n",
       "      <td>4.52</td>\n",
       "      <td>1230.549737</td>\n",
       "      <td>88.271071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5694</th>\n",
       "      <td>158638</td>\n",
       "      <td>all</td>\n",
       "      <td>453.82700</td>\n",
       "      <td>2530.607075</td>\n",
       "      <td>40.93</td>\n",
       "      <td>80.79</td>\n",
       "      <td>167783.062269</td>\n",
       "      <td>495.362602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5695</th>\n",
       "      <td>158638</td>\n",
       "      <td>1</td>\n",
       "      <td>98.12170</td>\n",
       "      <td>469.042632</td>\n",
       "      <td>12.60</td>\n",
       "      <td>24.84</td>\n",
       "      <td>9213.675954</td>\n",
       "      <td>135.213793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5696</th>\n",
       "      <td>158638</td>\n",
       "      <td>2</td>\n",
       "      <td>48.07990</td>\n",
       "      <td>306.800900</td>\n",
       "      <td>10.92</td>\n",
       "      <td>21.56</td>\n",
       "      <td>5578.024763</td>\n",
       "      <td>73.952000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5697</th>\n",
       "      <td>158638</td>\n",
       "      <td>3</td>\n",
       "      <td>92.64570</td>\n",
       "      <td>526.561984</td>\n",
       "      <td>18.20</td>\n",
       "      <td>35.92</td>\n",
       "      <td>15586.272922</td>\n",
       "      <td>101.324026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5698</th>\n",
       "      <td>158638</td>\n",
       "      <td>4</td>\n",
       "      <td>145.62700</td>\n",
       "      <td>413.575152</td>\n",
       "      <td>16.36</td>\n",
       "      <td>32.32</td>\n",
       "      <td>8660.084279</td>\n",
       "      <td>172.421815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5699</th>\n",
       "      <td>158638</td>\n",
       "      <td>5</td>\n",
       "      <td>70.19730</td>\n",
       "      <td>492.017684</td>\n",
       "      <td>20.48</td>\n",
       "      <td>40.40</td>\n",
       "      <td>17041.543499</td>\n",
       "      <td>78.633708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5700</th>\n",
       "      <td>160751</td>\n",
       "      <td>all</td>\n",
       "      <td>24.92300</td>\n",
       "      <td>64.656764</td>\n",
       "      <td>21.76</td>\n",
       "      <td>35.28</td>\n",
       "      <td>1401.807200</td>\n",
       "      <td>28.896376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5706</th>\n",
       "      <td>160930</td>\n",
       "      <td>all</td>\n",
       "      <td>105.11200</td>\n",
       "      <td>54.903918</td>\n",
       "      <td>42.98</td>\n",
       "      <td>10.12</td>\n",
       "      <td>2157.943356</td>\n",
       "      <td>100.091192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5712</th>\n",
       "      <td>162377</td>\n",
       "      <td>all</td>\n",
       "      <td>101.34300</td>\n",
       "      <td>51.524151</td>\n",
       "      <td>41.28</td>\n",
       "      <td>10.38</td>\n",
       "      <td>2056.522087</td>\n",
       "      <td>96.361115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5718</th>\n",
       "      <td>162430</td>\n",
       "      <td>all</td>\n",
       "      <td>44.43700</td>\n",
       "      <td>128.312137</td>\n",
       "      <td>31.15</td>\n",
       "      <td>90.86</td>\n",
       "      <td>7620.894961</td>\n",
       "      <td>52.824514</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5722</th>\n",
       "      <td>162430</td>\n",
       "      <td>4</td>\n",
       "      <td>31.43170</td>\n",
       "      <td>60.803997</td>\n",
       "      <td>12.48</td>\n",
       "      <td>36.36</td>\n",
       "      <td>1067.976722</td>\n",
       "      <td>34.368930</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5724</th>\n",
       "      <td>163228</td>\n",
       "      <td>all</td>\n",
       "      <td>405.44400</td>\n",
       "      <td>565.285886</td>\n",
       "      <td>47.67</td>\n",
       "      <td>95.51</td>\n",
       "      <td>15266.498553</td>\n",
       "      <td>408.640838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5729</th>\n",
       "      <td>163228</td>\n",
       "      <td>5</td>\n",
       "      <td>190.83500</td>\n",
       "      <td>215.617113</td>\n",
       "      <td>23.84</td>\n",
       "      <td>47.76</td>\n",
       "      <td>1183.593730</td>\n",
       "      <td>193.313211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5730</th>\n",
       "      <td>164234</td>\n",
       "      <td>all</td>\n",
       "      <td>98.92030</td>\n",
       "      <td>118.650943</td>\n",
       "      <td>43.53</td>\n",
       "      <td>91.08</td>\n",
       "      <td>1797.066936</td>\n",
       "      <td>100.893364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5736</th>\n",
       "      <td>164356</td>\n",
       "      <td>all</td>\n",
       "      <td>35.05430</td>\n",
       "      <td>71.795511</td>\n",
       "      <td>41.24</td>\n",
       "      <td>95.36</td>\n",
       "      <td>3503.641873</td>\n",
       "      <td>38.728421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5742</th>\n",
       "      <td>164596</td>\n",
       "      <td>all</td>\n",
       "      <td>137.73900</td>\n",
       "      <td>95.928126</td>\n",
       "      <td>46.69</td>\n",
       "      <td>11.46</td>\n",
       "      <td>1952.149685</td>\n",
       "      <td>133.557913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5754</th>\n",
       "      <td>166919</td>\n",
       "      <td>all</td>\n",
       "      <td>37.41320</td>\n",
       "      <td>124.888895</td>\n",
       "      <td>22.84</td>\n",
       "      <td>30.94</td>\n",
       "      <td>2706.497999</td>\n",
       "      <td>46.160769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5760</th>\n",
       "      <td>166958</td>\n",
       "      <td>all</td>\n",
       "      <td>600.11200</td>\n",
       "      <td>807.005545</td>\n",
       "      <td>44.23</td>\n",
       "      <td>11.18</td>\n",
       "      <td>2313.069834</td>\n",
       "      <td>620.801355</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>335 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      item_id store_code  qty_alipay_njhs_sum_true  \\\n",
       "18        549        all                   4.42330   \n",
       "138      2806        all                1015.11000   \n",
       "142      2806          4                 200.02100   \n",
       "168      2980        all                  87.36600   \n",
       "204      3228        all                   7.70306   \n",
       "222      3424        all                 901.63600   \n",
       "246      4969        all                  48.18600   \n",
       "342      6321        all                   7.70878   \n",
       "372      7011        all                  41.23770   \n",
       "462      8532        all                  10.88180   \n",
       "522      9543        all                 139.97000   \n",
       "594     10044        all                  65.99680   \n",
       "690     11991        all                 172.50200   \n",
       "693     11991          3                  72.35840   \n",
       "694     11991          4                  52.26580   \n",
       "726     12885        all                1808.21000   \n",
       "729     12885          3                 424.05500   \n",
       "750     13299        all                  48.87210   \n",
       "753     13299          3                  14.17520   \n",
       "756     13884        all                  56.83770   \n",
       "760     13884          4                  26.99070   \n",
       "816     14754        all                 108.97400   \n",
       "876     16533        all                   1.36484   \n",
       "888     16859        all                 183.91500   \n",
       "893     16859          5                 102.47900   \n",
       "930     17449        all                  90.25560   \n",
       "942     17720        all                 103.78100   \n",
       "954     18527        all                  31.67710   \n",
       "972     19417        all                 157.02600   \n",
       "996     20121        all                  97.45990   \n",
       "...       ...        ...                       ...   \n",
       "5610   153145        all                  40.04350   \n",
       "5628   154270        all                 309.89200   \n",
       "5637   155045          3                  19.82200   \n",
       "5640   155087        all                  30.35630   \n",
       "5652   155734        all                  61.25390   \n",
       "5658   155737        all                 128.89000   \n",
       "5662   155737          4                  49.72870   \n",
       "5664   156583        all                 207.82300   \n",
       "5670   157253        all                 199.70800   \n",
       "5676   158080        all                  88.71920   \n",
       "5682   158227        all                 260.74600   \n",
       "5685   158227          3                  95.09230   \n",
       "5694   158638        all                 453.82700   \n",
       "5695   158638          1                  98.12170   \n",
       "5696   158638          2                  48.07990   \n",
       "5697   158638          3                  92.64570   \n",
       "5698   158638          4                 145.62700   \n",
       "5699   158638          5                  70.19730   \n",
       "5700   160751        all                  24.92300   \n",
       "5706   160930        all                 105.11200   \n",
       "5712   162377        all                 101.34300   \n",
       "5718   162430        all                  44.43700   \n",
       "5722   162430          4                  31.43170   \n",
       "5724   163228        all                 405.44400   \n",
       "5729   163228          5                 190.83500   \n",
       "5730   164234        all                  98.92030   \n",
       "5736   164356        all                  35.05430   \n",
       "5742   164596        all                 137.73900   \n",
       "5754   166919        all                  37.41320   \n",
       "5760   166958        all                 600.11200   \n",
       "\n",
       "      qty_alipay_njhs_sum_predict      a      b         result     fill_val  \n",
       "18                      15.380631  42.63  94.26    1032.837996     5.519033  \n",
       "138                    830.825263  10.18  42.52    1876.018618   996.681526  \n",
       "142                    367.157691   4.08  17.00    2841.323744   216.734669  \n",
       "168                    140.304392  33.07  84.72    4484.940537    92.659839  \n",
       "204                    436.480748  45.43  11.69    5012.411175    50.580829  \n",
       "222                    820.979611  21.09  35.75    1701.043237   893.570361  \n",
       "246                     62.577402  40.06  79.69    1146.850800    49.625140  \n",
       "342                     31.435233  42.34  86.71    2057.320738    10.081425  \n",
       "372                    101.061387  34.03  84.36    5046.726219    47.220069  \n",
       "462                     29.512659  38.20  72.68    1354.090826    12.744886  \n",
       "522                     54.409964  43.83  15.01    3750.096362   131.413996  \n",
       "594                     78.655834  44.84  86.09    1089.816262    67.262703  \n",
       "690                    435.312016  38.82  81.69   21468.950213   177.758200  \n",
       "693                    122.755115  17.24  36.32    1830.408706    77.398072  \n",
       "694                     87.410564  15.52  32.68    1148.530887    55.780276  \n",
       "726                   2548.122620  41.27  10.94    8094.644064  1882.201262  \n",
       "729                    316.909985  18.36   4.88    1967.182470   413.340499  \n",
       "750                     74.519247  43.17  91.83    2355.177478    51.436815  \n",
       "753                     42.189971  19.20  40.80    1143.002640    16.976677  \n",
       "756                     96.500706  41.51  88.90    3526.041270    60.804001  \n",
       "760                     57.090930  16.60  35.56    1070.364167    30.000723  \n",
       "816                     52.216104  40.35  16.65    2290.181121   103.298210  \n",
       "876                     26.212512  32.62  92.15    2289.712939     3.849607  \n",
       "888                    119.637004  47.46  10.20    3050.633684   177.487200  \n",
       "893                     55.472653  23.72   5.12    1114.990551    97.778365  \n",
       "930                    152.176825  21.78  30.45    1885.501298    96.447722  \n",
       "942                     79.732269  47.52  11.81    1142.795680   101.376127  \n",
       "954                    104.944324  23.26  35.21    2579.738957    39.003822  \n",
       "972                     84.502162  40.96  10.60    2970.576415   149.773616  \n",
       "996                     48.915158  42.91  17.60    2083.054869    92.605426  \n",
       "...                           ...    ...    ...            ...          ...  \n",
       "5610                    81.459805  23.24  35.25    1459.924755    44.185131  \n",
       "5628                   411.871369  43.92  10.68    1089.139656   320.089937  \n",
       "5637                    46.781646  13.52  37.28    1005.055594    22.517965  \n",
       "5640                    54.586851  41.79  95.90    2323.709821    32.779355  \n",
       "5652                    89.469236  10.80  47.42    1337.971217    64.075434  \n",
       "5658                   203.684690  34.60  89.39    6685.897310   136.369469  \n",
       "5662                    79.047611  13.84  35.76    1048.444253    52.660591  \n",
       "5664                   281.865293  44.12  15.91    1178.012874   215.227229  \n",
       "5670                   147.903638  44.11  17.55    2285.090420   194.527564  \n",
       "5676                   140.126930  42.22  89.60    4606.132615    93.859973  \n",
       "5682                   128.627839  40.63  10.13    5367.960865   247.534184  \n",
       "5685                    26.880009  18.04   4.52    1230.549737    88.271071  \n",
       "5694                  2530.607075  40.93  80.79  167783.062269   495.362602  \n",
       "5695                   469.042632  12.60  24.84    9213.675954   135.213793  \n",
       "5696                   306.800900  10.92  21.56    5578.024763    73.952000  \n",
       "5697                   526.561984  18.20  35.92   15586.272922   101.324026  \n",
       "5698                   413.575152  16.36  32.32    8660.084279   172.421815  \n",
       "5699                   492.017684  20.48  40.40   17041.543499    78.633708  \n",
       "5700                    64.656764  21.76  35.28    1401.807200    28.896376  \n",
       "5706                    54.903918  42.98  10.12    2157.943356   100.091192  \n",
       "5712                    51.524151  41.28  10.38    2056.522087    96.361115  \n",
       "5718                   128.312137  31.15  90.86    7620.894961    52.824514  \n",
       "5722                    60.803997  12.48  36.36    1067.976722    34.368930  \n",
       "5724                   565.285886  47.67  95.51   15266.498553   408.640838  \n",
       "5729                   215.617113  23.84  47.76    1183.593730   193.313211  \n",
       "5730                   118.650943  43.53  91.08    1797.066936   100.893364  \n",
       "5736                    71.795511  41.24  95.36    3503.641873    38.728421  \n",
       "5742                    95.928126  46.69  11.46    1952.149685   133.557913  \n",
       "5754                   124.888895  22.84  30.94    2706.497999    46.160769  \n",
       "5760                   807.005545  44.23  11.18    2313.069834   620.801355  \n",
       "\n",
       "[335 rows x 8 columns]"
      ]
     },
     "execution_count": 224,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[df.result>1000]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#6 xgboost试验"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##6.1 数据预处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "feature_cols = [\"item_id\",\"store_code\",\"special_day_max\", \"cate_level_id_median\", \"cate_id_median\", \"brand_id_median\",\n",
    "                \"supplier_id_median\",\"month_max\",\"month_min\",\n",
    "\"special_day_1111_max\",\"special_day_1212_max\",\"special_day_0909_max\",\"special_day_0415_max\",\"special_day_0925_max\",\"special_day_0616_max\",\\\n",
    "\"item_id_month_median_mean\",\"item_id_median_mean\",\n",
    "\"item_id_0_median_mean\",\"item_id_1_median_mean\",\"item_id_2_median_mean\",\"item_id_3_median_mean\",\"item_id_4_median_mean\",\"item_id_5_median_mean\",\n",
    "\"qty_alipay_njhs_cumsum_shift_1\",\"qty_alipay_njhs_cumsum_shift_2\",\"qty_alipay_njhs_cumsum_shift_3\",\"qty_alipay_njhs_cumsum_shift_4\",\n",
    "'qty_alipay_jhs_sum_shift_1','qty_alipay_jhs_sum_shift_2','qty_alipay_jhs_sum_shift_3','qty_alipay_jhs_sum_shift_4',\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2','pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\n",
    "'qty_alipay_jhs_sum_shift_1', 'qty_alipay_jhs_sum_shift_2','qty_alipay_jhs_sum_shift_3','qty_alipay_jhs_sum_shift_4',\\\n",
    "'cart_ipv_mean_shift_1','cart_ipv_mean_shift_2','cart_ipv_mean_shift_3','cart_ipv_mean_shift_4',\\\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2', 'pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\\\n",
    "'qty_alipay_njhs_median_shift_1', 'qty_alipay_njhs_median_shift_2', 'qty_alipay_njhs_median_shift_3', 'qty_alipay_njhs_median_shift_4', \n",
    "\"qty_alipay_njhs_sum_shift_1\",\"qty_alipay_njhs_sum_shift_2\",\"qty_alipay_njhs_sum_shift_3\",\"qty_alipay_njhs_sum_shift_4\"]\n",
    "\n",
    "\n",
    "\n",
    "target_cols = [\"qty_alipay_njhs_sum\"]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def prep_data(data, input_cols):\n",
    "    X = data[input_cols].as_matrix()\n",
    "    y_value = data['qty_alipay_njhs_sum'].as_matrix()\n",
    "    y_df = data[[\"item_id\",\"store_code\",\"qty_alipay_njhs_sum\"]]\n",
    "    return X, y_value, y_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200664, 71)\n",
      "(189108, 71)\n",
      "(11556, 71)\n"
     ]
    }
   ],
   "source": [
    "data = item_all_week_train.copy()\n",
    "cutoff_day = 61\n",
    "\n",
    "train = data[data.startweek <= cutoff_day]\n",
    "test = data[data.startweek > cutoff_day]\n",
    "print data.shape\n",
    "print train.shape\n",
    "print test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Python/2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "test.sort_index(by=[\"startweek\",\"item_id\",\"store_code\"],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "963 (11556, 71)\n",
      "(189108, 55)\n",
      "(11556, 55)\n"
     ]
    }
   ],
   "source": [
    "print len(test.item_id.unique()),test.shape\n",
    "X_all,y_all,y_all_df = prep_data(data,feature_cols)\n",
    "X_train, y_train, y_train_df = prep_data(train, feature_cols)\n",
    "X_test, y_test, y_test_df = prep_data(test, feature_cols)\n",
    "print X_train.shape\n",
    "print X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_size = 963\n",
    "store_code_size = 6\n",
    "pred_size = item_size * 6\n",
    "start = 1*pred_size\n",
    "end = 2*pred_size\n",
    "myshape = X_test.shape[1]\n",
    "for i in range(start,end,1):\n",
    "    for j in range(23,myshape,1):\n",
    "        X_test[i][j] = X_test[i-pred_size][j]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11556"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "963*6*2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "from sklearn import preprocessing\n",
    "\n",
    "les = []\n",
    "category_feature_len = 9\n",
    "for col in range(category_feature_len):\n",
    "    le = preprocessing.LabelEncoder()\n",
    "    le.fit(X_all[:, col])\n",
    "    les.append(le)\n",
    "    X_train[:, col] = le.transform(X_train[:, col])\n",
    "    X_test[:, col] = le.transform(X_test[:, col])\n",
    "    \n",
    "X_train = X_train.astype(int)\n",
    "X_test = X_test.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training size: 189108\n",
      "test size: 11556\n",
      "feature size: 55\n"
     ]
    }
   ],
   "source": [
    "print \"training size: \" + str(len(X_train))\n",
    "print \"test size: \" + str(len(X_test))\n",
    "print \"feature size: \" + str(len(X_train[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##6.2 Xgboost模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_item_cost(y_pred, y_true, a, b):\n",
    "    sum_pred = np.sum(y_pred)\n",
    "    sum_true = np.sum(y_true)\n",
    "    cost = a * max(sum_true - sum_pred, 0) + b * max(sum_pred - sum_true, 0)\n",
    "    return cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def prepare_cost(X, item_configs, les):\n",
    "    item_id_list = [int(val) for val in les[0].inverse_transform(X[:, 0])]\n",
    "    store_code_list = [int(val) for val in les[1].inverse_transform(X[:, 1])]\n",
    "    dummy_dict = {\"item_id\": item_id_list, \"store_code\": store_code_list}\n",
    "    df = pd.DataFrame(dummy_dict)\n",
    "\n",
    "    new_df = pd.merge(df, item_configs, on = [\"item_id\", \"store_code\"], how = \"left\")\n",
    "\n",
    "    return new_df['a'].as_matrix(), new_df['b'].as_matrix()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cost_a_train, cost_b_train = prepare_cost(X_train, config, les)\n",
    "cost_a_test, cost_b_test = prepare_cost(X_test, config, les)\n",
    "cost_infos = [cost_a_train, cost_b_train,  cost_a_test, cost_b_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "class XGBoost(object):  \n",
    "    \n",
    "    def __init__(self, X_train, y_train, X_val, y_val, cost_infos):\n",
    "\n",
    "        self.cost_a_train = cost_infos[0]\n",
    "        self.cost_b_train = cost_infos[1]\n",
    "        self.cost_a_val = cost_infos[2]\n",
    "        self.cost_b_val = cost_infos[3]\n",
    "\n",
    "        dtrain = xgb.DMatrix(X_train, label = y_train)\n",
    "        dval = xgb.DMatrix(X_val, label = y_val)\n",
    "        evallist = [(dval,'eval')]\n",
    "        param = {'nthread': -1,\n",
    "                 'max_depth': 10,\n",
    "                 'eta': 0.015,\n",
    "                 'silent': 1,\n",
    "                 'colsample_bytree': 0.6,\n",
    "                 'subsample': 0.7}\n",
    "        num_round = 200\n",
    "        \n",
    "        def obj(y_pred, dtrain):\n",
    "            y_true = dtrain.get_label()\n",
    "            print '----'\n",
    "            print y_true[0:10]\n",
    "            print y_pred[0:10]\n",
    "            print self.cost_a_train[0:10]\n",
    "            print self.cost_b_train[0:10]\n",
    "            print '----'\n",
    "            \n",
    "            y_delta = (y_pred - y_true)\n",
    "            pos_indexs = y_delta >= 0\n",
    "            neg_indexs = y_delta < 0\n",
    "\n",
    "            grad = np.zeros(len(y_true))\n",
    "            grad[pos_indexs] = self.cost_b_train[pos_indexs] * y_delta[pos_indexs]\n",
    "            grad[neg_indexs] = self.cost_a_train[neg_indexs] * y_delta[neg_indexs]\n",
    "            \n",
    "            hess = np.zeros(len(y_true))\n",
    "            hess[pos_indexs] = self.cost_b_train[pos_indexs]\n",
    "            hess[neg_indexs] = self.cost_a_train[neg_indexs]\n",
    "            \n",
    "            return grad, hess    \n",
    "        \n",
    "        def evalerror(preds, dval):\n",
    "            labels = dval.get_label()\n",
    "            less_diff = labels - preds\n",
    "            more_diff = preds - labels\n",
    "            less_indexs = (less_diff) > 0\n",
    "            more_indexs = (more_diff) > 0\n",
    "            cost = 0\n",
    "            cost += np.sum(less_diff[less_indexs] * self.cost_a_val[less_indexs])\n",
    "            cost += np.sum(more_diff[more_indexs] * self.cost_b_val[more_indexs])\n",
    "            return 'error', cost\n",
    "        \n",
    "        self.bst = xgb.train(param, dtrain, num_round, evallist, obj, evalerror)\n",
    "        \n",
    "    def predict(self, X_test):\n",
    "        dtest = xgb.DMatrix(X_test)\n",
    "        y_predict = self.bst.predict(dtest)\n",
    "        return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[0]\teval-error:3750189.929574\n",
      "[1]\teval-error:3692908.886809\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49939501  0.49939501  0.49939501  0.49939501  0.49939501  0.49939501\n",
      "  0.49939501  0.49939501  0.49939501  0.49939501]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49558988  0.49558988  0.49558988  0.5011726   0.5011726   0.51412815\n",
      "  0.49558988  0.49558988  0.49558988  0.49558988]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2]\teval-error:3603584.687180\n",
      "[3]\teval-error:3529802.015018\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50604624  0.50604624  0.50604624  0.51162899  0.51162899  0.52458447\n",
      "  0.50604624  0.50604624  0.50604624  0.50604624]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51881635  0.51881635  0.51881635  0.52439904  0.52439904  0.53735459\n",
      "  0.51881635  0.51881635  0.51881635  0.51881635]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[4]\teval-error:3483703.204198\n",
      "[5]\teval-error:3417339.078384\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51896143  0.51896143  0.55498099  0.52454418  0.52454418  0.57351923\n",
      "  0.51896143  0.51896143  0.55498099  0.51896143]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.524656    0.524656    0.56067556  0.53023875  0.53023875  0.5792138\n",
      "  0.524656    0.524656    0.56067556  0.524656  ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[6]\teval-error:3365932.532658\n",
      "[7]\teval-error:3318101.270808\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52423084  0.52423084  0.5602504   0.52981359  0.52981359  0.57878864\n",
      "  0.52423084  0.52423084  0.5602504   0.52423084]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52471054  0.52471054  0.5607301   0.53029329  0.53029329  0.57926834\n",
      "  0.52471054  0.52471054  0.5607301   0.52471054]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[8]\teval-error:3272034.531168\n",
      "[9]\teval-error:3220921.589741\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52654719  0.52654719  0.5625667   0.53212988  0.53212988  0.58110493\n",
      "  0.52654719  0.52654719  0.5625667   0.52654719]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52674586  0.52674586  0.56276542  0.53232861  0.53232861  0.58130366\n",
      "  0.52674586  0.52674586  0.56276542  0.52674586]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[10]\teval-error:3183102.946069\n",
      "[11]\teval-error:3133165.817241\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52725309  0.52725309  0.56327266  0.53283584  0.53283584  0.58181089\n",
      "  0.52725309  0.52725309  0.56327266  0.52725309]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52388912  0.52388912  0.55990863  0.54015702  0.54015702  0.58913207\n",
      "  0.52388912  0.52388912  0.55990863  0.52388912]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[12]\teval-error:3089641.568632\n",
      "[13]\teval-error:3042523.282896\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52157521  0.52157521  0.55759478  0.53784311  0.53784311  0.58681816\n",
      "  0.52157521  0.52157521  0.55759478  0.52157521]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51753026  0.51753026  0.55354977  0.5402137   0.5402137   0.58918875\n",
      "  0.51753026  0.51753026  0.55354977  0.51753026]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[14]\teval-error:2989612.852435\n",
      "[15]\teval-error:2939729.536595\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52107614  0.52107614  0.55709565  0.54375958  0.54375958  0.59273463\n",
      "  0.52107614  0.52107614  0.55709565  0.52107614]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52365708  0.52365708  0.55967665  0.54634053  0.54634053  0.59531558\n",
      "  0.52365708  0.52365708  0.55967665  0.52365708]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[16]\teval-error:2898251.494346\n",
      "[17]\teval-error:2863556.187934\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52480161  0.52480161  0.56082118  0.54748505  0.54748505  0.5964601\n",
      "  0.52480161  0.52480161  0.56082118  0.52480161]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53040326  0.53040326  0.56642276  0.5530867   0.5530867   0.60206175\n",
      "  0.53040326  0.53040326  0.56642276  0.53040326]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[18]\teval-error:2822518.127727\n",
      "[19]\teval-error:2784466.343458\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53004062  0.53004062  0.56606019  0.55272406  0.55272406  0.60169911\n",
      "  0.53004062  0.53004062  0.56606019  0.53004062]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53399158  0.53399158  0.57001114  0.55667502  0.55667502  0.60565007\n",
      "  0.53399158  0.53399158  0.57001114  0.53399158]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[20]\teval-error:2742577.110186\n",
      "[21]\teval-error:2698941.535123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53326577  0.53326577  0.56928527  0.55594921  0.55594921  0.60492426\n",
      "  0.53326577  0.53326577  0.56928527  0.53326577]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.5344578   0.5344578   0.57047737  0.5571413   0.5571413   0.60611629\n",
      "  0.5344578   0.5344578   0.57047737  0.5344578 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[22]\teval-error:2661216.088493\n",
      "[23]\teval-error:2631867.765825\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53492779  0.53492779  0.57094735  0.55761123  0.55761123  0.60658628\n",
      "  0.53492779  0.53492779  0.57094735  0.53492779]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53293097  0.53293097  0.56895047  0.55561441  0.55561441  0.60458946\n",
      "  0.53293097  0.53293097  0.56895047  0.53293097]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[24]\teval-error:2600692.310558\n",
      "[25]\teval-error:2571516.171305\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53470665  0.53470665  0.57072622  0.55739009  0.55739009  0.60636514\n",
      "  0.53470665  0.53470665  0.57072622  0.53470665]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53292     0.53292     0.56893957  0.55560344  0.55560344  0.6045785\n",
      "  0.53292     0.53292     0.56893957  0.53292   ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[26]\teval-error:2535923.035956\n",
      "[27]\teval-error:2522391.879252\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52947652  0.52947652  0.56549609  0.55215997  0.55215997  0.60113502\n",
      "  0.52947652  0.52947652  0.56549609  0.52947652]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52984196  0.52984196  0.56586152  0.5525254   0.5525254   0.60150045\n",
      "  0.52984196  0.52984196  0.56586152  0.52984196]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[28]\teval-error:2492563.592606\n",
      "[29]\teval-error:2463252.454692\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53142035  0.53142035  0.56743985  0.55410379  0.55410379  0.60307884\n",
      "  0.53142035  0.53142035  0.56743985  0.53142035]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53259557  0.53259557  0.56861508  0.55527902  0.55527902  0.60425401\n",
      "  0.53259557  0.53259557  0.56861508  0.53259557]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[30]\teval-error:2431261.280884\n",
      "[31]\teval-error:2404104.053709\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53269392  0.53269392  0.56871349  0.55537736  0.55537736  0.60435241\n",
      "  0.53269392  0.53269392  0.56871349  0.53269392]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53217953  0.53217953  0.56819904  0.55486298  0.55486298  0.60383803\n",
      "  0.53217953  0.53217953  0.56819904  0.53217953]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[32]\teval-error:2380205.766537\n",
      "[33]\teval-error:2357115.680662\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53076887  0.53076887  0.56678843  0.55345237  0.55345237  0.60242736\n",
      "  0.53076887  0.53076887  0.56678843  0.53076887]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52858675  0.52858675  0.56460625  0.55127019  0.55127019  0.60024524\n",
      "  0.52858675  0.52858675  0.56460625  0.52858675]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[34]\teval-error:2339556.350778\n",
      "[35]\teval-error:2318496.125057\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53133154  0.53133154  0.56735104  0.55401498  0.55401498  0.60299003\n",
      "  0.53133154  0.53133154  0.56735104  0.53133154]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53610837  0.53610837  0.57212794  0.55879182  0.55879182  0.60776687\n",
      "  0.53610837  0.53610837  0.57212794  0.53610837]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[36]\teval-error:2303643.099061\n",
      "[37]\teval-error:2283282.358553\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.53316319  0.53316319  0.56918269  0.56613314  0.56613314  0.61510813\n",
      "  0.53316319  0.53316319  0.56918269  0.53316319]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.5317198   0.5317198   0.56773937  0.56468976  0.56468976  0.61366481\n",
      "  0.5317198   0.5317198   0.56773937  0.5317198 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[38]\teval-error:2264864.280870\n",
      "[39]\teval-error:2246873.477452\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52800995  0.52800995  0.56402946  0.56943524  0.56943524  0.61841029\n",
      "  0.52800995  0.52800995  0.56402946  0.52800995]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52390683  0.52390683  0.56707764  0.57540023  0.57540023  0.62145841\n",
      "  0.52390683  0.52390683  0.56707764  0.52390683]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[40]\teval-error:2229550.691686\n",
      "[41]\teval-error:2212853.315610\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52350312  0.52350312  0.56667387  0.57499653  0.57499653  0.62105471\n",
      "  0.52350312  0.52350312  0.56667387  0.52350312]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52168286  0.52168286  0.57139391  0.57317626  0.57317626  0.62577468\n",
      "  0.52168286  0.52168286  0.57139391  0.52168286]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[42]\teval-error:2198104.624806\n",
      "[43]\teval-error:2178811.255248\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52154249  0.52154249  0.57125348  0.5730359   0.5730359   0.62563431\n",
      "  0.52154249  0.52154249  0.57125348  0.52154249]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51970404  0.51970404  0.56941509  0.57119745  0.57119745  0.62379587\n",
      "  0.51970404  0.51970404  0.56941509  0.51970404]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[44]\teval-error:2160262.724898\n",
      "[45]\teval-error:2140359.821153\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51754558  0.51754558  0.56725663  0.56903899  0.56903899  0.6216374\n",
      "  0.51754558  0.51754558  0.56725663  0.51754558]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51848096  0.51848096  0.56819195  0.56997436  0.56997436  0.62257278\n",
      "  0.51848096  0.51848096  0.56819195  0.51848096]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[46]\teval-error:2130671.350072\n",
      "[47]\teval-error:2115732.243252\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.52260751  0.52260751  0.57231855  0.57410091  0.57410091  0.62669933\n",
      "  0.52260751  0.52260751  0.57231855  0.52260751]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.5186125   0.5186125   0.56832349  0.57010591  0.57010591  0.62270427\n",
      "  0.5186125   0.5186125   0.56832349  0.5186125 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[48]\teval-error:2104047.490179\n",
      "[49]\teval-error:2093162.309797\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51795828  0.51795828  0.56766933  0.56945169  0.56945169  0.62205011\n",
      "  0.51795828  0.51795828  0.56766933  0.51795828]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51632845  0.51632845  0.56603944  0.56782186  0.56782186  0.62042022\n",
      "  0.51632845  0.51632845  0.56603944  0.51632845]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[50]\teval-error:2081846.970194\n",
      "[51]\teval-error:2069758.762478\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51617205  0.51617205  0.5658831   0.56766546  0.56766546  0.62026387\n",
      "  0.51617205  0.51617205  0.5658831   0.51617205]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51461178  0.51461178  0.56432277  0.56610519  0.56610519  0.61870354\n",
      "  0.51461178  0.51461178  0.56432277  0.51461178]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[52]\teval-error:2061372.469441\n",
      "[53]\teval-error:2047993.170849\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51390135  0.51390135  0.5636124   0.56539476  0.56539476  0.61799318\n",
      "  0.51390135  0.51390135  0.5636124   0.51390135]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51552993  0.51552993  0.56524098  0.56702334  0.56702334  0.61962175\n",
      "  0.51552993  0.51552993  0.56524098  0.51552993]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[54]\teval-error:2037759.744005\n",
      "[55]\teval-error:2028512.954029\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51383877  0.51383877  0.56354976  0.56533217  0.56533217  0.61793053\n",
      "  0.51383877  0.51383877  0.56354976  0.51383877]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.51123929  0.51123929  0.56095028  0.5627327   0.5627327   0.61533105\n",
      "  0.51123929  0.51123929  0.56095028  0.51123929]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[56]\teval-error:2014782.803313\n",
      "[57]\teval-error:2003431.179837\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50786757  0.50786757  0.56978559  0.56646919  0.56646919  0.62416637\n",
      "  0.50786757  0.50786757  0.56978559  0.50786757]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50719708  0.50719708  0.5691151   0.5657987   0.5657987   0.62349588\n",
      "  0.50719708  0.50719708  0.5691151   0.50719708]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[58]\teval-error:1991254.798403\n",
      "[59]\teval-error:1975736.751184\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50323009  0.50323009  0.56514812  0.56926101  0.56926101  0.62695819\n",
      "  0.50323009  0.50323009  0.56514812  0.50323009]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4994773   0.4994773   0.56139529  0.56550825  0.56550825  0.62320542\n",
      "  0.4994773   0.4994773   0.56139529  0.4994773 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[60]\teval-error:1969505.416872\n",
      "[61]\teval-error:1961419.275178\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50371999  0.50371999  0.56563801  0.56975096  0.56975096  0.62744808\n",
      "  0.50371999  0.50371999  0.56563801  0.50371999]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50554568  0.50554568  0.56746364  0.5715766   0.5715766   0.62927377\n",
      "  0.50554568  0.50554568  0.56746364  0.50554568]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[62]\teval-error:1951426.160691\n",
      "[63]\teval-error:1939784.459033\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50221354  0.50221354  0.5641315   0.57596934  0.57596934  0.63366652\n",
      "  0.50221354  0.50221354  0.5641315   0.50221354]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.50162828  0.50162828  0.5635463   0.57538414  0.57538414  0.63308132\n",
      "  0.50162828  0.50162828  0.5635463   0.50162828]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[64]\teval-error:1930848.837403\n",
      "[65]\teval-error:1930780.370650\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49840388  0.49840388  0.56032187  0.58205956  0.58205956  0.63975668\n",
      "  0.49840388  0.49840388  0.56032187  0.49840388]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49619281  0.49619281  0.58936399  0.57984847  0.57984847  0.6687988\n",
      "  0.49619281  0.49619281  0.58936399  0.49619281]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[66]\teval-error:1924166.695218\n",
      "[67]\teval-error:1915634.297635\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49272481  0.49272481  0.58589602  0.5842765   0.5842765   0.67322689\n",
      "  0.49272481  0.49272481  0.58589602  0.49272481]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4961161   0.4961161   0.58928728  0.58766776  0.58766776  0.67661816\n",
      "  0.4961161   0.4961161   0.58928728  0.4961161 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[68]\teval-error:1909512.176292\n",
      "[69]\teval-error:1904849.394841\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.49178094  0.49178094  0.58495212  0.59146136  0.59146136  0.68041176\n",
      "  0.49178094  0.49178094  0.58495212  0.49178094]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.48754051  0.48754051  0.58071172  0.59573227  0.59573227  0.68468261\n",
      "  0.48754051  0.48754051  0.58071172  0.48754051]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[70]\teval-error:1898808.158397\n",
      "[71]\teval-error:1894943.159893\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4838466   0.4838466   0.57701778  0.60189748  0.60189748  0.69084781\n",
      "  0.4838466   0.4838466   0.57701778  0.4838466 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.48161447  0.48161447  0.58100218  0.59966528  0.59966528  0.69483221\n",
      "  0.48161447  0.48161447  0.58100218  0.48161447]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[72]\teval-error:1887981.600985\n",
      "[73]\teval-error:1882142.902909\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47780406  0.47780406  0.57719177  0.60004359  0.60004359  0.69521046\n",
      "  0.47780406  0.47780406  0.57719177  0.47780406]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47332212  0.47332212  0.57270986  0.59556168  0.59556168  0.69723666\n",
      "  0.47332212  0.47332212  0.57270986  0.47332212]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[74]\teval-error:1879112.506259\n",
      "[75]\teval-error:1877309.439651\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47527963  0.47527963  0.57466733  0.59751916  0.59751916  0.69919419\n",
      "  0.47527963  0.47527963  0.57466733  0.47527963]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47759798  0.47759798  0.57698572  0.59983754  0.59983754  0.70151252\n",
      "  0.47759798  0.47759798  0.57698572  0.47759798]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[76]\teval-error:1874375.997780\n",
      "[77]\teval-error:1873351.770058\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47669932  0.47669932  0.57608706  0.59893888  0.59893888  0.70061386\n",
      "  0.47669932  0.47669932  0.57608706  0.47669932]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47456682  0.47456682  0.57395452  0.59680635  0.59680635  0.69848132\n",
      "  0.47456682  0.47456682  0.57395452  0.47456682]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[78]\teval-error:1870097.707017\n",
      "[79]\teval-error:1865119.293173\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47076714  0.47076714  0.59965599  0.60317296  0.60317296  0.72418284\n",
      "  0.47076714  0.47076714  0.59965599  0.47076714]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47121692  0.47121692  0.62614435  0.60362273  0.60362273  0.75067115\n",
      "  0.47121692  0.47121692  0.62614435  0.47121692]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[80]\teval-error:1860727.392882\n",
      "[81]\teval-error:1856957.905869\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47023582  0.47023582  0.62516326  0.60264164  0.60264164  0.74969006\n",
      "  0.47023582  0.47023582  0.62516326  0.47023582]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46640626  0.46640626  0.62133366  0.60853237  0.60853237  0.75558078\n",
      "  0.46640626  0.46640626  0.62133366  0.46640626]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[82]\teval-error:1852513.577612\n",
      "[83]\teval-error:1852577.021932\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46836281  0.46836281  0.62329024  0.61048895  0.61048895  0.75753736\n",
      "  0.46836281  0.46836281  0.62329024  0.46836281]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47058296  0.47058296  0.62551033  0.61270905  0.61270905  0.75975746\n",
      "  0.47058296  0.47058296  0.62551033  0.47058296]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[84]\teval-error:1850201.963201\n",
      "[85]\teval-error:1845381.938772\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46913505  0.46913505  0.62406248  0.61126119  0.61126119  0.7583096\n",
      "  0.46913505  0.46913505  0.62406248  0.46913505]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46684387  0.46684387  0.62177128  0.60896999  0.60896999  0.7560184\n",
      "  0.46684387  0.46684387  0.62177128  0.46684387]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[86]\teval-error:1846796.720204\n",
      "[87]\teval-error:1844636.964674\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46662328  0.46662328  0.62155068  0.60874939  0.60874939  0.75579774\n",
      "  0.46662328  0.46662328  0.62155068  0.46662328]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4659462   0.4659462   0.62087363  0.60807234  0.60807234  0.75512075\n",
      "  0.4659462   0.4659462   0.62087363  0.4659462 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[88]\teval-error:1844762.893806\n",
      "[89]\teval-error:1843103.869521\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46476054  0.46476054  0.61968797  0.60688668  0.60688668  0.7539351\n",
      "  0.46476054  0.46476054  0.61968797  0.46476054]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46622533  0.46622533  0.62115276  0.60835147  0.60835147  0.75539982\n",
      "  0.46622533  0.46622533  0.62115276  0.46622533]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[90]\teval-error:1842567.937395\n",
      "[91]\teval-error:1840518.122162\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46877471  0.46877471  0.62370217  0.61090088  0.61090088  0.75794923\n",
      "  0.46877471  0.46877471  0.62370217  0.46877471]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46783575  0.46783575  0.62276316  0.60996187  0.60996187  0.75701028\n",
      "  0.46783575  0.46783575  0.62276316  0.46783575]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[92]\teval-error:1837586.097050\n",
      "[93]\teval-error:1835822.196936\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46415147  0.46415147  0.61907887  0.61613417  0.61613417  0.76318252\n",
      "  0.46415147  0.46415147  0.61907887  0.46415147]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46369255  0.46369255  0.61861998  0.61567527  0.61567527  0.76272362\n",
      "  0.46369255  0.46369255  0.61861998  0.46369255]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[94]\teval-error:1833140.971912\n",
      "[95]\teval-error:1834145.192081\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46375355  0.46375355  0.64279556  0.61573625  0.61573625  0.78689921\n",
      "  0.46375355  0.46375355  0.64279556  0.46375355]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46558741  0.46558741  0.64462942  0.6175701   0.6175701   0.78873307\n",
      "  0.46558741  0.46558741  0.64462942  0.46558741]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[96]\teval-error:1836181.600052\n",
      "[97]\teval-error:1836242.970918\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46191818  0.46191818  0.65124822  0.62014014  0.62014014  0.79535186\n",
      "  0.46191818  0.46191818  0.65124822  0.46191818]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45793402  0.45793402  0.647264    0.62385613  0.62385613  0.79906785\n",
      "  0.45793402  0.45793402  0.647264    0.45793402]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[98]\teval-error:1835510.432929\n",
      "[99]\teval-error:1833708.468008\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45808235  0.45808235  0.64741236  0.62400442  0.62400442  0.79921621\n",
      "  0.45808235  0.45808235  0.64741236  0.45808235]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45677638  0.45677638  0.64610642  0.62269849  0.62269849  0.79791027\n",
      "  0.45677638  0.45677638  0.64610642  0.45677638]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[100]\teval-error:1831296.319613\n",
      "[101]\teval-error:1829156.575196\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45387068  0.45387068  0.6432007   0.61979282  0.61979282  0.79500461\n",
      "  0.45387068  0.45387068  0.6432007   0.45387068]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45161694  0.45161694  0.6599189   0.61753905  0.61753905  0.81172282\n",
      "  0.45161694  0.45161694  0.6599189   0.45161694]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[102]\teval-error:1828393.396066\n",
      "[103]\teval-error:1829273.076411\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44920075  0.44920075  0.65750271  0.61512285  0.61512285  0.80930662\n",
      "  0.44920075  0.44920075  0.65750271  0.44920075]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44784814  0.44784814  0.6561501   0.61377025  0.61377025  0.80795395\n",
      "  0.44784814  0.44784814  0.6561501   0.44784814]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[104]\teval-error:1829741.296769\n",
      "[105]\teval-error:1831206.732900\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44560891  0.44560891  0.65391088  0.61153102  0.61153102  0.80571473\n",
      "  0.44560891  0.44560891  0.65391088  0.44560891]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44253048  0.44253048  0.65083247  0.60845256  0.60845256  0.80263638\n",
      "  0.44253048  0.44253048  0.65083247  0.44253048]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[106]\teval-error:1829936.563885\n",
      "[107]\teval-error:1828232.276497\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44223091  0.44223091  0.65053284  0.60815299  0.60815299  0.80233681\n",
      "  0.44223091  0.44223091  0.65053284  0.44223091]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44348505  0.44348505  0.65178704  0.60940713  0.60940713  0.80359089\n",
      "  0.44348505  0.44348505  0.65178704  0.44348505]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[108]\teval-error:1831402.572444\n",
      "[109]\teval-error:1830096.797709\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44207823  0.44207823  0.65038019  0.60800034  0.60800034  0.8021841\n",
      "  0.44207823  0.44207823  0.65038019  0.44207823]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44207543  0.44207543  0.65037739  0.60799754  0.60799754  0.8021813\n",
      "  0.44207543  0.44207543  0.65037739  0.44207543]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[110]\teval-error:1830089.161695\n",
      "[111]\teval-error:1831002.262915\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44166398  0.44166398  0.64996594  0.60758609  0.60758609  0.80176985\n",
      "  0.44166398  0.44166398  0.64996594  0.44166398]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44122961  0.44122961  0.64953154  0.60715169  0.60715169  0.80133545\n",
      "  0.44122961  0.44122961  0.64953154  0.44122961]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[112]\teval-error:1832016.565165\n",
      "[113]\teval-error:1832636.273248\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44154584  0.44154584  0.64984781  0.60746795  0.60746795  0.80165172\n",
      "  0.44154584  0.44154584  0.64984781  0.44154584]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44130811  0.44130811  0.64961004  0.60723019  0.60723019  0.80141401\n",
      "  0.44130811  0.44130811  0.64961004  0.44130811]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[114]\teval-error:1833170.573594\n",
      "[115]\teval-error:1833225.200060\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4423618   0.4423618   0.65066373  0.60828388  0.60828388  0.8024677\n",
      "  0.4423618   0.4423618   0.65066373  0.4423618 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44083419  0.44083419  0.64913619  0.60675627  0.60675627  0.80094004\n",
      "  0.44083419  0.44083419  0.64913619  0.44083419]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[116]\teval-error:1833252.756176\n",
      "[117]\teval-error:1833230.378682\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44176295  0.44176295  0.65006495  0.60768503  0.60768503  0.8018688\n",
      "  0.44176295  0.44176295  0.65006495  0.44176295]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43939477  0.43939477  0.64769673  0.60531688  0.60531688  0.79950064\n",
      "  0.43939477  0.43939477  0.64769673  0.43939477]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[118]\teval-error:1834800.330182\n",
      "[119]\teval-error:1840117.156192\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4372749   0.4372749   0.64557683  0.60319698  0.60319698  0.79738081\n",
      "  0.4372749   0.4372749   0.64557683  0.4372749 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43900362  0.43900362  0.64730561  0.60492569  0.60492569  0.79910946\n",
      "  0.43900362  0.43900362  0.64730561  0.43900362]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[120]\teval-error:1840937.409061\n",
      "[121]\teval-error:1843009.636365\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44018495  0.44018495  0.64848691  0.60610706  0.60610706  0.80029082\n",
      "  0.44018495  0.44018495  0.64848691  0.44018495]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43768114  0.43768114  0.6459831   0.60360324  0.60360324  0.79778701\n",
      "  0.43768114  0.43768114  0.6459831   0.43768114]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[122]\teval-error:1846965.872207\n",
      "[123]\teval-error:1847431.770117\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4355939   0.4355939   0.64389586  0.60151601  0.60151601  0.79569978\n",
      "  0.4355939   0.4355939   0.64389586  0.4355939 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4397957   0.4397957   0.64809763  0.60571778  0.60571778  0.7999016\n",
      "  0.4397957   0.4397957   0.64809763  0.4397957 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[124]\teval-error:1848429.026171\n",
      "[125]\teval-error:1848591.146260\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43895787  0.43895787  0.66600835  0.60487998  0.60487998  0.81781226\n",
      "  0.43895787  0.43895787  0.66600835  0.43895787]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43652976  0.43652976  0.66358018  0.60245186  0.60245186  0.81538415\n",
      "  0.43652976  0.43652976  0.66358018  0.43652976]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[126]\teval-error:1847572.833694\n",
      "[127]\teval-error:1847618.059978\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43742639  0.43742639  0.66447687  0.60334849  0.60334849  0.81628072\n",
      "  0.43742639  0.43742639  0.66447687  0.43742639]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4399412   0.4399412   0.66699171  0.60586333  0.60586333  0.81879556\n",
      "  0.4399412   0.4399412   0.66699171  0.4399412 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[128]\teval-error:1846793.073893\n",
      "[129]\teval-error:1847417.042380\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44070423  0.44070423  0.66775465  0.60662633  0.60662633  0.81955856\n",
      "  0.44070423  0.44070423  0.66775465  0.44070423]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44072926  0.44072926  0.66777974  0.60665137  0.60665137  0.81958359\n",
      "  0.44072926  0.44072926  0.66777974  0.44072926]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[130]\teval-error:1851956.499480\n",
      "[131]\teval-error:1852673.415600\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44207403  0.44207403  0.66912448  0.60799617  0.60799617  0.82092834\n",
      "  0.44207403  0.44207403  0.66912448  0.44207403]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44058838  0.44058838  0.66763884  0.60651052  0.60651052  0.81944275\n",
      "  0.44058838  0.44058838  0.66763884  0.44058838]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[132]\teval-error:1849958.200880\n",
      "[133]\teval-error:1851039.851861\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43641886  0.43641886  0.66346931  0.60234094  0.60234094  0.81527317\n",
      "  0.43641886  0.43641886  0.66346931  0.43641886]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43689498  0.43689498  0.66394544  0.60281712  0.60281712  0.81574935\n",
      "  0.43689498  0.43689498  0.66394544  0.43689498]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[134]\teval-error:1851748.843389\n",
      "[135]\teval-error:1851811.138184\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44122458  0.44122458  0.668275    0.60714668  0.60714668  0.82007891\n",
      "  0.44122458  0.44122458  0.668275    0.44122458]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44257778  0.44257778  0.66962826  0.60849988  0.60849988  0.82143211\n",
      "  0.44257778  0.44257778  0.66962826  0.44257778]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[136]\teval-error:1851168.561350\n",
      "[137]\teval-error:1851087.162577\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44168293  0.44168293  0.68598324  0.60760504  0.60760504  0.83778715\n",
      "  0.44168293  0.44168293  0.68598324  0.44168293]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43760782  0.43760782  0.68190813  0.60697079  0.60697079  0.83715284\n",
      "  0.43760782  0.43760782  0.68190813  0.43760782]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[138]\teval-error:1852864.946925\n",
      "[139]\teval-error:1852898.577335\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43467796  0.43467796  0.6789782   0.60404086  0.60404086  0.83422291\n",
      "  0.43467796  0.43467796  0.6789782   0.43467796]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43587017  0.43587017  0.68017048  0.60523307  0.60523307  0.83541512\n",
      "  0.43587017  0.43587017  0.68017048  0.43587017]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[140]\teval-error:1855348.656524\n",
      "[141]\teval-error:1855497.441630\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43663383  0.43663383  0.68093407  0.60599673  0.60599673  0.83617878\n",
      "  0.43663383  0.43663383  0.68093407  0.43663383]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4366782   0.4366782   0.68097848  0.60604113  0.60604113  0.83622324\n",
      "  0.4366782   0.4366782   0.68097848  0.4366782 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[142]\teval-error:1854908.366202\n",
      "[143]\teval-error:1855095.436450\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43912166  0.43912166  0.68342197  0.60848457  0.60848457  0.83866668\n",
      "  0.43912166  0.43912166  0.68342197  0.43912166]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43455157  0.43455157  0.67885184  0.6039145   0.6039145   0.83409655\n",
      "  0.43455157  0.43455157  0.67885184  0.43455157]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[144]\teval-error:1854324.405964\n",
      "[145]\teval-error:1855338.952085\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43512237  0.43512237  0.67942262  0.60448527  0.60448527  0.83466738\n",
      "  0.43512237  0.43512237  0.67942262  0.43512237]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43616033  0.43616033  0.68046057  0.60552323  0.60552323  0.83570534\n",
      "  0.43616033  0.43616033  0.68046057  0.43616033]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[146]\teval-error:1855065.176725\n",
      "[147]\teval-error:1856420.890377\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43532088  0.43532088  0.67962116  0.60468382  0.60468382  0.83486593\n",
      "  0.43532088  0.43532088  0.67962116  0.43532088]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43549421  0.43549421  0.70552605  0.60485715  0.60485715  0.86077082\n",
      "  0.43549421  0.43549421  0.70552605  0.43549421]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[148]\teval-error:1857722.138682\n",
      "[149]\teval-error:1859744.211627\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43595222  0.43595222  0.70598406  0.60531515  0.60531515  0.86122882\n",
      "  0.43595222  0.43595222  0.70598406  0.43595222]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43686116  0.43686116  0.70689303  0.60622406  0.60622406  0.86213779\n",
      "  0.43686116  0.43686116  0.70689303  0.43686116]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[150]\teval-error:1860251.029453\n",
      "[151]\teval-error:1858320.754186\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43651527  0.43651527  0.70654714  0.60587817  0.60587817  0.86179185\n",
      "  0.43651527  0.43651527  0.70654714  0.43651527]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43593448  0.43593448  0.70596635  0.60529739  0.60529739  0.86121106\n",
      "  0.43593448  0.43593448  0.70596635  0.43593448]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[152]\teval-error:1858021.423916\n",
      "[153]\teval-error:1859214.466550\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43762028  0.43762028  0.70765215  0.60698318  0.60698318  0.86289692\n",
      "  0.43762028  0.43762028  0.70765215  0.43762028]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44016552  0.44016552  0.71019739  0.60952842  0.60952842  0.8654421\n",
      "  0.44016552  0.44016552  0.71019739  0.44016552]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[154]\teval-error:1857534.044041\n",
      "[155]\teval-error:1857804.335000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43573308  0.43573308  0.70576495  0.60509598  0.60509598  0.86100972\n",
      "  0.43573308  0.43573308  0.70576495  0.43573308]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43641049  0.43641049  0.70644236  0.60577345  0.60577345  0.86168706\n",
      "  0.43641049  0.43641049  0.70644236  0.43641049]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[156]\teval-error:1857106.501109\n",
      "[157]\teval-error:1856445.448913\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43316317  0.43316317  0.70319504  0.60252607  0.60252607  0.8584398\n",
      "  0.43316317  0.43316317  0.70319504  0.43316317]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4301455   0.4301455   0.70017731  0.5995084   0.5995084   0.85542214\n",
      "  0.4301455   0.4301455   0.70017731  0.4301455 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[158]\teval-error:1856309.880042\n",
      "[159]\teval-error:1857330.756388\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42935911  0.42935911  0.69939095  0.59872204  0.59872204  0.85463572\n",
      "  0.42935911  0.42935911  0.69939095  0.42935911]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43068981  0.43068981  0.70072168  0.60005277  0.60005277  0.85596645\n",
      "  0.43068981  0.43068981  0.70072168  0.43068981]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[160]\teval-error:1857531.041956\n",
      "[161]\teval-error:1859704.357187\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43053365  0.43053365  0.70056552  0.59989655  0.59989655  0.85581028\n",
      "  0.43053365  0.43053365  0.70056552  0.43053365]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.43167859  0.43167859  0.70171046  0.6010415   0.6010415   0.85695517\n",
      "  0.43167859  0.43167859  0.70171046  0.43167859]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[162]\teval-error:1860168.434230\n",
      "[163]\teval-error:1860535.099428\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42863145  0.42863145  0.69866329  0.59799439  0.59799439  0.85390806\n",
      "  0.42863145  0.42863145  0.69866329  0.42863145]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42557645  0.42557645  0.69560826  0.59493935  0.59493935  0.85085309\n",
      "  0.42557645  0.42557645  0.69560826  0.42557645]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[164]\teval-error:1861286.272576\n",
      "[165]\teval-error:1861729.413615\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42257363  0.42257363  0.6926055   0.59193653  0.59193653  0.8478502\n",
      "  0.42257363  0.42257363  0.6926055   0.42257363]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42195827  0.42195827  0.71025217  0.59132123  0.59132123  0.86549687\n",
      "  0.42195827  0.42195827  0.71025217  0.42195827]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[166]\teval-error:1862776.340456\n",
      "[167]\teval-error:1863163.971742\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42282999  0.42282999  0.71112382  0.59219289  0.59219289  0.86636859\n",
      "  0.42282999  0.42282999  0.71112382  0.42282999]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42260212  0.42260212  0.71089596  0.59196502  0.59196502  0.86614072\n",
      "  0.42260212  0.42260212  0.71089596  0.42260212]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[168]\teval-error:1867939.028596\n",
      "[169]\teval-error:1866570.478265\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42550582  0.42550582  0.71379966  0.59486878  0.59486878  0.86904442\n",
      "  0.42550582  0.42550582  0.71379966  0.42550582]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42073739  0.42073739  0.70903122  0.59010035  0.59010035  0.86427605\n",
      "  0.42073739  0.42073739  0.70903122  0.42073739]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[170]\teval-error:1866271.976111\n",
      "[171]\teval-error:1866765.692042\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.42046103  0.42046103  0.7087549   0.58982396  0.58982396  0.86399966\n",
      "  0.42046103  0.42046103  0.7087549   0.42046103]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41752186  0.41752186  0.70581573  0.5868848   0.5868848   0.8610605\n",
      "  0.41752186  0.41752186  0.70581573  0.41752186]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[172]\teval-error:1865523.602637\n",
      "[173]\teval-error:1864250.628865\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41746515  0.41746515  0.70575905  0.58682811  0.58682811  0.86100382\n",
      "  0.41746515  0.41746515  0.70575905  0.41746515]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41289893  0.41289893  0.7011928   0.58226186  0.58226186  0.85643756\n",
      "  0.41289893  0.41289893  0.7011928   0.41289893]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[174]\teval-error:1862813.493377\n",
      "[175]\teval-error:1865536.878122\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41360313  0.41360313  0.70189703  0.58296609  0.58296609  0.85714179\n",
      "  0.41360313  0.41360313  0.70189703  0.41360313]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41585428  0.41585428  0.70414811  0.58521724  0.58521724  0.85939294\n",
      "  0.41585428  0.41585428  0.70414811  0.41585428]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[176]\teval-error:1865717.692600\n",
      "[177]\teval-error:1866837.166901\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41666761  0.41666761  0.70496148  0.58603054  0.58603054  0.86020625\n",
      "  0.41666761  0.41666761  0.70496148  0.41666761]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41813934  0.41813934  0.70643318  0.58750224  0.58750224  0.861678\n",
      "  0.41813934  0.41813934  0.70643318  0.41813934]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[178]\teval-error:1868293.942733\n",
      "[179]\teval-error:1868313.455308\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41705129  0.41705129  0.70534515  0.58641422  0.58641422  0.86058998\n",
      "  0.41705129  0.41705129  0.70534515  0.41705129]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41217002  0.41217002  0.70046389  0.58153296  0.58153296  0.85570866\n",
      "  0.41217002  0.41217002  0.70046389  0.41217002]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[180]\teval-error:1869228.507412\n",
      "[181]\teval-error:1870578.600899\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4111104   0.4111104   0.69940424  0.5804733   0.5804733   0.85464907\n",
      "  0.4111104   0.4111104   0.69940424  0.4111104 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4121595   0.4121595   0.70045334  0.58152241  0.58152241  0.85569811\n",
      "  0.4121595   0.4121595   0.70045334  0.4121595 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[182]\teval-error:1871738.481424\n",
      "[183]\teval-error:1871061.750123\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41732669  0.41732669  0.70562053  0.58668959  0.58668959  0.86086535\n",
      "  0.41732669  0.41732669  0.70562053  0.41732669]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41413379  0.41413379  0.70242763  0.58349669  0.58349669  0.85767245\n",
      "  0.41413379  0.41413379  0.70242763  0.41413379]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[184]\teval-error:1870921.391658\n",
      "[185]\teval-error:1872025.574493\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41490617  0.41490617  0.70319998  0.58426911  0.58426911  0.85844481\n",
      "  0.41490617  0.41490617  0.70319998  0.41490617]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41393721  0.41393721  0.70223105  0.58330017  0.58330017  0.85747588\n",
      "  0.41393721  0.41393721  0.70223105  0.41393721]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[186]\teval-error:1872431.773226\n",
      "[187]\teval-error:1872924.078416\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41482788  0.41482788  0.70312172  0.58419079  0.58419079  0.85836649\n",
      "  0.41482788  0.41482788  0.70312172  0.41482788]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41511047  0.41511047  0.70340431  0.58447337  0.58447337  0.85864913\n",
      "  0.41511047  0.41511047  0.70340431  0.41511047]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[188]\teval-error:1874239.072594\n",
      "[189]\teval-error:1874944.571377\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41445291  0.41445291  0.70274675  0.58381581  0.58381581  0.85799158\n",
      "  0.41445291  0.41445291  0.70274675  0.41445291]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40946922  0.40946922  0.69776309  0.57883215  0.57883215  0.85300785\n",
      "  0.40946922  0.40946922  0.69776309  0.40946922]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[190]\teval-error:1874408.362669\n",
      "[191]\teval-error:1874813.754021\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40441823  0.40441823  0.69271207  0.57378113  0.57378113  0.8479569\n",
      "  0.40441823  0.40441823  0.69271207  0.40441823]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40569496  0.40569496  0.6939888   0.57505786  0.57505786  0.84923363\n",
      "  0.40569496  0.40569496  0.6939888   0.40569496]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[192]\teval-error:1874000.591462\n",
      "[193]\teval-error:1873289.347150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40446201  0.40446201  0.69275582  0.57382494  0.57382494  0.84800065\n",
      "  0.40446201  0.40446201  0.69275582  0.40446201]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40489128  0.40489128  0.69318509  0.57425421  0.57425421  0.84842992\n",
      "  0.40489128  0.40489128  0.69318509  0.40489128]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[194]\teval-error:1874276.426456\n",
      "[195]\teval-error:1874754.895683\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40746748  0.40746748  0.69576132  0.57683039  0.57683039  0.85100615\n",
      "  0.40746748  0.40746748  0.69576132  0.40746748]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40849501  0.40849501  0.69678885  0.57785797  0.57785797  0.85203373\n",
      "  0.40849501  0.40849501  0.69678885  0.40849501]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[196]\teval-error:1874112.622916\n",
      "[197]\teval-error:1874911.662250\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40713131  0.40713131  0.69542515  0.57649422  0.57649422  0.85066998\n",
      "  0.40713131  0.40713131  0.69542515  0.40713131]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4070026   0.4070026   0.69529641  0.57636553  0.57636553  0.85054129\n",
      "  0.4070026   0.4070026   0.69529641  0.4070026 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[198]\teval-error:1875372.635750\n",
      "[199]\teval-error:1875370.740464\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41273296  0.41273296  0.7010268   0.58209592  0.58209592  0.85627162\n",
      "  0.41273296  0.41273296  0.7010268   0.41273296]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n"
     ]
    }
   ],
   "source": [
    "model = XGBoost(X_train, y_train, X_test, y_test, cost_infos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##6.3 模型评估\n",
    "\n",
    "特征重要性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['f0: item_id', 'f1: store_code', 'f2: special_day_max', 'f3: cate_level_id_median', 'f4: cate_id_median', 'f5: brand_id_median', 'f6: supplier_id_median', 'f7: month_max', 'f8: month_min', 'f9: special_day_1111_max', 'f10: special_day_1212_max', 'f11: special_day_0909_max', 'f12: special_day_0415_max', 'f13: special_day_0925_max', 'f14: special_day_0616_max', 'f15: item_id_month_median_mean', 'f16: item_id_median_mean', 'f17: item_id_0_median_mean', 'f18: item_id_1_median_mean', 'f19: item_id_2_median_mean', 'f20: item_id_3_median_mean', 'f21: item_id_4_median_mean', 'f22: item_id_5_median_mean', 'f23: qty_alipay_njhs_cumsum_shift_1', 'f24: qty_alipay_njhs_cumsum_shift_2', 'f25: qty_alipay_njhs_cumsum_shift_3', 'f26: qty_alipay_njhs_cumsum_shift_4', 'f27: qty_alipay_jhs_sum_shift_1', 'f28: qty_alipay_jhs_sum_shift_2', 'f29: qty_alipay_jhs_sum_shift_3', 'f30: qty_alipay_jhs_sum_shift_4', 'f31: pv_ipv_mean_shift_1', 'f32: pv_ipv_mean_shift_2', 'f33: pv_ipv_mean_shift_3', 'f34: pv_ipv_mean_shift_4', 'f35: qty_alipay_jhs_sum_shift_1', 'f36: qty_alipay_jhs_sum_shift_2', 'f37: qty_alipay_jhs_sum_shift_3', 'f38: qty_alipay_jhs_sum_shift_4', 'f39: cart_ipv_mean_shift_1', 'f40: cart_ipv_mean_shift_2', 'f41: cart_ipv_mean_shift_3', 'f42: cart_ipv_mean_shift_4', 'f43: pv_ipv_mean_shift_1', 'f44: pv_ipv_mean_shift_2', 'f45: pv_ipv_mean_shift_3', 'f46: pv_ipv_mean_shift_4', 'f47: qty_alipay_njhs_median_shift_1', 'f48: qty_alipay_njhs_median_shift_2', 'f49: qty_alipay_njhs_median_shift_3', 'f50: qty_alipay_njhs_median_shift_4', 'f51: qty_alipay_njhs_sum_shift_1', 'f52: qty_alipay_njhs_sum_shift_2', 'f53: qty_alipay_njhs_sum_shift_3', 'f54: qty_alipay_njhs_sum_shift_4']\n"
     ]
    }
   ],
   "source": [
    "print [\"f\"+str(i) +\": \" + val for i, val in enumerate(feature_cols)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "importance = model.bst.get_fscore()\n",
    "importance = sorted(importance.items(),key=lambda x: x[1],reverse=True)\n",
    "tempdf = pd.DataFrame(importance,columns=[\"feature\",\"fscore\"])\n",
    "plt.figure()\n",
    "tempdf.plot(kind=\"barh\",x=\"feature\",y=\"fscore\",legend=False,figsize=(10,10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121d39890>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\naU4I1NLmhKZoUgAAIHw4fEFOnz355JNavXq1fvzjH+uDDz6QJI0ZM0YfffSRLRO8FVb0N+NTjhm5\nmJGLGbkEIhMzcjEjF7PWPOPmbMlBPXrcvPXGPffc02oTAAAAQMsEXbjFxsaqpqbG//2BAwfUuXPn\nFr+Bx+PRmDFjlJ+fL0kqKytTSkqKPv74Y0nSyZMn9eyzz2rs2LF64okn5PF4bvdvAAAAiAi3vMft\nr3/9q771rW/p9ddf18svv6yvvvpKzzzzjP7617/qnXfeafEbNLYnuN1ueb1eLV++XMOHD/c/4OBy\nuTRv3jwNHDhQFy5c0JNPPqlHHnlEiYmJd//XAQAAtCO3XLjl5ubqt7/9rVasWKH3339ff/jDHyRJ\nQ4YMafEZtxvbE7KysiRJo0eP1pEjR/zHdO/eXd27d5ckxcTEKDExUadOnWp24UblVSAqrwAAaP9u\nuXC7dOmSiouLVVVVpT/84Q/+M2SHDx+WpJvaD27lxvaEy5cvKy8vTx6PR/PmzZPD4Qg4vrKyUp99\n9pkGDRrU7LhUXrUOKq8AAAgvzZ5x27hxo7755hutWbMm4OctWbg18vl8Wrx4sfLy8vxbhDR9mPXC\nhQvKycnR/PnzFRMT0+x4VF4BAIBIdMuFW0ZGhjIyMrRkyRLNmzfvrt+ovLxcs2bNkiSdOXNGpaWl\ncrlcSk9P19WrV5WTk6PMzExlZGTc9Xuh5WhOiFzkYkYugcjEjFzMyMVaQTfgbY1Fm8Ph0K5du/zf\nz507VyNHjlR6erp8Pp/mz5+vxMRETZky5a7fC7eH5oTIRC5m5BKITMzIxYxczGxtTrhbpnvZbvT7\n3/9eW7du1f333++v1MrNzdWIESNu+TtUXrUOcgQAILwEbU4IRTxVGuhuKq/a81OlfPozIxczcglE\nJmbkYkYuZmF1xs0KycnJ/IfRBP+zAADQ/rWo8goAAABtz9Izbh6PRxs3blRtba169uwpp9Mpp9Op\n/Px8DR06VJJUWlqqJUuWqKGhQdnZ2frxj39s5ZQAAADClqULt8a6q7i4OEVHR0uSjh07punTp2vH\njh3yer1atGiR1q5dK7fbrezsbKWnpwetu+Iet0B32pzQqL3f6wYAQHtg2cKtad1V41Yf9fX1SkhI\nkHS9cL5v377q3bu3JGns2LHatWtX0IUbzQmtiwYFAADCg2ULtxvrruLj47Vz506tWLFCNTU1Kiws\n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\ntL4cmpGRoUAgoGnTpikuLk7r168P+VyaE+y8sBN+d5CLGbmYkYsdmZiRi1lvyCXaW1NoTogS7FZt\nRi5m5GJGLnZkYkYuZuRiRnMCAACAB7n2ihsAAIDXcMUNAADAJRjcAAAAXILBDQAAwCUY3AAAAFyC\nwQ0AAMAlGNwAAABcwlWDW0VFhR588EFlZ2dry5YtTp9OxE2dOlWzZ89WXl6eCgoKJEm1tbVauHCh\npk+frkWLFuny5cvBx7/yyivKzs7Wgw8+qAMHDjh12j2qpKRE999/v2bPnh38XHcyOHbsmGbPnq3s\n7Gz99Kc/jej3EA6mXF566SVNnjxZeXl5ysvLUyAQCH7NK7l88sknmj9/vnJycjRr1iz5/X5J3l4z\n7WXi9fVy/fp1FRYWas6cOZo5c6ZeeOEFSd5eK1L7uXh9vbRqbm5WXl6efvCDH0iK0HqxXKKpqcnK\nysqyTp8+bTU0NFi5ubnWBx984PRpRdSUKVOsS5cu3fK5DRs2WFu2bLEsy7JeeeUVa+PGjZZlWdY/\n//lPKzc312poaLBOnz5tZWVlWc3NzRE/55727rvvWlVVVdasWbOCn+tKBi0tLZZlWVZ+fr519OhR\ny7Isa/HixVYgEIjwd9KzTLm89NJLVmlpqe2xXsqlpqbGOn78uGVZllVXV2dlZ2dbH3zwgafXTHuZ\nsF4sq76+3rIsy2psbLQKCwutd99919NrpZUpF9bLDaWlpdayZcus73//+5ZlReb/R6654lZZWalR\no0Zp5MiR6tu3r3JyclReXu70aUWc1Wa/5P3792vu3LmSpLlz52rfvn2SpPLycuXk5Khv374aOXKk\nRo0apcrKyoifb09LT0/X4MGDb/lcVzI4evSoampqdOXKFY0fP16SlJeXF3yOW5lykezrRfJWLsOH\nD9fYsWMlSQMHDtSYMWP06aefenrNtJeJxHqJi4uTJDU2Nqq5uVl33HGHp9dKK1MuEuulurpagUBA\nhYWFwc9FYr24ZnD79NNPNWLEiODHSUlJwR82XuHz+bRw4UJ985vf1I4dOyRJFy5c0LBhwyRJw4YN\n04ULFyRJNTU1Sk5ODj43OTk5avPqagZtP5+UlKSamprInnSEbN26Vbm5uVq5cmXwkr1Xczlz5oze\nf/99jR8/njXz/1ozmTBhgiTWS0tLi+bMmaP7779f9913n774xS+yVmTORWK9/OxnP9NTTz2lmJj/\njVKRWC+uGdx8Pp/Tp+C4bdu2adeuXXr11Vf1u9/9TkeOHLnl6z6fr8OcvJBhqAy85KGHHlJ5ebl2\n796t4cOH67nnnnP6lBxz5coVFRUVadWqVYqPj7/la15dMzdnMnDgQNaLpJiYGO3evVsVFRU6cuSI\nDh06dMvXvbpW2ubyzjvveH69vPXWW0pMTFRaWprxyqMUvvXimsEtKSlJn3zySfDj6upqJSUlOXhG\nkXfnnXdKkhISEjRt2jRVVlYqMTFR586dk3Rjok9ISJB0I6/q6urgc6M5r65kkJycbPx8a7bRJDEx\nMfiDo7CwUH//+98leS+XxsZGFRUVKTc3V1lZWZJYM+1lwnq5YdCgQcrIyFBVVZXn18rNWnM5duyY\n59fL3/72N+3fv19Tp07Vk08+qUOHDqm4uDgi68U1g9s999yjU6dO6cyZM2poaNCf/vQnZWZmOn1a\nEXP16lXV1dVJkurr63XgwAGlpqZq6tSp+sMf/iBJ2rVrV/CH8NSpU7Vnzx41NDTo9OnTOnXqVPA1\n9GjT1QyGDx+u+Ph4HT16VJZlaffu3cHnRJObL7fv27dPqampkryVi2VZWrVqlcaMGaNHHnkk+Hkv\nr5n2MvH6erl48WLw5b5r167p4MGDSktL8/RakdrPpXU4kby5XpYtW6ZAIKD9+/dr06ZN+sY3vqGN\nGzdGZL3Ehv276yGxsbFavXq1Hn30UbW0tKigoEBjxoxx+rQi5vz581qyZImkG7cfz549Ww888IDu\nuece/ehHP9Lrr7+uz33uc3rxxRclSSkpKZoxY4ZycnLUp08frVmzJiou8S9btkyHDx9WbW2tMjIy\nVFRUpO9973tdzmDNmjUqKSnRtWvXlJGRocmTJzv5bd22trk88cQTOnz4sN5//335fD6NHDlSP/nJ\nTyR5K5e//vWv+uMf/6gvfelLysvLk3QjKy+vGVMmS5cu1Z49ezy9Xs6dO6enn35aLS0twfd0TZw4\nUWPHjvXsWpHaz+Wpp57y9HppTyR+tvis9l6cBQAAQK/impdKAQAAvI7BDQAAwCUY3AAAAFyCwQ0A\nAMAlGNwAAABcgsENAADAJRjcAAAAXILBDQAAwCX+D3d/UjAcphgVAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x121b4d390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###真实值做预测"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "总损失(真实特征): 1680024.36958\n"
     ]
    }
   ],
   "source": [
    "y_predict = model.predict(X_test)\n",
    "\n",
    "count = 0\n",
    "totol_cost = 0\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "for i in range(item_size):\n",
    "    for j in range(store_code_size):\n",
    "        x = X_test[count]\n",
    "        a = cost_a_test[count]\n",
    "        b = cost_b_test[count]\n",
    "        y_pred = np.array(y_predict[count::(item_size * store_code_size)])\n",
    "        y_true = np.array(y_test[count::(item_size * store_code_size)])\n",
    "        totol_cost += get_item_cost(y_pred, y_true, a, b)\n",
    "        count += 1\n",
    "print \"总损失(真实特征): \" + str(totol_cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###预测值做预测\n",
    "\n",
    "- 仅仅对X_test的最后四列修改，即qty_alipay_njhs_sum_shift_i\n",
    "- 其他shift的值不改\n",
    "- cumsum增加"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "def predict_by_predict(X_test):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    \n",
    "    ##第二周\n",
    "    week = 1\n",
    "    start = week*pred_size\n",
    "    end = (week+1)*pred_size\n",
    "    for i in range(start,end,1):\n",
    "        X[i][23] = X[i-week*pred_size][23]+y_predict[i-week*pred_size]\n",
    "        X[i][24] = X[i-week*pred_size][24]+y_predict[i-week*pred_size]\n",
    "        X[i][25] = X[i-week*pred_size][25]+y_predict[i-week*pred_size]\n",
    "        X[i][26] = X[i-week*pred_size][26]+y_predict[i-week*pred_size]\n",
    "        X[i][-1] = X[i][-2]\n",
    "        X[i][-2] = X[i][-3]\n",
    "        X[i][-3] = X[i][-4]\n",
    "        X[i][-4] = y_predict[i-week*pred_size]\n",
    "    X_one_week = X[week * pred_size : (week+1)*pred_size]\n",
    "    y_pred_one_week = model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "总损失(预测特征): 1630327.68818\n"
     ]
    }
   ],
   "source": [
    "y_predict = predict_by_predict(X_test)\n",
    "\n",
    "\n",
    "item_id_list = [int(val) for val in les[0].inverse_transform(X_test[:, 0])]\n",
    "store_code_list = [int(val) for val in les[1].inverse_transform(X_test[:, 1])]\n",
    "\n",
    "y_pred_list = []\n",
    "y_true_list = []\n",
    "cost_list = []\n",
    "count = 0\n",
    "totol_cost = 0\n",
    "for i in range(item_size):\n",
    "    for j in range(store_code_size):\n",
    "        x = X_test[count]\n",
    "        item_id = item_id_list[count]\n",
    "        store_code = store_code_list[count]\n",
    "        a = cost_a_test[count]\n",
    "        b = cost_b_test[count]\n",
    "        y_pred = np.array(y_predict[count::(item_size * store_code_size)])\n",
    "        y_true = np.array(y_test[count::(item_size * store_code_size)])\n",
    "        cost = get_item_cost(y_pred, y_true, a, b)\n",
    "        y_pred_list.append(np.sum(y_pred))\n",
    "        y_true_list.append(np.sum(y_true))\n",
    "        cost_list.append(cost)\n",
    "        totol_cost += cost\n",
    "        count += 1\n",
    "print \"总损失(预测特征): \" + str(totol_cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##7 代码测试"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">a</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a   \n",
       "   b  c\n",
       "0  1  2\n",
       "1  3  4"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = pd.MultiIndex.from_tuples([(\"a\", \"b\"), (\"a\", \"c\")])\n",
    "df = pd.DataFrame([[1,2], [3,4]], columns=cols)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultiIndex(levels=[[u'a'], [u'b', u'c']],\n",
       "           labels=[[0, 0], [0, 1]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df.columns=[\"a\",\"b\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a  b\n",
       "0  1  2\n",
       "1  3  4"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#8 xgboost调试程序"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##8.1 数据预处理"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 817,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "feature_cols = [\"item_id\",\"store_code\",\"special_day_max\", \"cate_level_id_median\", \"cate_id_median\", \"brand_id_median\",\n",
    "                \"supplier_id_median\",\"month_max\",\"month_min\",\n",
    "\"special_day_1111_max\",\"special_day_1212_max\",\"special_day_0616_max\",\\\n",
    "\"item_id_month_median_mean\",\"item_id_median_mean\",\n",
    "\"item_id_0_median_mean\",\"item_id_1_median_mean\",\"item_id_2_median_mean\",\"item_id_3_median_mean\",\"item_id_4_median_mean\",\"item_id_5_median_mean\",\n",
    "\"qty_alipay_njhs_endsum_2\",\"qty_alipay_njhs_endsum_3\",\"qty_alipay_njhs_endsum_4\",\n",
    "\"qty_alipay_njhs_cumsum_shift_1\",\"qty_alipay_njhs_cumsum_shift_2\",\"qty_alipay_njhs_cumsum_shift_3\",\"qty_alipay_njhs_cumsum_shift_4\",\n",
    "'qty_alipay_jhs_sum_shift_1','qty_alipay_jhs_sum_shift_2','qty_alipay_jhs_sum_shift_3','qty_alipay_jhs_sum_shift_4',\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2','pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\n",
    "'cart_ipv_mean_shift_1','cart_ipv_mean_shift_2','cart_ipv_mean_shift_3','cart_ipv_mean_shift_4',\\\n",
    "'pv_ipv_mean_shift_1', 'pv_ipv_mean_shift_2', 'pv_ipv_mean_shift_3','pv_ipv_mean_shift_4',\\\n",
    "'qty_alipay_njhs_median_shift_1', 'qty_alipay_njhs_median_shift_2', 'qty_alipay_njhs_median_shift_3', 'qty_alipay_njhs_median_shift_4', \n",
    "\"qty_alipay_njhs_sum_shift_1\",\"qty_alipay_njhs_sum_shift_2\",\"qty_alipay_njhs_sum_shift_3\",\"qty_alipay_njhs_sum_shift_4\"]\n",
    "\n",
    "\n",
    "\n",
    "target_cols = [\"qty_alipay_njhs_sum\"]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 818,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def prep_data(data, input_cols):\n",
    "    X = data[input_cols].as_matrix()\n",
    "    y_value = data['qty_alipay_njhs_sum'].as_matrix()\n",
    "    y_df = data[[\"item_id\",\"store_code\",\"qty_alipay_njhs_sum\"]]\n",
    "    return X, y_value, y_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 819,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200664, 74)\n",
      "(189108, 74)\n",
      "(11556, 74)\n"
     ]
    }
   ],
   "source": [
    "data = item_all_week_train.copy()\n",
    "cutoff_day = 61\n",
    "\n",
    "train = data[data.startweek <= cutoff_day]\n",
    "test = data[data.startweek > cutoff_day]\n",
    "print data.shape\n",
    "print train.shape\n",
    "print test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Python/2.7/site-packages/IPython/kernel/__main__.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    }
   ],
   "source": [
    "test.sort_index(by=[\"startweek\",\"item_id\",\"store_code\"],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "963 (11556, 74)\n",
      "(189108, 55)\n",
      "(11556, 55)\n"
     ]
    }
   ],
   "source": [
    "print len(test.item_id.unique()),test.shape\n",
    "X_all,y_all,y_all_df = prep_data(data,feature_cols)\n",
    "X_train, y_train, y_train_df = prep_data(train, feature_cols)\n",
    "X_test, y_test, y_test_df = prep_data(test, feature_cols)\n",
    "print X_train.shape\n",
    "print X_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 805,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "item_size = 963\n",
    "store_code_size = 6\n",
    "pred_size = item_size * 6\n",
    "start = 1*pred_size\n",
    "end = 2*pred_size\n",
    "myshape = X_test.shape[1]\n",
    "for i in range(start,end,1):\n",
    "    for j in range(20,myshape,1):\n",
    "        X_test[i][j] = X_test[i-pred_size][j]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 806,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "from sklearn import preprocessing\n",
    "\n",
    "les = []\n",
    "category_feature_len = 9\n",
    "for col in range(category_feature_len):\n",
    "    le = preprocessing.LabelEncoder()\n",
    "    le.fit(X_all[:, col])\n",
    "    les.append(le)\n",
    "    X_train[:, col] = le.transform(X_train[:, col])\n",
    "    X_test[:, col] = le.transform(X_test[:, col])\n",
    "    \n",
    "X_train = X_train.astype(int)\n",
    "X_test = X_test.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 807,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training size: 189108\n",
      "test size: 11556\n",
      "feature size: 55\n"
     ]
    }
   ],
   "source": [
    "print \"training size: \" + str(len(X_train))\n",
    "print \"test size: \" + str(len(X_test))\n",
    "print \"feature size: \" + str(len(X_train[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##8.2 Xgboost模型"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 808,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "cost_a_train, cost_b_train = prepare_cost(X_train, config, les)\n",
    "cost_a_test, cost_b_test = prepare_cost(X_test, config, les)\n",
    "cost_infos = [cost_a_train, cost_b_train,  cost_a_test, cost_b_test]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 809,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "class XGBoost(object):  \n",
    "    \n",
    "    def __init__(self, X_train, y_train, X_val, y_val, cost_infos):\n",
    "\n",
    "        self.cost_a_train = cost_infos[0]\n",
    "        self.cost_b_train = cost_infos[1]\n",
    "        self.cost_a_val = cost_infos[2]\n",
    "        self.cost_b_val = cost_infos[3]\n",
    "\n",
    "        dtrain = xgb.DMatrix(X_train, label = y_train)\n",
    "        dval = xgb.DMatrix(X_val, label = y_val)\n",
    "        evallist = [(dval,'eval')]\n",
    "        param = {'nthread': -1,\n",
    "                 'max_depth': 13,\n",
    "                 'eta': 0.03,\n",
    "                 'silent': 1,\n",
    "                 'colsample_bytree': 0.8,\n",
    "                 \"min_child_weight\":8,\n",
    "                 \"lambda\": 5,\n",
    "                 'subsample': 0.8}\n",
    "        num_round = 55\n",
    "        \n",
    "        def obj(y_pred, dtrain):\n",
    "            y_true = dtrain.get_label()\n",
    "            print '----'\n",
    "            print y_true[0:10]\n",
    "            print y_pred[0:10]\n",
    "            print self.cost_a_train[0:10]\n",
    "            print self.cost_b_train[0:10]\n",
    "            print '----'\n",
    "            \n",
    "            y_delta = (y_pred - y_true)\n",
    "            pos_indexs = y_delta >= 0\n",
    "            neg_indexs = y_delta < 0\n",
    "\n",
    "            grad = np.zeros(len(y_true))\n",
    "            grad[pos_indexs] = self.cost_b_train[pos_indexs] * y_delta[pos_indexs]\n",
    "            grad[neg_indexs] = self.cost_a_train[neg_indexs] * y_delta[neg_indexs]\n",
    "            \n",
    "            hess = np.zeros(len(y_true))\n",
    "            hess[pos_indexs] = self.cost_b_train[pos_indexs]\n",
    "            hess[neg_indexs] = self.cost_a_train[neg_indexs]\n",
    "            \n",
    "            return grad, hess    \n",
    "        \n",
    "        def evalerror(preds, dval):\n",
    "            labels = dval.get_label()\n",
    "            less_diff = labels - preds\n",
    "            more_diff = preds - labels\n",
    "            less_indexs = (less_diff) > 0\n",
    "            more_indexs = (more_diff) > 0\n",
    "            cost = 0\n",
    "            cost += np.sum(less_diff[less_indexs] * self.cost_a_val[less_indexs])\n",
    "            cost += np.sum(more_diff[more_indexs] * self.cost_b_val[more_indexs])\n",
    "            return 'error', cost\n",
    "        \n",
    "        self.bst = xgb.train(param, dtrain, num_round, evallist, obj, evalerror)\n",
    "#         self.bst = xgb.train(param, dtrain, num_round, evallist)\n",
    "        \n",
    "    def predict(self, X_test):\n",
    "        dtest = xgb.DMatrix(X_test)\n",
    "        y_predict = self.bst.predict(dtest)\n",
    "        return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 810,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5  0.5]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[0]\teval-error:3692534.182972\n",
      "[1]\teval-error:3569645.478514\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.48917478  0.48917478  0.48917478  0.50724065  0.50724065  0.50724065\n",
      "  0.48917478  0.48917478  0.48917478  0.48917478]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.48125765  0.48125765  0.48125765  0.51641405  0.51641405  0.51641405\n",
      "  0.48125765  0.48125765  0.48125765  0.48125765]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[2]\teval-error:3455985.447116\n",
      "[3]\teval-error:3356531.910013\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.47158879  0.47158879  0.47158879  0.52636087  0.52636087  0.52636087\n",
      "  0.47158879  0.47158879  0.47158879  0.47158879]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.46572703  0.46572703  0.46572703  0.5373227   0.5373227   0.5373227\n",
      "  0.46572703  0.46572703  0.46572703  0.46572703]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[4]\teval-error:3240414.744608\n",
      "[5]\teval-error:3144347.632177\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.45736632  0.45736632  0.45736632  0.55130881  0.55130881  0.55130881\n",
      "  0.45736632  0.45736632  0.45736632  0.45736632]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44883943  0.44883943  0.46764538  0.5626986   0.5626986   0.59556741\n",
      "  0.44883943  0.44883943  0.46764538  0.44883943]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[6]\teval-error:3046230.080126\n",
      "[7]\teval-error:2964121.933239\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44047678  0.44047678  0.4592827   0.56460357  0.56460357  0.59747231\n",
      "  0.44047678  0.44047678  0.4592827   0.44047678]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.44187444  0.44187444  0.4606804   0.56600124  0.56600124  0.59887004\n",
      "  0.44187444  0.44187444  0.4606804   0.44187444]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[8]\teval-error:2879735.577140\n",
      "[9]\teval-error:2801447.188874\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4347719   0.4347719   0.45357785  0.57241279  0.57241279  0.60528159\n",
      "  0.4347719   0.4347719   0.45357785  0.4347719 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4263961   0.4263961   0.44520205  0.58031154  0.58031154  0.61318034\n",
      "  0.4263961   0.4263961   0.44520205  0.4263961 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[10]\teval-error:2722369.076501\n",
      "[11]\teval-error:2639746.407425\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.41758022  0.41758022  0.43638617  0.58889949  0.58889949  0.6217683\n",
      "  0.41758022  0.41758022  0.43638617  0.41758022]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.4103213   0.4103213   0.42912725  0.59705436  0.59705436  0.62992316\n",
      "  0.4103213   0.4103213   0.42912725  0.4103213 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[12]\teval-error:2575448.130677\n",
      "[13]\teval-error:2513365.990064\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.40692812  0.40692812  0.42573404  0.61125886  0.61125886  0.64412761\n",
      "  0.40692812  0.40692812  0.42573404  0.40692812]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.39839843  0.39839843  0.41720438  0.62033457  0.62033457  0.65320337\n",
      "  0.39839843  0.39839843  0.41720438  0.39839843]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[14]\teval-error:2448156.851176\n",
      "[15]\teval-error:2391974.918921\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.39241004  0.39241004  0.41121599  0.62676698  0.62676698  0.65963578\n",
      "  0.39241004  0.39241004  0.41121599  0.39241004]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.38696307  0.38696307  0.40576902  0.63395351  0.63395351  0.66682231\n",
      "  0.38696307  0.38696307  0.40576902  0.38696307]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[16]\teval-error:2337607.094014\n",
      "[17]\teval-error:2291592.298921\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.37818825  0.37818825  0.3969942   0.63171762  0.63171762  0.66458642\n",
      "  0.37818825  0.37818825  0.3969942   0.37818825]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.37799072  0.37799072  0.39679667  0.63152009  0.63152009  0.6643889\n",
      "  0.37799072  0.37799072  0.39679667  0.37799072]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[18]\teval-error:2242676.847613\n",
      "[19]\teval-error:2197894.298089\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.37013134  0.37013134  0.38893729  0.63131744  0.63131744  0.66418624\n",
      "  0.37013134  0.37013134  0.38893729  0.37013134]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.36282593  0.36282593  0.38163185  0.62909323  0.62909323  0.66196203\n",
      "  0.36282593  0.36282593  0.38163185  0.36282593]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[20]\teval-error:2155969.348170\n",
      "[21]\teval-error:2115607.464548\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.35655689  0.35655689  0.37536281  0.63626742  0.63626742  0.66913623\n",
      "  0.35655689  0.35655689  0.37536281  0.35655689]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.35149857  0.35149857  0.37030452  0.63655627  0.63655627  0.66942507\n",
      "  0.35149857  0.35149857  0.37030452  0.35149857]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[22]\teval-error:2076652.701649\n",
      "[23]\teval-error:2047474.195150\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.34871772  0.34871772  0.36752367  0.64678186  0.64678186  0.67965066\n",
      "  0.34871772  0.34871772  0.36752367  0.34871772]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.34225148  0.34225148  0.3610574   0.65714294  0.65714294  0.69001174\n",
      "  0.34225148  0.34225148  0.3610574   0.34225148]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[24]\teval-error:2015847.440346\n",
      "[25]\teval-error:1983179.539615\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.33658063  0.33658063  0.35538656  0.66059756  0.66059756  0.69346637\n",
      "  0.33658063  0.33658063  0.35538656  0.33658063]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.33582741  0.33582741  0.35463333  0.65984434  0.65984434  0.69271314\n",
      "  0.33582741  0.33582741  0.35463333  0.33582741]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[26]\teval-error:1957756.666339\n",
      "[27]\teval-error:1931882.525946\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.32923269  0.32923269  0.34803861  0.66023761  0.66023761  0.69310641\n",
      "  0.32923269  0.32923269  0.34803861  0.32923269]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.32619467  0.32619467  0.34500062  0.67154068  0.67154068  0.70440948\n",
      "  0.32619467  0.32619467  0.34500062  0.32619467]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[28]\teval-error:1902362.350233\n",
      "[29]\teval-error:1872076.052286\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.32513461  0.32513461  0.34394056  0.67048061  0.67048061  0.70334941\n",
      "  0.32513461  0.32513461  0.34394056  0.32513461]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.31858194  0.31858194  0.33738786  0.67212921  0.67212921  0.70499802\n",
      "  0.31858194  0.31858194  0.33738786  0.31858194]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[30]\teval-error:1847556.787497\n",
      "[31]\teval-error:1827478.270550\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.31304502  0.31304502  0.33185095  0.68029153  0.68029153  0.71316028\n",
      "  0.31304502  0.31304502  0.33185095  0.31304502]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.31167486  0.31167486  0.33048081  0.67892134  0.67892134  0.71179014\n",
      "  0.31167486  0.31167486  0.33048081  0.31167486]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[32]\teval-error:1805583.335433\n",
      "[33]\teval-error:1784888.241493\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.308       0.308       0.32680595  0.68298048  0.68298048  0.71584928\n",
      "  0.308       0.308       0.32680595  0.308     ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.30113947  0.30113947  0.31994542  0.68466723  0.68466723  0.71753603\n",
      "  0.30113947  0.30113947  0.31994542  0.30113947]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[34]\teval-error:1775530.761854\n",
      "[35]\teval-error:1749174.729725\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.29788464  0.29788464  0.31669059  0.69243169  0.69243169  0.72530049\n",
      "  0.29788464  0.29788464  0.31669059  0.29788464]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.2975986   0.2975986   0.31640452  0.69214565  0.69214565  0.72501445\n",
      "  0.2975986   0.2975986   0.31640452  0.2975986 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[36]\teval-error:1733697.798107\n",
      "[37]\teval-error:1729925.246127\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.29713759  0.29713759  0.31594354  0.69168466  0.69168466  0.72455347\n",
      "  0.29713759  0.29713759  0.31594354  0.29713759]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.29719406  0.29719406  0.31599998  0.69174111  0.69174111  0.72460991\n",
      "  0.29719406  0.29719406  0.31599998  0.29719406]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[38]\teval-error:1725148.664541\n",
      "[39]\teval-error:1713582.608616\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.2937721   0.2937721   0.31257802  0.70026213  0.70026213  0.73313093\n",
      "  0.2937721   0.2937721   0.31257802  0.2937721 ]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.29002786  0.29002786  0.30883381  0.70465207  0.70465207  0.73752093\n",
      "  0.29002786  0.29002786  0.30883381  0.29002786]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[40]\teval-error:1704288.680462\n",
      "[41]\teval-error:1698387.792558\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28567043  0.28567043  0.30447638  0.70029467  0.70029467  0.73316348\n",
      "  0.28567043  0.28567043  0.30447638  0.28567043]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28461981  0.28461981  0.30342573  0.69924402  0.69924402  0.73211282\n",
      "  0.28461981  0.28461981  0.30342573  0.28461981]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[42]\teval-error:1694857.325718\n",
      "[43]\teval-error:1687918.829901\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28448629  0.28448629  0.30329224  0.69911051  0.69911051  0.73197937\n",
      "  0.28448629  0.28448629  0.30329224  0.28448629]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28535092  0.28535092  0.30415684  0.69997513  0.69997513  0.73284394\n",
      "  0.28535092  0.28535092  0.30415684  0.28535092]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[44]\teval-error:1684731.748811\n",
      "[45]\teval-error:1681779.972747\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28944123  0.28944123  0.30824715  0.70406544  0.70406544  0.73693424\n",
      "  0.28944123  0.28944123  0.30824715  0.28944123]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28576794  0.28576794  0.30457389  0.70039219  0.70039219  0.73326099\n",
      "  0.28576794  0.28576794  0.30457389  0.28576794]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[46]\teval-error:1680339.895477\n",
      "[47]\teval-error:1685200.137598\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28409877  0.28409877  0.30290473  0.69872302  0.69872302  0.73159182\n",
      "  0.28409877  0.28409877  0.30290473  0.28409877]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.28033447  0.28033447  0.29914042  0.70235062  0.70235062  0.73521948\n",
      "  0.28033447  0.28033447  0.29914042  0.28033447]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[48]\teval-error:1681668.846146\n",
      "[49]\teval-error:1677848.800542\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.27732843  0.27732843  0.29613435  0.72286367  0.72286367  0.75573248\n",
      "  0.27732843  0.27732843  0.29613435  0.27732843]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.27329177  0.27329177  0.29209769  0.72531086  0.72531086  0.75817966\n",
      "  0.27329177  0.27329177  0.29209769  0.27329177]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[50]\teval-error:1676394.260700\n",
      "[51]\teval-error:1679652.417227\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.27048022  0.27048022  0.28928617  0.72884524  0.72884524  0.76171398\n",
      "  0.27048022  0.27048022  0.28928617  0.27048022]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.26765412  0.26765412  0.28646004  0.76231414  0.76231414  0.79518294\n",
      "  0.26765412  0.26765412  0.28646004  0.26765412]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[52]\teval-error:1677561.698593\n",
      "[53]\teval-error:1680370.301149\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.26425028  0.26425028  0.2830562   0.7589103   0.7589103   0.79177904\n",
      "  0.26425028  0.26425028  0.2830562   0.26425028]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n",
      "----\n",
      "[ 0.  0.  0.  1.  1.  1.  0.  0.  0.  0.]\n",
      "[ 0.26523706  0.26523706  0.28404301  0.75989711  0.75989711  0.79276586\n",
      "  0.26523706  0.26523706  0.28404301  0.26523706]\n",
      "[ 14.64  14.64  14.64  12.68  12.68  12.68  21.16  21.16  21.16  19.04]\n",
      "[ 26.2   26.2   26.2   22.68  22.68  22.68  37.84  37.84  37.84  34.04]\n",
      "----\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[54]\teval-error:1679196.173165\n"
     ]
    }
   ],
   "source": [
    "new_model = XGBoost(X_train, y_train, X_test, y_test, cost_infos)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##8.3 模型评估\n",
    "\n",
    "特征重要性"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 811,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1233ec750>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1233eca90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "importance = new_model.bst.get_fscore()\n",
    "importance = sorted(importance.items(),key=lambda x: x[1],reverse=True)\n",
    "tempdf = pd.DataFrame(importance,columns=[\"feature\",\"fscore\"])\n",
    "plt.figure()\n",
    "tempdf.plot(kind=\"barh\",x=\"feature\",y=\"fscore\",legend=False,figsize=(10,10))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 405,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['f0: item_id', 'f1: store_code', 'f2: special_day_max', 'f3: cate_level_id_median', 'f4: cate_id_median', 'f5: brand_id_median', 'f6: supplier_id_median', 'f7: month_max', 'f8: month_min', 'f9: special_day_1111_max', 'f10: special_day_1212_max', 'f11: special_day_0616_max', 'f12: item_id_month_median_mean', 'f13: item_id_median_mean', 'f14: item_id_0_median_mean', 'f15: item_id_1_median_mean', 'f16: item_id_2_median_mean', 'f17: item_id_3_median_mean', 'f18: item_id_4_median_mean', 'f19: item_id_5_median_mean', 'f20: qty_alipay_njhs_endsum_2', 'f21: qty_alipay_njhs_endsum_3', 'f22: qty_alipay_njhs_endsum_4', 'f23: qty_alipay_njhs_cumsum_shift_1', 'f24: qty_alipay_njhs_cumsum_shift_2', 'f25: qty_alipay_njhs_cumsum_shift_3', 'f26: qty_alipay_njhs_cumsum_shift_4', 'f27: qty_alipay_jhs_sum_shift_1', 'f28: qty_alipay_jhs_sum_shift_2', 'f29: qty_alipay_jhs_sum_shift_3', 'f30: qty_alipay_jhs_sum_shift_4', 'f31: pv_ipv_mean_shift_1', 'f32: pv_ipv_mean_shift_2', 'f33: pv_ipv_mean_shift_3', 'f34: pv_ipv_mean_shift_4', 'f35: qty_alipay_jhs_sum_shift_1', 'f36: qty_alipay_jhs_sum_shift_2', 'f37: qty_alipay_jhs_sum_shift_3', 'f38: qty_alipay_jhs_sum_shift_4', 'f39: cart_ipv_mean_shift_1', 'f40: cart_ipv_mean_shift_2', 'f41: cart_ipv_mean_shift_3', 'f42: cart_ipv_mean_shift_4', 'f43: pv_ipv_mean_shift_1', 'f44: pv_ipv_mean_shift_2', 'f45: pv_ipv_mean_shift_3', 'f46: pv_ipv_mean_shift_4', 'f47: qty_alipay_njhs_median_shift_1', 'f48: qty_alipay_njhs_median_shift_2', 'f49: qty_alipay_njhs_median_shift_3', 'f50: qty_alipay_njhs_median_shift_4', 'f51: qty_alipay_njhs_sum_shift_1', 'f52: qty_alipay_njhs_sum_shift_2', 'f53: qty_alipay_njhs_sum_shift_3', 'f54: qty_alipay_njhs_sum_shift_4']\n"
     ]
    }
   ],
   "source": [
    "print [\"f\"+str(i) +\": \" + val for i, val in enumerate(feature_cols)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###真实值做预测"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 812,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "总损失(真实特征): 1489234.00766\n"
     ]
    }
   ],
   "source": [
    "y_predict = new_model.predict(X_test)\n",
    "\n",
    "count = 0\n",
    "totol_cost = 0\n",
    "item_size = 963\n",
    "store_code_size = 6\n",
    "for i in range(item_size):\n",
    "    for j in range(store_code_size):\n",
    "        x = X_test[count]\n",
    "        a = cost_a_test[count]\n",
    "        b = cost_b_test[count]\n",
    "        y_pred = np.array(y_predict[count::(item_size * store_code_size)])\n",
    "        y_true = np.array(y_test[count::(item_size * store_code_size)])\n",
    "        totol_cost += get_item_cost(y_pred, y_true, a, b)\n",
    "        count += 1\n",
    "print \"总损失(真实特征): \" + str(totol_cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###预测值做预测\n",
    "\n",
    "- 仅仅对X_test的最后四列修改，即qty_alipay_njhs_sum_shift_i\n",
    "- 其他shift的值不改\n",
    "- cumsum增加"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 813,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "def predict_by_predict(X_test):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = new_model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    \n",
    "    ##第二周\n",
    "    week = 1\n",
    "    start = week*pred_size\n",
    "    end = (week+1)*pred_size\n",
    "    for i in range(start,end,1):\n",
    "        X[i][24] = X[i-week*pred_size][24]+y_predict[i-week*pred_size]\n",
    "        X[i][25] = X[i-week*pred_size][25]+y_predict[i-week*pred_size]\n",
    "        X[i][22] = X[i-week*pred_size][22]+y_predict[i-week*pred_size]\n",
    "        X[i][23] = X[i-week*pred_size][23]+y_predict[i-week*pred_size]\n",
    "        X[i][-1] = X[i][-2]\n",
    "        X[i][-2] = X[i][-3]\n",
    "        X[i][-3] = X[i][-4]\n",
    "        X[i][-4] = y_predict[i-week*pred_size]\n",
    "        X[i][20] = X[i][-4]+X[i][-3]\n",
    "        X[i][21] = X[i][-4]+X[i][-3]+X[i][-2]\n",
    "        X[i][22] = X[i][-4]+X[i][-3]+X[i][-2]+X[i][-1]\n",
    "    X_one_week = X[week * pred_size : (week+1)*pred_size]\n",
    "    y_pred_one_week = new_model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 814,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "总损失(预测特征): 1449148.52677\n"
     ]
    }
   ],
   "source": [
    "y_predict = predict_by_predict(X_test)\n",
    "\n",
    "\n",
    "item_id_list = [int(val) for val in les[0].inverse_transform(X_test[:, 0])]\n",
    "store_code_list = [int(val) for val in les[1].inverse_transform(X_test[:, 1])]\n",
    "\n",
    "y_pred_list = []\n",
    "y_true_list = []\n",
    "cost_list = []\n",
    "count = 0\n",
    "totol_cost = 0\n",
    "for i in range(item_size):\n",
    "    for j in range(store_code_size):\n",
    "        x = X_test[count]\n",
    "        item_id = item_id_list[count]\n",
    "        store_code = store_code_list[count]\n",
    "        a = cost_a_test[count]\n",
    "        b = cost_b_test[count]\n",
    "        y_pred = np.array(y_predict[count::(item_size * store_code_size)])\n",
    "        y_true = np.array(y_test[count::(item_size * store_code_size)])\n",
    "        cost = get_item_cost(y_pred, y_true, a, b)\n",
    "        y_pred_list.append(np.sum(y_pred))\n",
    "        y_true_list.append(np.sum(y_true))\n",
    "        cost_list.append(cost)\n",
    "        totol_cost += cost\n",
    "        count += 1\n",
    "print \"总损失(预测特征): \" + str(totol_cost)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###用一周填充两周"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 815,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#这里是一周一周预测，将预测值作为特征\n",
    "def predict_by_predict(X_test):\n",
    "    X = X_test.copy()\n",
    "    y_predict = []\n",
    "    pred_size = item_size * 6\n",
    "    \n",
    "    ##第一周\n",
    "    week = 0\n",
    "    X_one_week = X[week * pred_size : (week + 1) * pred_size]\n",
    "    y_pred_one_week = new_model.predict(X_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    y_predict += list(y_pred_one_week)\n",
    "    return y_predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 816,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "总损失(预测特征): 1489234.00766\n"
     ]
    }
   ],
   "source": [
    "y_predict = predict_by_predict(X_test)\n",
    "\n",
    "\n",
    "item_id_list = [int(val) for val in les[0].inverse_transform(X_test[:, 0])]\n",
    "store_code_list = [int(val) for val in les[1].inverse_transform(X_test[:, 1])]\n",
    "\n",
    "y_pred_list = []\n",
    "y_true_list = []\n",
    "cost_list = []\n",
    "count = 0\n",
    "totol_cost = 0\n",
    "for i in range(item_size):\n",
    "    for j in range(store_code_size):\n",
    "        x = X_test[count]\n",
    "        item_id = item_id_list[count]\n",
    "        store_code = store_code_list[count]\n",
    "        a = cost_a_test[count]\n",
    "        b = cost_b_test[count]\n",
    "        y_pred = np.array(y_predict[count::(item_size * store_code_size)])\n",
    "        y_true = np.array(y_test[count::(item_size * store_code_size)])\n",
    "        cost = get_item_cost(y_pred, y_true, a, b)\n",
    "        y_pred_list.append(np.sum(y_pred))\n",
    "        y_true_list.append(np.sum(y_true))\n",
    "        cost_list.append(cost)\n",
    "        totol_cost += cost\n",
    "        count += 1\n",
    "print \"总损失(预测特征): \" + str(totol_cost)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
